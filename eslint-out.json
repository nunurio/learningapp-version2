[{"filePath":"/Users/takahashigenki/projects/learningapp-version2/scripts/check-lib-coverage.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/api/ai/lesson-cards/route.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/api/ai/lesson-cards/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/api/ai/outline/route.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/api/ai/outline/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/api/db/route.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/api/db/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/auth/callback/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/auth/confirm/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/auth/reset-password/actions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/auth/reset-password/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/courses/[courseId]/lessons/[lessonId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/courses/[courseId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/courses/[courseId]/workspace/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/courses/new/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/courses/new/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/courses/plan/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/courses/plan/page.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/courses/plan/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/dashboard/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/error/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/learn/[courseId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/login/actions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/login/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ai/LessonCardsRunner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ai/useSSE.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/dnd/SortableList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/hooks/useHotkeys.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/player/QuizOption.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/DiffList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/SSEConsole.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/SSETimeline.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/SSETimeline.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/command-palette.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/confirm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/live-status.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/notification-center.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/progress-ring.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/workspace/CardPlayer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/workspace/Inspector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/workspace/NavTree.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/workspace/Skeletons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/workspace/WorkspaceShell.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/ai/mock.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/ai/mock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/client-api.reads.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/client-api.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/client-api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/client-api.writes.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/data.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/database.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/db/helpers.server.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/db/helpers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/db/mappers.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/db/queries.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/db/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/idb.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/idb.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/state/useHydrateDrafts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/state/workspace-store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/supabase/client.server.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/supabase/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/supabase/middleware.server.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":68,"fix":{"range":[3937,3940],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3937,3940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3937,3940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":57,"fix":{"range":[4549,4552],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4549,4552],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4549,4552],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"import { describe, it, expect, vi, beforeEach, afterEach, type Mock } from \"vitest\";\n\n// Mock next/server with minimal NextResponse/NextRequest behavior\nconst nextSpy = {\n  nextCalls: [] as unknown[],\n  redirectCalls: [] as unknown[],\n};\n\nvi.mock(\"next/server\", () => {\n  const NextResponse = {\n    next: vi.fn((arg: unknown) => {\n      nextSpy.nextCalls.push(arg);\n      return {\n        cookies: {\n          set: vi.fn(),\n          getAll: vi.fn(() => []),\n          setAll: vi.fn(() => {}),\n        },\n      } as unknown as { cookies: { set: (...args: unknown[]) => void; getAll: () => unknown[]; setAll: (cs: unknown[]) => void } };\n    }),\n    redirect: vi.fn((url: unknown) => {\n      nextSpy.redirectCalls.push(url);\n      return { redirected: true, url } as { redirected: boolean; url: unknown };\n    }),\n  };\n  return { NextResponse, NextRequest: class {}, }; // type shim\n});\n\n// Mock Supabase server client\nvi.mock(\"@supabase/ssr\", () => ({\n  createServerClient: vi.fn(),\n}));\n\n// Import SUT after mocks\nimport { updateSession } from \"@/lib/supabase/middleware\";\nimport { createServerClient } from \"@supabase/ssr\";\nimport { NextResponse } from \"next/server\";\n\nconst ORIG_ENV = { ...process.env };\n\nbeforeEach(() => {\n  vi.restoreAllMocks();\n  process.env = { ...ORIG_ENV };\n  (NextResponse.next as unknown as Mock).mockClear?.();\n  (NextResponse.redirect as unknown as Mock).mockClear?.();\n  nextSpy.nextCalls.length = 0;\n  nextSpy.redirectCalls.length = 0;\n});\n\nafterEach(() => {\n  process.env = { ...ORIG_ENV };\n});\n\nfunction makeReq(pathname: string) {\n  return {\n    cookies: {\n      getAll: vi.fn(() => [] as unknown[]),\n    },\n    nextUrl: {\n      pathname,\n      clone() {\n        return { pathname };\n      },\n    },\n  } as unknown;\n}\n\ndescribe(\"middleware updateSession\", () => {\n  it(\"throws when env vars missing\", async () => {\n    delete process.env.NEXT_PUBLIC_SUPABASE_URL;\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = \"k\";\n    await expect(updateSession(makeReq(\"/\"))).rejects.toThrow(/NEXT_PUBLIC_SUPABASE_URL/);\n\n    process.env.NEXT_PUBLIC_SUPABASE_URL = \"https://example.supabase.co\";\n    delete process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n    await expect(updateSession(makeReq(\"/\"))).rejects.toThrow(/NEXT_PUBLIC_SUPABASE_ANON_KEY/);\n  });\n\n  it(\"wires cookie setAll onto response and does not throw\", async () => {\n    process.env.NEXT_PUBLIC_SUPABASE_URL = \"https://example.supabase.co\";\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = \"anon_key\";\n    // Mock client that invokes cookies.setAll during getUser()\n    vi.mocked(createServerClient).mockImplementation((_u: string, _k: string, opts: { cookies: { setAll?: (items: Array<{ name: string; value: string; options?: Record<string, unknown> }>) => void } }) => {\n      return {\n        auth: {\n          getUser: vi.fn(async () => {\n            // simulate Supabase writing session cookies\n            opts.cookies.setAll?.([\n              { name: \"sb-access-token\", value: \"tok\", options: { path: \"/\" } },\n              { name: \"sb-refresh-token\", value: \"ref\", options: { path: \"/\" } },\n            ]);\n            return { data: { user: { id: \"u\" } } };\n          }),\n        },\n      } as unknown as { auth: { getUser: () => Promise<{ data: { user: { id: string } } }> } };\n    });\n\n    const res = await updateSession(makeReq(\"/dashboard\"));\n    expect(NextResponse.next).toHaveBeenCalled();\n    expect(res).toBeTruthy();\n  });\n\n  it(\"redirects to /login when no user on private route\", async () => {\n    process.env.NEXT_PUBLIC_SUPABASE_URL = \"https://example.supabase.co\";\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = \"anon_key\";\n    vi.mocked(createServerClient).mockImplementation((_u: string, _k: string) => {\n      return { auth: { getUser: vi.fn(async () => ({ data: { user: null } })) } } as { auth: { getUser: () => Promise<{ data: { user: null } }> } };\n    });\n    const resp = await updateSession(makeReq(\"/courses/new\") as any);\n    expect((resp as unknown as { redirected?: boolean }).redirected).toBe(true);\n  });\n\n  it(\"redirects to /dashboard when user on public route /\", async () => {\n    process.env.NEXT_PUBLIC_SUPABASE_URL = \"https://example.supabase.co\";\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = \"anon_key\";\n    vi.mocked(createServerClient).mockImplementation((_u: string, _k: string) => {\n      return { auth: { getUser: vi.fn(async () => ({ data: { user: { id: \"u\" } } })) } } as { auth: { getUser: () => Promise<{ data: { user: { id: string } } }> } };\n    });\n    const resp = await updateSession(makeReq(\"/\") as any);\n    expect((resp as unknown as { redirected?: boolean }).redirected).toBe(true);\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/supabase/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/supabase/server.server.test.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of a(n) `error` type typed value.","line":70,"column":5,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":70,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from \"vitest\";\n\n// Mock external deps before importing SUT\nvi.mock(\"@supabase/ssr\", () => ({\n  createServerClient: vi.fn(),\n}));\nvi.mock(\"next/headers\", () => ({\n  cookies: vi.fn(),\n}));\n\nimport { createClient, getCurrentUserId } from \"@/lib/supabase/server\";\nimport { createServerClient } from \"@supabase/ssr\";\nimport { cookies as cookiesFn } from \"next/headers\";\n\nconst ORIG_ENV = { ...process.env };\n\nbeforeEach(() => {\n  vi.restoreAllMocks();\n  process.env = { ...ORIG_ENV };\n});\n\nafterEach(() => {\n  process.env = { ...ORIG_ENV };\n});\n\ndescribe(\"supabase/server createClient\", () => {\n  it(\"throws with clear messages when env vars are missing\", async () => {\n    delete process.env.NEXT_PUBLIC_SUPABASE_URL;\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = \"key\";\n    await expect(createClient()).rejects.toThrow(\"NEXT_PUBLIC_SUPABASE_URL\");\n\n    process.env.NEXT_PUBLIC_SUPABASE_URL = \"https://example.supabase.co\";\n    delete process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;\n    await expect(createClient()).rejects.toThrow(\"NEXT_PUBLIC_SUPABASE_ANON_KEY\");\n  });\n\n  it(\"wires Next cookies() into Supabase client options (getAll/setAll)\", async () => {\n    process.env.NEXT_PUBLIC_SUPABASE_URL = \"https://example.supabase.co\";\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = \"anon_key\";\n\n    const store = {\n      getAll: vi.fn(() => [{ name: \"a\", value: \"1\" }]),\n      set: vi.fn(),\n    } as { getAll: () => unknown[]; set: (...args: unknown[]) => void };\n    vi.mocked(cookiesFn).mockResolvedValue(store as unknown as never);\n\n    let capturedOpts: { cookies: { getAll: () => unknown[]; setAll: (items: Array<{ name: string; value: string; options?: Record<string, unknown> }>) => void } };\n    vi.mocked(createServerClient).mockImplementation((url: string, key: string, opts: typeof capturedOpts) => {\n      expect(url).toBe(\"https://example.supabase.co\");\n      expect(key).toBe(\"anon_key\");\n      capturedOpts = opts;\n      return { auth: { getUser: vi.fn(async () => ({ data: { user: { id: \"u-1\" } } })) } } as { auth: { getUser: () => Promise<{ data: { user: { id: string } } }> } };\n    });\n\n    await createClient();\n\n    // getAll proxies to cookie store\n    const out = capturedOpts.cookies.getAll();\n    expect(out).toEqual([{ name: \"a\", value: \"1\" }]);\n    expect(store.getAll).toHaveBeenCalledTimes(1);\n\n    // setAll calls cookieStore.set for each cookie, and swallows errors\n    capturedOpts.cookies.setAll([\n      { name: \"sb-access-token\", value: \"tok\", options: { path: \"/\" } },\n      { name: \"sb-refresh-token\", value: \"ref\", options: { path: \"/\" } },\n    ]);\n    expect(store.set).toHaveBeenCalledTimes(2);\n\n    // When set() throws, setAll must not rethrow\n    store.set.mockImplementationOnce(() => { throw new Error(\"readonly\"); });\n    expect(() =>\n      capturedOpts.cookies.setAll([\n        { name: \"x\", value: \"y\", options: { path: \"/\" } },\n      ])\n    ).not.toThrow();\n  });\n});\n\ndescribe(\"getCurrentUserId\", () => {\n  it(\"returns user id when session exists\", async () => {\n    process.env.NEXT_PUBLIC_SUPABASE_URL = \"https://example.supabase.co\";\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = \"anon_key\";\n    vi.mocked(cookiesFn).mockResolvedValue({ getAll: vi.fn(() => []), set: vi.fn() } as unknown as never);\n    vi.mocked(createServerClient).mockImplementation((_u: string, _k: string) => {\n      return { auth: { getUser: vi.fn(async () => ({ data: { user: { id: \"user-123\" } } })) } } as { auth: { getUser: () => Promise<{ data: { user: { id: string } } }> } };\n    });\n    const uid = await getCurrentUserId();\n    expect(uid).toBe(\"user-123\");\n  });\n\n  it(\"returns undefined when no user\", async () => {\n    process.env.NEXT_PUBLIC_SUPABASE_URL = \"https://example.supabase.co\";\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY = \"anon_key\";\n    vi.mocked(cookiesFn).mockResolvedValue({ getAll: vi.fn(() => []), set: vi.fn() } as unknown as never);\n    vi.mocked(createServerClient).mockImplementation((_u: string, _k: string) => {\n      return { auth: { getUser: vi.fn(async () => ({ data: { user: null } })) } } as { auth: { getUser: () => Promise<{ data: { user: null } }> } };\n    });\n    const uid = await getCurrentUserId();\n    expect(uid).toBeUndefined();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/supabase/server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/utils/cn.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/utils/cn.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/utils/uid.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":51,"fix":{"range":[2437,2440],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2437,2440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2437,2440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { describe, it, expect, vi, afterEach, beforeEach } from \"vitest\";\nimport { uid } from \"@/lib/utils/uid\";\n\n// UUID v4-ish (format check only; version/variant via regex)\nconst UUID_RE = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\nconst FALLBACK_RE = /^\\d{13}_[a-z0-9]+$/i;\n\nconst originalCrypto = globalThis.crypto;\n\nbeforeEach(() => {\n  // Ensure a clean slate for spies/replacements\n  vi.restoreAllMocks();\n  if (originalCrypto) {\n    Object.defineProperty(globalThis, \"crypto\", {\n      value: originalCrypto,\n      configurable: true,\n    });\n  }\n});\n\nafterEach(() => {\n  // Always restore the original crypto object\n  if (originalCrypto) {\n    Object.defineProperty(globalThis, \"crypto\", {\n      value: originalCrypto,\n      configurable: true,\n    });\n  }\n});\n\ndescribe(\"uid\", () => {\n  it(\"crypto.randomUUID が存在するときは UUID 形式を返す\", () => {\n    // If the host provides randomUUID, assert UID format (and prefer spy to ensure path)\n    if (globalThis.crypto && \"randomUUID\" in globalThis.crypto) {\n      const stub = \"123e4567-e89b-42d3-a456-426614174000\"; // valid UUID format\n      const spy = vi\n        .spyOn(globalThis.crypto, \"randomUUID\")\n        .mockReturnValue(stub as `${string}-${string}-${string}-${string}-${string}`);\n      const id = uid();\n      expect(id).toBe(stub);\n      expect(id).toMatch(UUID_RE);\n      expect(spy).toHaveBeenCalledTimes(1);\n    } else {\n      // Provide a minimal crypto with randomUUID for this test\n      Object.defineProperty(globalThis, \"crypto\", {\n        value: {\n          randomUUID: () => \"123e4567-e89b-42d3-a456-426614174000\",\n        },\n        configurable: true,\n      });\n      const id = uid();\n      expect(id).toMatch(UUID_RE);\n    }\n  });\n\n  it(\"randomUUID が未定義なら Date.now()_rand 形式にフォールバック\", () => {\n    // Replace crypto with object lacking randomUUID\n    Object.defineProperty(globalThis, \"crypto\", {\n      value: { /* intentionally no randomUUID */ },\n      configurable: true,\n    });\n    const id = uid();\n    expect(id).toMatch(FALLBACK_RE);\n    const [ts] = id.split(\"_\");\n    expect(ts).toHaveLength(13);\n  });\n\n  it(\"randomUUID が例外を投げてもフォールバックする\", () => {\n    // Ensure we have a crypto object first\n    if (!globalThis.crypto) {\n      Object.defineProperty(globalThis, \"crypto\", {\n        value: {},\n        configurable: true,\n      });\n    }\n    // Stub randomUUID to throw\n    Object.defineProperty(globalThis.crypto as any, \"randomUUID\", {\n      value: () => {\n        throw new Error(\"boom\");\n      },\n      configurable: true,\n      writable: true,\n    });\n\n    const id = uid();\n    expect(id).toMatch(FALLBACK_RE);\n  });\n\n  it(\"連続呼び出ししても高確率で一意 (randomUUID 経路)\", () => {\n    // If randomUUID exists, use it; otherwise provide a simple stub\n    if (!globalThis.crypto || !(\"randomUUID\" in globalThis.crypto)) {\n      Object.defineProperty(globalThis, \"crypto\", {\n        value: {\n          randomUUID: () => cryptoLikeUUID(),\n        },\n        configurable: true,\n      });\n    }\n    const N = 200;\n    const set = new Set<string>();\n    for (let i = 0; i < N; i++) set.add(uid());\n    expect(set.size).toBe(N);\n  });\n\n  it(\"連続呼び出ししても高確率で一意 (フォールバック経路)\", () => {\n    // Force fallback by removing randomUUID\n    Object.defineProperty(globalThis, \"crypto\", {\n      value: { /* no randomUUID */ },\n      configurable: true,\n    });\n    const N = 200;\n    const set = new Set<string>();\n    for (let i = 0; i < N; i++) set.add(uid());\n    expect(set.size).toBe(N);\n  });\n});\n\n// Helper: generate a UUID-like string when needed for stubbing\nfunction cryptoLikeUUID(): string {\n  // Simple, sufficient for uniqueness tests (not cryptographically secure)\n  const s = (n: number) => Array.from({ length: n }, () => Math.floor(Math.random() * 16).toString(16)).join(\"\");\n  const v = ((Math.floor(Math.random() * 4) + 1) as 1 | 2 | 3 | 4).toString(16);\n  const vv = ((8 + Math.floor(Math.random() * 4)) as 8 | 9 | 10 | 11).toString(16);\n  return `${s(8)}-${s(4)}-${v}${s(3)}-${vv}${s(3)}-${s(12)}`;\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/utils/uid.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/server-actions/ai.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":20,"fix":{"range":[577,580],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[577,580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[577,580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":68,"fix":{"range":[948,951],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[948,951],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[948,951],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":63,"fix":{"range":[1277,1280],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1277,1280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1277,1280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":21,"fix":{"range":[1433,1436],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1433,1436],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1433,1436],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":20,"fix":{"range":[1461,1464],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1461,1464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1461,1464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":37,"fix":{"range":[1892,1895],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1892,1895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1892,1895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":47,"column":64,"nodeType":"Property","messageId":"anyAssignment","endLine":47,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":37,"fix":{"range":[2104,2107],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2104,2107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2104,2107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":50,"column":64,"nodeType":"Property","messageId":"anyAssignment","endLine":50,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":60,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":60,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .table on an `any` value.","line":60,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":41},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .pay on an `any` value.","line":60,"column":57,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":60,"endColumn":60},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access [0] on an `any` value.","line":62,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":62,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access [1] on an `any` value.","line":63,"column":15,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":63,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":21,"fix":{"range":[2853,2856],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2853,2856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2853,2856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":20,"fix":{"range":[2881,2884],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2881,2884],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2881,2884],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":37,"fix":{"range":[3479,3482],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3479,3482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3479,3482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .length on an `any` value.","line":88,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":88,"endColumn":27},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access [0] on an `any` value.","line":89,"column":21,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":89,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":21,"fix":{"range":[4049,4052],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4049,4052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4049,4052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":20,"fix":{"range":[4077,4080],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4077,4080],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4077,4080],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":23,"fix":{"range":[4498,4501],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4498,4501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4498,4501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .select on an `any` value.","line":104,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":104,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .eq on an `any` value.","line":105,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":105,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order on an `any` value.","line":106,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":106,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":107,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":107,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .insert on an `any` value.","line":108,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":108,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":38,"fix":{"range":[4735,4738],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4735,4738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4735,4738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":121,"column":64,"nodeType":"Property","messageId":"anyAssignment","endLine":121,"endColumn":85},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":85,"fix":{"range":[5477,5480],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5477,5480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5477,5480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":20,"fix":{"range":[5707,5710],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5707,5710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5707,5710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":23,"fix":{"range":[6128,6131],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6128,6131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6128,6131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .select on an `any` value.","line":137,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":137,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .eq on an `any` value.","line":138,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order on an `any` value.","line":139,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":139,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":140,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":140,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .insert on an `any` value.","line":141,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":141,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":39,"fix":{"range":[6365,6368],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6365,6368],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6365,6368],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":154,"column":71,"nodeType":"Property","messageId":"anyAssignment","endLine":154,"endColumn":92},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":154,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":154,"endColumn":92,"fix":{"range":[7079,7082],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7079,7082],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7079,7082],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":19,"source":"/* @vitest-environment node */\nimport { describe, it, expect, vi, beforeEach } from \"vitest\";\n\nconst planPayload = {\n  course: { title: \"T\", description: \"D\", category: \"Cat\" },\n  lessons: [{ title: \"L1\" }, { title: \"L2\" }],\n} as const;\n\nconst cardsPayload = {\n  lessonTitle: \"L\",\n  cards: [\n    { type: \"text\", body: \"a\" },\n    { type: \"quiz\", question: \"q\", options: [\"a\",\"b\"], answerIndex: 1 },\n  ],\n} as const;\n\ndescribe(\"server-actions/ai\", () => {\n  beforeEach(() => {\n    vi.resetModules();\n  });\n\n  it(\"saveDraftAction: 認証必須、insert→id返却\", async () => {\n    const supa: any = { from: vi.fn(() => ({ insert: () => ({ select: () => ({ single: async () => ({ data: { id: \"D1\" }, error: null }) }) }) })) };\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa, getCurrentUserId: async () => \"U\" }));\n    const { saveDraftAction } = await import(\"./ai\");\n    const out = await saveDraftAction(\"outline\", planPayload as any);\n    expect(out.id).toBe(\"D1\");\n  });\n\n  it(\"saveDraftAction: 未認証はエラー\", async () => {\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => ({}), getCurrentUserId: async () => undefined }));\n    const { saveDraftAction } = await import(\"./ai\");\n    await expect(saveDraftAction(\"outline\", planPayload as any)).rejects.toThrow(/Not authenticated/);\n  });\n\n  it(\"commitCoursePlanAction: draft→course+lessons挿入→draft削除、courseId返却\", async () => {\n    const calls: any[] = [];\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table === \"ai_drafts\") {\n          return {\n            select: () => ({ eq: () => ({ eq: () => ({ eq: () => ({ maybeSingle: async () => ({ data: { id: \"D1\", kind: \"outline\", payload: planPayload }, error: null }) }) }) }) }),\n            delete: () => ({ eq: async () => ({}) }),\n          };\n        }\n        if (table === \"courses\") {\n          return { insert: (pay: any) => { calls.push({ table, pay }); return { select: () => ({ single: async () => ({ data: { id: \"C100\" }, error: null }) }) } } };\n        }\n        if (table === \"lessons\") {\n          return { insert: (pay: any) => { calls.push({ table, pay }); return { error: null } } };\n        }\n        throw new Error(\"unexpected table: \" + table);\n      }),\n    };\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa, getCurrentUserId: async () => \"U\" }));\n    const { commitCoursePlanAction } = await import(\"./ai\");\n    const out = await commitCoursePlanAction(\"D1\");\n    expect(out?.courseId).toBe(\"C100\");\n    // lessons は order_index 0..n-1\n    const ls = calls.find((c) => c.table === \"lessons\").pay;\n    expect(Array.isArray(ls)).toBe(true);\n    expect(ls[0].order_index).toBe(0);\n    expect(ls[1].order_index).toBe(1);\n  });\n\n  it(\"commitCoursePlanPartialAction: 選択indexのみ追加、order_indexは0..n-1で再採番\", async () => {\n    const calls: any[] = [];\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table === \"ai_drafts\") {\n          return {\n            select: () => ({ eq: () => ({ eq: () => ({ eq: () => ({ maybeSingle: async () => ({ data: { id: \"D1\", kind: \"outline\", payload: planPayload }, error: null }) }) }) }) }),\n            delete: () => ({ eq: async () => ({}) }),\n          };\n        }\n        if (table === \"courses\") {\n          return { insert: () => ({ select: () => ({ single: async () => ({ data: { id: \"C200\" }, error: null }) }) }) };\n        }\n        if (table === \"lessons\") {\n          return { insert: (pay: any) => { calls.push(pay); return { error: null } } };\n        }\n        throw new Error(\"unexpected table: \" + table);\n      }),\n    };\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa, getCurrentUserId: async () => \"U\" }));\n    const { commitCoursePlanPartialAction } = await import(\"./ai\");\n    await commitCoursePlanPartialAction(\"D1\", [1]);\n    expect(calls[0].length).toBe(1);\n    expect(calls[0][0].order_index).toBe(0);\n  });\n\n  it(\"commitLessonCardsAction: siblingsの次indexから挿入、draft削除、workspace再検証\", async () => {\n    const calls: any[] = [];\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table === \"ai_drafts\") {\n          return {\n            select: () => ({ eq: () => ({ eq: () => ({ eq: () => ({ maybeSingle: async () => ({ data: { id: \"D2\", kind: \"lesson-cards\", payload: cardsPayload }, error: null }) }) }) }) }),\n            delete: () => ({ eq: async () => ({}) }),\n          };\n        }\n        if (table === \"cards\") {\n          const q: any = {};\n          q.select = vi.fn(() => q);\n          q.eq = vi.fn(() => q);\n          q.order = vi.fn(() => q);\n          q.limit = vi.fn(async () => ({ data: [{ order_index: 10 }], error: null }));\n          q.insert = vi.fn((rows: any[]) => { calls.push(rows); return { select: () => ({ data: [{ id: \"K1\" }, { id: \"K2\" }], error: null }) } });\n          return q;\n        }\n        if (table === \"lessons\") {\n          return { select: () => ({ eq: () => ({ single: async () => ({ data: { course_id: \"COURSE_L\" }, error: null }) }) }) };\n        }\n        throw new Error(\"unexpected table: \" + table);\n      }),\n    };\n    const reval = vi.fn();\n    vi.doMock(\"next/cache\", () => ({ revalidatePath: reval }));\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa, getCurrentUserId: async () => \"U\" }));\n    const { commitLessonCardsAction } = await import(\"./ai\");\n    const out = await commitLessonCardsAction({ draftId: \"D2\", lessonId: \"L1\" as any });\n    expect(out?.count).toBe(2);\n    expect(reval).toHaveBeenCalledWith(`/courses/COURSE_L/workspace`, \"page\");\n  });\n\n  it(\"commitLessonCardsPartialAction: 選択indexのみ挿入し、draft削除→workspace再検証\", async () => {\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table === \"ai_drafts\") {\n          return {\n            select: () => ({ eq: () => ({ eq: () => ({ eq: () => ({ maybeSingle: async () => ({ data: { id: \"D2\", kind: \"lesson-cards\", payload: cardsPayload }, error: null }) }) }) }) }),\n            delete: () => ({ eq: async () => ({}) }),\n          };\n        }\n        if (table === \"cards\") {\n          const q: any = {};\n          q.select = vi.fn(() => q);\n          q.eq = vi.fn(() => q);\n          q.order = vi.fn(() => q);\n          q.limit = vi.fn(async () => ({ data: [{ order_index: 1 }], error: null }));\n          q.insert = vi.fn((_rows: any[]) => ({ select: () => ({ data: [{ id: \"K\" }], error: null }) }));\n          return q;\n        }\n        if (table === \"lessons\") {\n          return { select: () => ({ eq: () => ({ single: async () => ({ data: { course_id: \"COURSE_P\" }, error: null }) }) }) };\n        }\n        throw new Error(\"unexpected table: \" + table);\n      }),\n    };\n    const reval = vi.fn();\n    vi.doMock(\"next/cache\", () => ({ revalidatePath: reval }));\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa, getCurrentUserId: async () => \"U\" }));\n    const { commitLessonCardsPartialAction } = await import(\"./ai\");\n    const out = await commitLessonCardsPartialAction({ draftId: \"D2\", lessonId: \"L1\" as any, selectedIndexes: [1] });\n    expect(out?.count).toBe(1);\n    expect(reval).toHaveBeenCalledWith(`/courses/COURSE_P/workspace`, \"page\");\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/server-actions/ai.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/server-actions/cards.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":21,"fix":{"range":[279,282],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[279,282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[279,282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":20,"fix":{"range":[307,310],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[307,310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[307,310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":23,"fix":{"range":[602,605],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[602,605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[602,605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .select on an `any` value.","line":20,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":20,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .eq on an `any` value.","line":21,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":21,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order on an `any` value.","line":22,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":22,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":23,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":23,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .insert on an `any` value.","line":24,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":24,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":41,"fix":{"range":[841,844],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[841,844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[841,844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":25,"column":40,"nodeType":"Property","messageId":"anyAssignment","endLine":25,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":53,"fix":{"range":[1405,1408],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1405,1408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1405,1408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .payload on an `any` value.","line":39,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":39,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":23,"fix":{"range":[1757,1760],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1757,1760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1757,1760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":20,"fix":{"range":[1785,1788],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1785,1788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1785,1788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":34,"fix":{"range":[2034,2037],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2034,2037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2034,2037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":43,"fix":{"range":[2657,2660],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2657,2660],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2657,2660],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":20,"fix":{"range":[2939,2942],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2939,2942],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2939,2942],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":45,"fix":{"range":[3792,3795],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3792,3795],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3792,3795],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":20,"fix":{"range":[3915,3918],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3915,3918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3915,3918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .from on an `any` value.","line":96,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":96,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":20,"fix":{"range":[4260,4263],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4260,4263],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4260,4263],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":46,"fix":{"range":[5067,5070],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5067,5070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5067,5070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":20,"fix":{"range":[5228,5231],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5228,5231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5228,5231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":48,"fix":{"range":[5840,5843],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5840,5843],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5840,5843],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":67,"fix":{"range":[5859,5862],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5859,5862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5859,5862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":23,"fix":{"range":[5987,5990],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5987,5990],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5987,5990],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":20,"fix":{"range":[6015,6018],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6015,6018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6015,6018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":34,"fix":{"range":[6534,6537],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6534,6537],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6534,6537],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":149,"column":116,"nodeType":"Property","messageId":"anyAssignment","endLine":149,"endColumn":139},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order_index on an `any` value.","line":149,"column":128,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":149,"endColumn":139},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":41,"fix":{"range":[7047,7050],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7047,7050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7047,7050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":65,"fix":{"range":[7071,7074],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7071,7074],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7071,7074],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .oi on an `any` value.","line":161,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .oi on an `any` value.","line":162,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":162,"endColumn":36},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .oi on an `any` value.","line":163,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":163,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":168,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":23,"fix":{"range":[7463,7466],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7463,7466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7463,7466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":20,"fix":{"range":[7518,7521],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7518,7521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7518,7521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":179,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":34,"fix":{"range":[7994,7997],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7994,7997],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7994,7997],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order_index on an `any` value.","line":183,"column":52,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":183,"endColumn":63},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order_index on an `any` value.","line":183,"column":88,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":183,"endColumn":99},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":187,"column":41,"nodeType":"Property","messageId":"anyAssignment","endLine":187,"endColumn":64},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order_index on an `any` value.","line":187,"column":53,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":187,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":48,"fix":{"range":[8959,8962],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8959,8962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8959,8962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":67,"fix":{"range":[8978,8981],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8978,8981],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8978,8981],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .oi on an `any` value.","line":202,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":202,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":45,"fixableErrorCount":0,"fixableWarningCount":27,"source":"/* @vitest-environment node */\nimport { describe, it, expect, vi, beforeEach } from \"vitest\";\n\ndescribe(\"server-actions/cards\", () => {\n  beforeEach(() => {\n    vi.resetModules();\n  });\n\n  it(\"addCardAction: siblingsの最大index+1で挿入→コースworkspace再検証\", async () => {\n    const calls: any[] = [];\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table === \"lessons\") {\n          return {\n            select: () => ({ eq: () => ({ single: async () => ({ data: { course_id: \"COURSE1\" }, error: null }) }) }),\n          };\n        }\n        if (table === \"cards\") {\n          const q: any = {};\n          q.select = vi.fn(() => q);\n          q.eq = vi.fn(() => q);\n          q.order = vi.fn(() => q);\n          q.limit = vi.fn(async () => ({ data: [{ order_index: 7 }], error: null }));\n          q.insert = vi.fn((payload: any) => {\n            calls.push({ op: \"insert\", payload });\n            return { select: () => ({ single: async () => ({ data: { id: \"CARD_NEW\" }, error: null }) }) };\n          });\n          return q;\n        }\n        throw new Error(\"unexpected table: \" + table);\n      }),\n    };\n    const reval = vi.fn();\n    vi.doMock(\"next/cache\", () => ({ revalidatePath: reval }));\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa }));\n    const { addCardAction } = await import(\"./cards\");\n    const id = await addCardAction(\"LESSON_X\" as any, { cardType: \"text\", content: { body: \"b\" }, title: null });\n    expect(id).toBe(\"CARD_NEW\");\n    expect(calls[0].payload).toMatchObject({ lesson_id: \"LESSON_X\", order_index: 8 });\n    expect(reval).toHaveBeenCalledWith(`/courses/COURSE1/workspace`, \"page\");\n  });\n\n  it(\"updateCardAction: 差分のみ更新し、workspace を再検証\", async () => {\n    const updates: any[] = [];\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table === \"cards\") {\n          return {\n            select: () => ({ eq: () => ({ single: async () => ({ data: { lesson_id: \"LESSON_A\" }, error: null }) }) }),\n            update: (payload: any) => ({ eq: async () => { updates.push(payload); return { error: null }; } }),\n          };\n        }\n        if (table === \"lessons\") {\n          return { select: () => ({ eq: () => ({ single: async () => ({ data: { course_id: \"COURSE_A\" }, error: null }) }) }) };\n        }\n        throw new Error(\"unexpected table: \" + table);\n      }),\n    };\n    const reval = vi.fn();\n    vi.doMock(\"next/cache\", () => ({ revalidatePath: reval }));\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa }));\n    const { updateCardAction } = await import(\"./cards\");\n    await updateCardAction(\"CARD_1\" as any, { title: \"T\", orderIndex: 3 });\n    expect(updates[0]).toEqual({ title: \"T\", order_index: 3 });\n    expect(reval).toHaveBeenCalledWith(`/courses/COURSE_A/workspace`, \"page\");\n  });\n\n  it(\"deleteCardAction: 削除後に再検証（lessonsの取得が失敗したらrevalidateしない）\", async () => {\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table === \"cards\") {\n          return {\n            select: () => ({ eq: () => ({ single: async () => ({ data: { lesson_id: \"LESSON_Y\" }, error: null }) }) }),\n            delete: () => ({ eq: async () => ({ error: null }) }),\n          };\n        }\n        if (table === \"lessons\") {\n          return { select: () => ({ eq: () => ({ single: async () => ({ data: null, error: Object.assign(new Error(\"nf\"), { code: \"P0001\" }) }) }) }) };\n        }\n        throw new Error(\"unexpected table: \" + table);\n      }),\n    };\n    const reval = vi.fn();\n    vi.doMock(\"next/cache\", () => ({ revalidatePath: reval }));\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa }));\n    const { deleteCardAction } = await import(\"./cards\");\n    await deleteCardAction(\"CARD_DEL\" as any);\n    expect(reval).not.toHaveBeenCalled();\n  });\n\n  it(\"deleteCardsAction: 空配列なら何もしない\", async () => {\n    const supa: any = { from: vi.fn() };\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa }));\n    const { deleteCardsAction } = await import(\"./cards\");\n    await deleteCardsAction([]);\n    expect(supa.from).not.toHaveBeenCalled();\n  });\n\n  it(\"deleteCardsAction: 一括削除→workspace再検証（最初のレッスンからコース解決）\", async () => {\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table === \"cards\") {\n          return {\n            select: () => ({ in: async () => ({ data: [{ lesson_id: \"LZ\" }], error: null }) }),\n            delete: () => ({ in: async () => ({ error: null }) }),\n          };\n        }\n        if (table === \"lessons\") {\n          return { select: () => ({ eq: () => ({ single: async () => ({ data: { course_id: \"COURSE_Z\" }, error: null }) }) }) };\n        }\n        throw new Error(\"unexpected table: \" + table);\n      }),\n    };\n    const reval = vi.fn();\n    vi.doMock(\"next/cache\", () => ({ revalidatePath: reval }));\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa }));\n    const { deleteCardsAction } = await import(\"./cards\");\n    await deleteCardsAction([\"A\", \"B\"] as any);\n    expect(reval).toHaveBeenCalledWith(`/courses/COURSE_Z/workspace`, \"page\");\n  });\n\n  it(\"reorderCardsAction: 集合不一致ならエラー\", async () => {\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table === \"lessons\") return { select: () => ({ eq: () => ({ single: async () => ({ data: { course_id: \"C1\" }, error: null }) }) }) };\n        if (table === \"cards\") {\n          return { select: () => ({ eq: () => ({ order: async () => ({ data: [{ id: \"X\" }], error: null }) }) }) };\n        }\n        throw new Error(\"unexpected table: \" + table);\n      }),\n    };\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa }));\n    const { reorderCardsAction } = await import(\"./cards\");\n    await expect(reorderCardsAction(\"L1\" as any, [\"X\", \"Y\"] as any)).rejects.toBeInstanceOf(Error);\n  });\n\n  it(\"reorderCardsAction: 正常系は2段階更新→workspace再検証\", async () => {\n    const updates: any[] = [];\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table === \"lessons\") return { select: () => ({ eq: () => ({ single: async () => ({ data: { course_id: \"COURSE_R\" }, error: null }) }) }) };\n        if (table === \"cards\") {\n          return {\n            select: () => ({ eq: () => ({ order: async () => ({ data: [\n              { id: \"A\", order_index: 0 },\n              { id: \"B\", order_index: 1 },\n              { id: \"C\", order_index: 2 },\n            ], error: null }) }) }),\n            update: (payload: any) => ({ eq: (_k: string, v: string) => ({ eq: async () => { updates.push({ id: v, oi: payload.order_index }); return { error: null }; } }) }),\n          };\n        }\n        throw new Error(\"unexpected table: \" + table);\n      }),\n    };\n    const reval = vi.fn();\n    vi.doMock(\"next/cache\", () => ({ revalidatePath: reval }));\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa }));\n    const { reorderCardsAction } = await import(\"./cards\");\n    await reorderCardsAction(\"L1\" as any, [\"C\", \"A\", \"B\"] as any);\n    expect(updates.length).toBe(6); // 3 + 3\n    expect(updates.some((u) => u.oi === 0)).toBe(true);\n    expect(updates.some((u) => u.oi === 1)).toBe(true);\n    expect(updates.some((u) => u.oi === 2)).toBe(true);\n    expect(reval).toHaveBeenCalledWith(`/courses/COURSE_R/workspace`, \"page\");\n  });\n\n  it(\"reorderCardsAction: Phase2で失敗→ロールバックを試みてthrow\", async () => {\n    const updates: any[] = [];\n    let hitPhase2 = false;\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table === \"lessons\") return { select: () => ({ eq: () => ({ single: async () => ({ data: { course_id: \"COURSE_R\" }, error: null }) }) }) };\n        if (table === \"cards\") {\n          return {\n            select: () => ({ eq: () => ({ order: async () => ({ data: [\n              { id: \"A\", order_index: 0 },\n              { id: \"B\", order_index: 1 },\n            ], error: null }) }) }),\n            update: (payload: any) => ({\n              eq: (_k: string, v: string) => ({\n                eq: async () => {\n                  // Phase2 は小さな index(0,1) を設定する更新\n                  if (!hitPhase2 && typeof payload.order_index === \"number\" && payload.order_index < 1_000_000 && v === \"A\") {\n                    hitPhase2 = true;\n                    return { error: Object.assign(new Error(\"phase2 fail\"), { code: \"23514\" }) };\n                  }\n                  updates.push({ id: v, oi: payload.order_index });\n                  return { error: null };\n                },\n              }),\n            }),\n          };\n        }\n        throw new Error(\"unexpected table: \" + table);\n      }),\n    };\n    const reval = vi.fn();\n    vi.doMock(\"next/cache\", () => ({ revalidatePath: reval }));\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa }));\n    const { reorderCardsAction } = await import(\"./cards\");\n    await expect(reorderCardsAction(\"L1\" as any, [\"B\", \"A\"] as any)).rejects.toBeInstanceOf(Error);\n    expect(updates.some((u) => u.oi === 2_000_000)).toBe(true); // ロールバック staging 窓\n    expect(reval).not.toHaveBeenCalled();\n  });\n});\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/server-actions/cards.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/server-actions/courses.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":18,"fix":{"range":[141,144],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[141,144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[141,144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .from on an `any` value.","line":6,"column":8,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":6,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":17,"fix":{"range":[281,284],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[281,284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[281,284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":27,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":27,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":20,"fix":{"range":[1304,1307],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1304,1307],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1304,1307],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":21,"fix":{"range":[1448,1451],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1448,1451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1448,1451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":42,"fix":{"range":[1857,1860],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1857,1860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1857,1860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":20,"fix":{"range":[2101,2104],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2101,2104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2101,2104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":21,"fix":{"range":[2245,2248],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2245,2248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2245,2248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":48,"fix":{"range":[2660,2663],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2660,2663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2660,2663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":20,"fix":{"range":[2887,2890],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2887,2890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2887,2890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":21,"fix":{"range":[3031,3034],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3031,3034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3031,3034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":55,"fix":{"range":[3500,3503],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3500,3503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3500,3503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":11,"source":"/* @vitest-environment node */\nimport { describe, it, expect, vi, beforeEach } from \"vitest\";\n\nfunction mockSupaForCourses() {\n  const supa: any = {};\n  supa.from = vi.fn((table: string) => {\n    if (table !== \"courses\") throw new Error(\"unexpected table: \" + table);\n    const q: any = {\n      insert: vi.fn(() => q),\n      update: vi.fn(() => q),\n      delete: vi.fn(() => q),\n      eq: vi.fn(() => q),\n      select: vi.fn(() => q),\n      single: vi.fn(() => ({ data: { id: \"COURSE_ID\" }, error: null })),\n    };\n    return q;\n  });\n  return supa;\n}\n\ndescribe(\"server-actions/courses\", () => {\n  beforeEach(() => {\n    vi.resetModules();\n  });\n\n  it(\"createCourseAction: insert → revalidatePath('/') を呼ぶ\", async () => {\n    const supa = mockSupaForCourses();\n    const reval = vi.fn();\n    vi.doMock(\"next/cache\", () => ({ revalidatePath: reval }));\n    vi.doMock(\"@/lib/supabase/server\", () => ({\n      createClient: async () => supa,\n      getCurrentUserId: async () => \"uid\",\n    }));\n    const { createCourseAction } = await import(\"./courses\");\n    const res = await createCourseAction({ title: \" T \" });\n    expect(res.courseId).toBe(\"COURSE_ID\");\n    expect(reval).toHaveBeenCalledWith(\"/\");\n  });\n\n  it(\"updateCourseAction: update → '/' と workspace を revalidate\", async () => {\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table !== \"courses\") throw new Error(\"unexpected table: \" + table);\n        const q: any = {\n          update: vi.fn(() => q),\n          eq: vi.fn(() => ({ error: null })),\n        };\n        return q;\n      }),\n    };\n    const reval = vi.fn();\n    vi.doMock(\"next/cache\", () => ({ revalidatePath: reval }));\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa }));\n    const { updateCourseAction } = await import(\"./courses\");\n    await updateCourseAction(\"CID\" as any, { title: \"X\" });\n    expect(reval).toHaveBeenCalledWith(\"/\");\n    expect(reval).toHaveBeenCalledWith(`/courses/CID/workspace`, \"page\");\n  });\n\n  it(\"deleteCourseAction: delete → '/' と workspace を revalidate\", async () => {\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table !== \"courses\") throw new Error(\"unexpected table: \" + table);\n        const q: any = {\n          delete: vi.fn(() => q),\n          eq: vi.fn(() => ({ error: null })),\n        };\n        return q;\n      }),\n    };\n    const reval = vi.fn();\n    vi.doMock(\"next/cache\", () => ({ revalidatePath: reval }));\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa }));\n    const { deleteCourseAction } = await import(\"./courses\");\n    await deleteCourseAction(\"COURSE_ID\" as any);\n    expect(reval).toHaveBeenCalledWith(\"/\");\n    expect(reval).toHaveBeenCalledWith(`/courses/COURSE_ID/workspace`, \"page\");\n  });\n\n  it(\"deleteCourseAction: エラー時は throw し revalidate を呼ばない\", async () => {\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table !== \"courses\") throw new Error(\"unexpected table: \" + table);\n        const q: any = {\n          delete: vi.fn(() => q),\n          eq: vi.fn(() => ({ error: Object.assign(new Error(\"boom\"), { code: \"23503\" }) })),\n        };\n        return q;\n      }),\n    };\n    const reval = vi.fn();\n    vi.doMock(\"next/cache\", () => ({ revalidatePath: reval }));\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa }));\n    const { deleteCourseAction } = await import(\"./courses\");\n    await expect(deleteCourseAction(\"COURSE_ID\" as any)).rejects.toBeInstanceOf(Error);\n    expect(reval).not.toHaveBeenCalled();\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/server-actions/courses.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/server-actions/lessons.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":21,"fix":{"range":[288,291],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[288,291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[288,291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":20,"fix":{"range":[316,319],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[316,319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[316,319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":23,"fix":{"range":[417,420],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[417,420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[417,420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .select on an `any` value.","line":15,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":15,"endColumn":19},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .eq on an `any` value.","line":16,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":16,"endColumn":15},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order on an `any` value.","line":17,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":17,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .limit on an `any` value.","line":18,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":18,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .insert on an `any` value.","line":19,"column":13,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":19,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":41,"fix":{"range":[656,659],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[656,659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[656,659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":20,"column":40,"nodeType":"Property","messageId":"anyAssignment","endLine":20,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":56,"fix":{"range":[1251,1254],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1251,1254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1251,1254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .payload on an `any` value.","line":37,"column":21,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":37,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":20,"fix":{"range":[1577,1580],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1577,1580],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1577,1580],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":21,"fix":{"range":[1721,1724],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1721,1724],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1721,1724],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .select on an `any` value.","line":46,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":46,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .eq on an `any` value.","line":47,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":47,"endColumn":13},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .single on an `any` value.","line":48,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":48,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .delete on an `any` value.","line":49,"column":11,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":49,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":47,"fix":{"range":[2275,2278],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2275,2278],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2275,2278],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":20,"fix":{"range":[2438,2441],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2438,2441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2438,2441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":50,"fix":{"range":[3067,3070],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3067,3070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3067,3070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":71,"fix":{"range":[3088,3091],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3088,3091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3088,3091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":23,"fix":{"range":[3252,3255],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3252,3255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3252,3255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":20,"fix":{"range":[3280,3283],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3280,3283],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3280,3283],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":32,"fix":{"range":[3754,3757],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3754,3757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3754,3757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":49,"fix":{"range":[4319,4322],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4319,4322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4319,4322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":76,"fix":{"range":[4346,4349],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4346,4349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4346,4349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order_index on an `any` value.","line":117,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":117,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order_index on an `any` value.","line":118,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":118,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order_index on an `any` value.","line":119,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":119,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":23,"fix":{"range":[4832,4835],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4832,4835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4832,4835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":20,"fix":{"range":[4885,4888],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4885,4888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4885,4888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":32,"fix":{"range":[5315,5318],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5315,5318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5315,5318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order_index on an `any` value.","line":142,"column":48,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":142,"endColumn":59},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order_index on an `any` value.","line":142,"column":84,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":142,"endColumn":95},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":146,"column":39,"nodeType":"Property","messageId":"anyAssignment","endLine":146,"endColumn":62},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .order_index on an `any` value.","line":146,"column":51,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":146,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":56,"fix":{"range":[6251,6254],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6251,6254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6251,6254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":77,"fix":{"range":[6272,6275],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6272,6275],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6272,6275],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .oi on an `any` value.","line":161,"column":34,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":161,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":21,"source":"/* @vitest-environment node */\nimport { describe, it, expect, vi, beforeEach } from \"vitest\";\n\ndescribe(\"server-actions/lessons\", () => {\n  beforeEach(() => {\n    vi.resetModules();\n  });\n\n  it(\"addLessonAction: 既存最大 order_index+1 を採番して挿入し、workspace を再検証\", async () => {\n    const calls: any[] = [];\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table === \"lessons\") {\n          const q: any = {};\n          q.select = vi.fn(() => q);\n          q.eq = vi.fn(() => q);\n          q.order = vi.fn(() => q);\n          q.limit = vi.fn(async () => ({ data: [{ order_index: 2 }], error: null }));\n          q.insert = vi.fn((payload: any) => {\n            calls.push({ op: \"insert\", payload });\n            return {\n              select: () => ({ single: async () => ({ data: { id: \"LNEW\" }, error: null }) }),\n            };\n          });\n          return q;\n        }\n        throw new Error(\"unexpected table: \" + table);\n      }),\n    };\n    const reval = vi.fn();\n    vi.doMock(\"next/cache\", () => ({ revalidatePath: reval }));\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa }));\n\n    const { addLessonAction } = await import(\"./lessons\");\n    const out = await addLessonAction(\"COURSE_X\" as any, \" Title \");\n    expect(out.lessonId).toBe(\"LNEW\");\n    expect(calls[0].payload).toMatchObject({ course_id: \"COURSE_X\", title: \"Title\", order_index: 3 });\n    expect(reval).toHaveBeenCalledWith(`/courses/COURSE_X/workspace`, \"page\");\n  });\n\n  it(\"deleteLessonAction: 関連 course を取得して削除後に再検証\", async () => {\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table !== \"lessons\") throw new Error(\"unexpected table: \" + table);\n        const q: any = {};\n        q.select = vi.fn(() => q);\n        q.eq = vi.fn(() => q);\n        q.single = vi.fn(async () => ({ data: { course_id: \"COURSE_A\" }, error: null }));\n        q.delete = vi.fn(() => ({ eq: async () => ({ error: null }) }));\n        return q;\n      }),\n    };\n    const reval = vi.fn();\n    vi.doMock(\"next/cache\", () => ({ revalidatePath: reval }));\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa }));\n    const { deleteLessonAction } = await import(\"./lessons\");\n    await deleteLessonAction(\"LESSON_1\" as any);\n    expect(reval).toHaveBeenCalledWith(`/courses/COURSE_A/workspace`, \"page\");\n  });\n\n  it(\"reorderLessonsAction: 集合不一致ならエラー\", async () => {\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table !== \"lessons\") throw new Error(\"unexpected table: \" + table);\n        return {\n          select: () => ({\n            eq: () => ({\n              order: async () => ({ data: [{ id: \"L1\", order_index: 0 }], error: null }),\n            }),\n          }),\n        };\n      }),\n    };\n    const reval = vi.fn();\n    vi.doMock(\"next/cache\", () => ({ revalidatePath: reval }));\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa }));\n    const { reorderLessonsAction } = await import(\"./lessons\");\n    await expect(reorderLessonsAction(\"C1\" as any, [\"L1\", \"L2\"] as any)).rejects.toBeInstanceOf(Error);\n    expect(reval).not.toHaveBeenCalled();\n  });\n\n  it(\"reorderLessonsAction: 正常系は2段階更新して再検証\", async () => {\n    const updates: any[] = [];\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table !== \"lessons\") throw new Error(\"unexpected table: \" + table);\n        const qsel = {\n          select: () => ({\n            eq: () => ({ order: async () => ({ data: [\n              { id: \"L1\", order_index: 0 },\n              { id: \"L2\", order_index: 1 },\n              { id: \"L3\", order_index: 2 },\n            ], error: null }) }),\n          }),\n        };\n        const qupd = {\n          update: (payload: any) => ({\n            eq: (_k: string, _v: string) => ({\n              eq: async () => {\n                updates.push(payload);\n                return { error: null };\n              },\n            }),\n          }),\n        };\n        return { ...qsel, ...qupd };\n      }),\n    };\n    const reval = vi.fn();\n    vi.doMock(\"next/cache\", () => ({ revalidatePath: reval }));\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa }));\n    const { reorderLessonsAction } = await import(\"./lessons\");\n    await reorderLessonsAction(\"COURSE_Z\" as any, [\"L3\", \"L2\", \"L1\"] as any);\n    // Phase1: 3件、Phase2: 3件 で計6回 order_index を更新\n    expect(updates.length).toBe(6);\n    // 最終的に 0,1,2 が含まれる\n    expect(updates.some((u) => u.order_index === 0)).toBe(true);\n    expect(updates.some((u) => u.order_index === 1)).toBe(true);\n    expect(updates.some((u) => u.order_index === 2)).toBe(true);\n    expect(reval).toHaveBeenCalledWith(`/courses/COURSE_Z/workspace`, \"page\");\n  });\n\n  it(\"reorderLessonsAction: 途中失敗でロールバックを試み、最終的に throw\", async () => {\n    const updates: any[] = [];\n    let failOnce = true;\n    const supa: any = {\n      from: vi.fn((table: string) => {\n        if (table !== \"lessons\") throw new Error(\"unexpected table: \" + table);\n        const qsel = {\n          select: () => ({\n            eq: () => ({ order: async () => ({ data: [\n              { id: \"L1\", order_index: 0 },\n              { id: \"L2\", order_index: 1 },\n            ], error: null }) }),\n          }),\n        };\n        const qupd = {\n          update: (payload: any) => ({\n            eq: (_k: string, v: string) => ({\n              eq: async () => {\n                // Phase1中にL2でエラーを発生させる（provisionalは1000000以上）\n                if (failOnce && typeof payload.order_index === \"number\" && payload.order_index >= 1_000_000 && v === \"L2\") {\n                  failOnce = false;\n                  return { error: Object.assign(new Error(\"phase1 fail\"), { code: \"23505\" }) };\n                }\n                updates.push({ id: v, oi: payload.order_index });\n                return { error: null };\n              },\n            }),\n          }),\n        };\n        return { ...qsel, ...qupd };\n      }),\n    };\n    const reval = vi.fn();\n    vi.doMock(\"next/cache\", () => ({ revalidatePath: reval }));\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa }));\n    const { reorderLessonsAction } = await import(\"./lessons\");\n    await expect(reorderLessonsAction(\"COURSE_Z\" as any, [\"L2\", \"L1\"] as any)).rejects.toBeInstanceOf(Error);\n    // ロールバックで original(0,1) に戻す試みが行われる想定\n    expect(updates.some((u) => u.oi === 2_000_000)).toBe(true);\n    expect(reval).not.toHaveBeenCalled();\n  });\n});\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/server-actions/lessons.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/server-actions/progress.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":24,"fix":{"range":[267,270],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[267,270],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[267,270],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":20,"fix":{"range":[295,298],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[295,298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[295,298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":76,"fix":{"range":[351,354],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[351,354],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[351,354],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":11,"column":102,"nodeType":"Property","messageId":"anyAssignment","endLine":11,"endColumn":109},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":14,"column":32,"nodeType":"Property","messageId":"anyAssignment","endLine":14,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":51,"fix":{"range":[659,662],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[659,662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[659,662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .t on an `any` value.","line":15,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":15,"endColumn":25},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .payload on an `any` value.","line":16,"column":24,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":16,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":22,"column":39,"nodeType":"Property","messageId":"anyAssignment","endLine":22,"endColumn":58},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":58,"fix":{"range":[1206,1209],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1206,1209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1206,1209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":24,"fix":{"range":[1438,1441],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1438,1441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1438,1441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":20,"fix":{"range":[1466,1469],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1466,1469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1466,1469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":34,"fix":{"range":[1727,1730],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1727,1730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1727,1730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":52,"fix":{"range":[2104,2107],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2104,2107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2104,2107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":19,"fix":{"range":[2644,2647],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2644,2647],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2644,2647],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":20,"fix":{"range":[2672,2675],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2672,2675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2672,2675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":30,"fix":{"range":[2880,2883],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2880,2883],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2880,2883],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":49,"fix":{"range":[3176,3179],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3176,3179],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3176,3179],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":49,"fix":{"range":[3288,3291],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3288,3291],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3288,3291],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":49,"fix":{"range":[3408,3411],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3408,3411],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3408,3411],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":20,"fix":{"range":[3659,3662],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3659,3662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3659,3662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":49,"fix":{"range":[4323,4326],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4323,4326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4323,4326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":49,"fix":{"range":[4417,4420],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4417,4420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4417,4420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":24,"fix":{"range":[4526,4529],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4526,4529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4526,4529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":20,"fix":{"range":[4554,4557],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4554,4557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4554,4557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":76,"fix":{"range":[4610,4613],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4610,4613],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4610,4613],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":39,"fix":{"range":[4890,4893],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4890,4893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4890,4893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":22,"source":"/* @vitest-environment node */\nimport { describe, it, expect, vi, beforeEach } from \"vitest\";\n\ndescribe(\"server-actions/progress\", () => {\n  beforeEach(() => {\n    vi.resetModules();\n  });\n\n  it(\"saveProgressAction: 認証必須、upsertで保存\", async () => {\n    const captured: any[] = [];\n    const supa: any = { from: vi.fn((t: string) => ({ upsert: (payload: any) => { captured.push({ t, payload }); return { error: null }; } })) };\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa, getCurrentUserId: async () => \"user-1\" }));\n    const { saveProgressAction } = await import(\"./progress\");\n    await saveProgressAction({ cardId: \"C1\" as any, completed: true, completedAt: undefined, answer: undefined });\n    expect(captured[0].t).toBe(\"progress\");\n    expect(captured[0].payload).toMatchObject({ user_id: \"user-1\", card_id: \"C1\", completed: true, completed_at: null, answer: null });\n  });\n\n  it(\"saveProgressAction: 未認証はエラー\", async () => {\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => ({}), getCurrentUserId: async () => undefined }));\n    const { saveProgressAction } = await import(\"./progress\");\n    await expect(saveProgressAction({ cardId: \"C1\" as any, completed: false })).rejects.toThrow(/Not authenticated/);\n  });\n\n  it(\"rateSrsAction: again → ease減/interval=0/当日0時のdue、upsertされる\", async () => {\n    vi.setSystemTime(new Date(\"2025-09-03T10:00:00.000Z\"));\n    const captured: any[] = [];\n    const supa: any = {\n      from: vi.fn((t: string) => {\n        if (t === \"srs\") {\n          return {\n            select: () => ({ eq: () => ({ eq: () => ({ maybeSingle: async () => ({ data: { ease: 2.5, interval: 5 }, error: null }) }) }) }),\n            upsert: (payload: any) => { captured.push(payload); return { error: null }; },\n          };\n        }\n        throw new Error(\"unexpected table: \" + t);\n      }),\n    };\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa, getCurrentUserId: async () => \"U\" }));\n    const { rateSrsAction } = await import(\"./progress\");\n    const out = await rateSrsAction(\"CARD_A\" as any, \"again\");\n    expect(out.interval).toBe(0);\n    expect(out.ease).toBeCloseTo(2.3, 5);\n    const expectedDay = (() => { const d = new Date(\"2025-09-03T10:00:00.000Z\"); d.setHours(0,0,0,0); return d.toISOString().slice(0,10); })();\n    expect(out.due.slice(0,10)).toBe(expectedDay);\n    expect(captured[0]).toMatchObject({ user_id: \"U\", card_id: \"CARD_A\", due: expectedDay, last_rating: \"again\" });\n  });\n\n  it(\"rateSrsAction: hard/good/easy の分岐\", async () => {\n    vi.setSystemTime(new Date(\"2025-09-03T00:00:00.000Z\"));\n    const ups: any[] = [];\n    const supa: any = {\n      from: vi.fn((t: string) => ({\n        select: () => ({ eq: () => ({ eq: () => ({ maybeSingle: async () => ({ data: { ease: 2.5, interval: 5 }, error: null }) }) }) }),\n        upsert: (payload: any) => { ups.push(payload); return { error: null }; },\n      })),\n    };\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa, getCurrentUserId: async () => \"U\" }));\n    const { rateSrsAction } = await import(\"./progress\");\n    const hard = await rateSrsAction(\"C1\" as any, \"hard\");\n    expect(hard.interval).toBeGreaterThanOrEqual(1);\n    const good = await rateSrsAction(\"C1\" as any, \"good\");\n    expect(good.interval).toBeGreaterThan(5); // おおむね * ease\n    const easy = await rateSrsAction(\"C1\" as any, \"easy\");\n    expect(easy.interval).toBeGreaterThan(good.interval - 1); // だいたい *1.3\n    expect(ups.length).toBe(3); // 3回upsert\n  });\n\n  it(\"toggleFlagAction: 行が無ければinsert→true、あればdelete→false\", async () => {\n    let has = false;\n    const supa: any = {\n      from: vi.fn((t: string) => {\n        if (t !== \"flags\") throw new Error(\"unexpected table: \" + t);\n        return {\n          select: () => ({ eq: () => ({ eq: () => ({ maybeSingle: async () => ({ data: has ? { user_id: \"U\", card_id: \"C\" } : null, error: null }) }) }) }),\n          insert: () => ({ error: null }),\n          delete: () => ({ eq: () => ({ eq: async () => ({ error: null }) }) }),\n        };\n      }),\n    };\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa, getCurrentUserId: async () => \"U\" }));\n    const { toggleFlagAction } = await import(\"./progress\");\n    const t1 = await toggleFlagAction(\"C\" as any);\n    expect(t1).toBe(true);\n    has = true;\n    const t2 = await toggleFlagAction(\"C\" as any);\n    expect(t2).toBe(false);\n  });\n\n  it(\"saveNoteAction: upsertで保存\", async () => {\n    const captured: any[] = [];\n    const supa: any = { from: vi.fn((t: string) => ({ upsert: (payload: any) => { captured.push(payload); return { error: null }; } })) };\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supa, getCurrentUserId: async () => \"U\" }));\n    const { saveNoteAction } = await import(\"./progress\");\n    await saveNoteAction(\"CARD\" as any, \"text\");\n    expect(captured[0]).toMatchObject({ user_id: \"U\", card_id: \"CARD\", text: \"text\" });\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/server-actions/progress.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/tests/msw.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":6,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":6,"endColumn":65},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":63,"fix":{"range":[186,189],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[186,189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[186,189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .op on an `any` value.","line":7,"column":17,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":7,"endColumn":19}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import { http, HttpResponse } from \"msw\";\n\nexport const handlers = [\n  http.post(\"/api/db\", async ({ request }) => {\n    try {\n      const body = await request.json().catch(() => ({} as any));\n      if (body?.op === \"listCourses\") {\n        // /api/db の実装に合わせて素の配列を返す\n        return HttpResponse.json([{ id: \"c1\", title: \"Course\" }]);\n      }\n      return new HttpResponse(\"bad request\", { status: 400 });\n    } catch {\n      return new HttpResponse(\"bad request\", { status: 400 });\n    }\n  }),\n  http.post(\"/api/ai/outline\", async () => {\n    return HttpResponse.json({ plan: { course: { title: \"MSW\" }, lessons: [{ title: \"L1\" }, { title: \"L2\" }] } });\n  }),\n  http.post(\"/api/ai/lesson-cards\", async () => {\n    return HttpResponse.json({ payload: { items: [] } });\n  }),\n];\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/tests/server/db.queries.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":47,"fix":{"range":[439,442],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[439,442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[439,442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":21,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":21,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of a(n) `any` typed value.","line":22,"column":14,"nodeType":"Identifier","messageId":"unsafeCall","endLine":22,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":69,"fix":{"range":[1095,1098],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1095,1098],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1095,1098],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":69,"fix":{"range":[1695,1698],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1695,1698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1695,1698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":69,"fix":{"range":[2360,2363],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2360,2363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2360,2363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":69,"fix":{"range":[2901,2904],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2901,2904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2901,2904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":34,"fix":{"range":[3138,3141],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3138,3141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3138,3141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":30,"fix":{"range":[3228,3231],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3228,3231],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3228,3231],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":130,"column":11,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":130,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":135,"column":19,"nodeType":"Property","messageId":"anyAssignment","endLine":135,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .card_id on an `any` value.","line":135,"column":36,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":135,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":136,"column":19,"nodeType":"Property","messageId":"anyAssignment","endLine":136,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .ease on an `any` value.","line":136,"column":33,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":136,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":137,"column":19,"nodeType":"Property","messageId":"anyAssignment","endLine":137,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .interval on an `any` value.","line":137,"column":37,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":137,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":138,"column":19,"nodeType":"Property","messageId":"anyAssignment","endLine":138,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":1,"message":"Unsafe member access .due on an `any` value.","line":138,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":138,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":69,"fix":{"range":[3799,3802],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3799,3802],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3799,3802],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":195,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":195,"endColumn":69,"fix":{"range":[5018,5021],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5018,5021],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5018,5021],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":9,"source":"import { describe, it, expect, vi, beforeEach } from \"vitest\";\n\n// supabase/server を丸ごとモック（hoist安全）\nvi.mock(\"@/lib/supabase/server\", () => {\n  return {\n    createClient: vi.fn(),\n    getCurrentUserId: vi.fn(),\n  };\n});\n\n// SUT をモックの後にimport\nimport { listFlaggedByCourse, getProgress, upsertSrs } from \"@/lib/db/queries\";\nimport * as supaServer from \"@/lib/supabase/server\";\n\ntype UUID = string;\n\nfunction makeSupaMock(impl: Record<string, any>) {\n  return {\n    from(table: string) {\n      if (!(table in impl)) throw new Error(`No mock for table: ${table}`);\n      const handler = impl[table];\n      return handler();\n    },\n  } as const;\n}\n\nbeforeEach(() => {\n  vi.resetAllMocks();\n});\n\ndescribe(\"listFlaggedByCourse\", () => {\n  it(\"指定コースに紐づくフラグの card_id 配列を返す\", async () => {\n    const rows = [\n      { card_id: \"card-1\" },\n      { card_id: \"card-2\" },\n    ];\n    const supa = makeSupaMock({\n      flags: () => ({\n        select: () => ({\n          eq: async () => ({ data: rows, error: null }),\n        }),\n      }),\n    });\n\n    vi.mocked(supaServer.createClient).mockResolvedValue(supa as any);\n\n    const out = await listFlaggedByCourse(\"course-1\");\n    expect(out).toEqual([\"card-1\", \"card-2\"]);\n  });\n});\n\ndescribe(\"getProgress\", () => {\n  it(\"null を undefined に正規化して返す\", async () => {\n    const row = {\n      card_id: \"card-x\",\n      completed: true,\n      completed_at: null,\n      answer: null,\n    };\n    const supa = makeSupaMock({\n      progress: () => ({\n        select: () => ({\n          eq: () => ({\n            maybeSingle: async () => ({ data: row, error: null }),\n          }),\n        }),\n      }),\n    });\n    vi.mocked(supaServer.createClient).mockResolvedValue(supa as any);\n\n    const out = await getProgress(\"card-x\");\n    expect(out).toEqual({\n      cardId: \"card-x\",\n      completed: true,\n      completedAt: undefined,\n      answer: undefined,\n    });\n  });\n\n  it(\"値がある場合はそのままマップする\", async () => {\n    const row = {\n      card_id: \"card-y\",\n      completed: false,\n      completed_at: \"2025-09-01T00:00:00.000Z\",\n      answer: { ok: true },\n    };\n    const supa = makeSupaMock({\n      progress: () => ({\n        select: () => ({\n          eq: () => ({\n            maybeSingle: async () => ({ data: row, error: null }),\n          }),\n        }),\n      }),\n    });\n    vi.mocked(supaServer.createClient).mockResolvedValue(supa as any);\n\n    const out = await getProgress(\"card-y\");\n    expect(out).toEqual({\n      cardId: \"card-y\",\n      completed: false,\n      completedAt: \"2025-09-01T00:00:00.000Z\",\n      answer: { ok: true },\n    });\n  });\n\n  it(\"行が存在しない場合は undefined\", async () => {\n    const supa = makeSupaMock({\n      progress: () => ({\n        select: () => ({\n          eq: () => ({\n            maybeSingle: async () => ({ data: null, error: null }),\n          }),\n        }),\n      }),\n    });\n    vi.mocked(supaServer.createClient).mockResolvedValue(supa as any);\n\n    const out = await getProgress(\"card-z\");\n    expect(out).toBeUndefined();\n  });\n});\n\ndescribe(\"upsertSrs\", () => {\n  it(\"正常系: dueをYYYY-MM-DDにして送信し、ISOで返す。lastRatingはnull→undefined\", async () => {\n    const captured: { value?: any } = {};\n    const supa = makeSupaMock({\n      srs: () => ({\n        upsert: (payload: any) => {\n          captured.value = payload;\n          return {\n            select: () => ({\n              maybeSingle: async () => ({\n                data: {\n                  card_id: payload.card_id,\n                  ease: payload.ease,\n                  interval: payload.interval,\n                  due: payload.due, // サーバーからは日付文字列が返る想定\n                  last_rating: null,\n                },\n                error: null,\n              }),\n            }),\n          };\n        },\n      }),\n    });\n    vi.mocked(supaServer.createClient).mockResolvedValue(supa as any);\n    vi.mocked(supaServer.getCurrentUserId).mockResolvedValue(\"user-1\");\n\n    const input = {\n      cardId: \"card-123\" as UUID,\n      ease: 2.5,\n      interval: 5,\n      due: \"2025-09-03T12:34:56.789Z\",\n      lastRating: undefined,\n    } as const;\n\n    const out = await upsertSrs(input);\n\n    // アップサート時は日付だけに丸めて送信\n    expect(captured.value).toMatchObject({\n      user_id: \"user-1\",\n      card_id: \"card-123\",\n      due: \"2025-09-03\",\n    });\n\n    // 返り値はISO。タイムゾーン差異を避けるため先頭一致を確認\n    expect(out).toMatchObject({\n      cardId: \"card-123\",\n      ease: 2.5,\n      interval: 5,\n      lastRating: undefined,\n    });\n    expect(out.due.startsWith(\"2025-09-03\")).toBe(true);\n  });\n\n  it(\"エラー系: PostgrestError をそのまま透過してthrowする\", async () => {\n    const pgErr = Object.assign(new Error(\"duplicate key value\"), {\n      name: \"PostgrestError\",\n      code: \"23505\",\n      details: \"Key (id)=(...) already exists.\",\n      hint: null,\n    });\n\n    const supa = makeSupaMock({\n      srs: () => ({\n        upsert: () => ({\n          select: () => ({\n            maybeSingle: async () => ({ data: null, error: pgErr }),\n          }),\n        }),\n      }),\n    });\n    vi.mocked(supaServer.createClient).mockResolvedValue(supa as any);\n    vi.mocked(supaServer.getCurrentUserId).mockResolvedValue(\"user-2\");\n\n    await expect(\n      upsertSrs({ cardId: \"c\", ease: 2, interval: 1, due: \"2025-09-03\" })\n    ).rejects.toBe(pgErr); // 参照透過\n  });\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/tests/server/db.reads.more.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":32,"fix":{"range":[123,126],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[123,126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[123,126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":44,"fix":{"range":[135,138],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[135,138],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[135,138],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":31,"fix":{"range":[169,172],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[169,172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[169,172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":1,"message":"Unsafe call of a(n) `any` typed value.","line":5,"column":36,"nodeType":"Identifier","messageId":"unsafeCall","endLine":5,"endColumn":43},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":5,"column":46,"nodeType":"Property","messageId":"anyAssignment","endLine":5,"endColumn":50},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":5,"column":52,"nodeType":"Property","messageId":"anyAssignment","endLine":5,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":69,"fix":{"range":[207,210],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[207,210],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[207,210],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":11,"fix":{"range":[389,392],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[389,392],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[389,392],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":38,"fix":{"range":[431,434],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[431,434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[431,434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":50,"fix":{"range":[443,446],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[443,446],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[443,446],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":23,"column":33,"nodeType":"Property","messageId":"anyAssignment","endLine":23,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":23,"column":39,"nodeType":"Property","messageId":"anyAssignment","endLine":23,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":11,"fix":{"range":[626,629],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[626,629],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[626,629],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":46,"fix":{"range":[676,679],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[676,679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[676,679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":67,"fix":{"range":[697,700],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[697,700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[697,700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":8,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":11,"fix":{"range":[923,926],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[923,926],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[923,926],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":78,"fix":{"range":[1656,1659],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1656,1659],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1656,1659],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":48,"fix":{"range":[2010,2013],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2010,2013],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2010,2013],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":46,"fix":{"range":[2287,2290],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2287,2290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2287,2290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":45,"fix":{"range":[2676,2679],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2676,2679],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2676,2679],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":15,"source":"/* @vitest-environment node */\nimport { describe, it, expect, vi, beforeEach } from \"vitest\";\n\nfunction makeThenable(data: any, error: any) {\n  return { then: (resolve: any) => resolve({ data, error }) } as any;\n}\n\nfunction supaForListCoursesNull() {\n  return {\n    from: (table: string) => ({\n      select: () => ({\n        order: () => makeThenable(null, null),\n      }),\n    }),\n  } as any;\n}\n\nfunction supaForMaybeSingle(data: any, error: any = null) {\n  return {\n    from: (_t: string) => ({\n      select: () => ({\n        eq: () => ({\n          maybeSingle: () => ({ data, error }),\n        }),\n      }),\n    }),\n  } as any;\n}\n\nfunction supaForList(table: string, rows: any[] | null, error: any = null) {\n  return {\n    from: (t: string) => ({\n      select: () => ({\n        eq: () => ({ order: () => ({ order: () => makeThenable(t === table ? rows : null, t === table ? error : null) }) }),\n      }),\n    }),\n  } as any;\n}\n\nbeforeEach(() => {\n  vi.resetModules();\n});\n\ndescribe(\"db/queries reads (extra)\", () => {\n  it(\"listCourses: null -> []\", async () => {\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supaForListCoursesNull() }));\n    const { listCourses } = await import(\"@/lib/db/queries\");\n    const rows = await listCourses();\n    expect(Array.isArray(rows)).toBe(true);\n    expect(rows.length).toBe(0);\n  });\n\n  it(\"getCourse: maybeSingle null -> undefined\", async () => {\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supaForMaybeSingle(null) }));\n    const { getCourse } = await import(\"@/lib/db/queries\");\n    const row = await getCourse(\"00000000-0000-0000-0000-000000000001\" as any);\n    expect(row).toBeUndefined();\n  });\n\n  it(\"listLessons/listCards: null -> [] and error passthrough\", async () => {\n    // null -> [] for lessons\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supaForList(\"lessons\", null) }));\n    let mod = await import(\"@/lib/db/queries\");\n    const l = await mod.listLessons(\"c1\" as any);\n    expect(l).toEqual([]);\n\n    // null -> [] for cards\n    vi.resetModules();\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supaForList(\"cards\", null) }));\n    mod = await import(\"@/lib/db/queries\");\n    const c = await mod.listCards(\"l1\" as any);\n    expect(c).toEqual([]);\n\n    // error passthrough for lessons\n    const pgErr = Object.assign(new Error(\"boom\"), { name: \"PostgrestError\", code: \"XX000\" });\n    vi.resetModules();\n    vi.doMock(\"@/lib/supabase/server\", () => ({ createClient: async () => supaForList(\"lessons\", null, pgErr) }));\n    mod = await import(\"@/lib/db/queries\");\n    await expect(mod.listLessons(\"c1\" as any)).rejects.toBe(pgErr);\n  });\n});\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/tests/setup.client.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":25,"fix":{"range":[1449,1452],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1449,1452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1449,1452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":47,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":47,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":48,"column":43,"nodeType":"Property","messageId":"anyAssignment","endLine":48,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":48,"column":48,"nodeType":"Property","messageId":"anyAssignment","endLine":48,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import \"@testing-library/jest-dom/vitest\";\nimport { afterAll, afterEach, beforeAll, vi } from \"vitest\";\nimport { cleanup } from \"@testing-library/react\";\nimport \"fake-indexeddb/auto\";\nimport * as React from \"react\";\nimport { setupServer } from \"msw/node\";\nimport { handlers } from \"./msw\";\n\n// MSW: API モックサーバ（jsdomでもnodeサーバを利用）\nconst server = setupServer(...handlers);\nbeforeAll(() => server.listen());\nafterEach(() => server.resetHandlers());\nafterAll(() => server.close());\n\n// 各テスト後の後始末\nafterEach(() => {\n  cleanup();\n  try { localStorage.clear(); } catch {}\n  vi.useRealTimers();\n});\n\n// jsdomでも localStorage が未定義なケースの保険\nconst hasLocalStorage = (obj: unknown): obj is { localStorage: Storage } => {\n  return typeof obj === \"object\" && obj !== null && \"localStorage\" in obj;\n};\nif (!hasLocalStorage(globalThis) || !globalThis.localStorage) {\n  const store = new Map<string, string>();\n  const mockStorage: Storage = {\n    getItem: (k) => (store.has(k) ? store.get(k) ?? null : null),\n    setItem: (k, v) => { store.set(k, String(v)); },\n    removeItem: (k) => { store.delete(k); },\n    clear: () => { store.clear(); },\n    key: (i) => Array.from(store.keys())[i] ?? null,\n    get length() { return store.size; },\n  };\n  Object.defineProperty(globalThis, \"localStorage\", {\n    value: mockStorage,\n    writable: true,\n    configurable: true,\n  });\n}\n\n// next/image を img にスタブ（テストを軽量化）\nvi.mock(\"next/image\", () => {\n  return {\n    default: (props: any) => {\n      const { src, alt, ...rest } = props || {};\n      return React.createElement(\"img\", { src, alt, ...rest });\n    },\n  };\n});\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/tests/setup.server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/tests/setup.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":25,"fix":{"range":[1654,1657],"text":"unknown"},"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1654,1657],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1654,1657],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":60,"column":13,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":60,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":61,"column":43,"nodeType":"Property","messageId":"anyAssignment","endLine":61,"endColumn":46},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":1,"message":"Unsafe assignment of an `any` value.","line":61,"column":48,"nodeType":"Property","messageId":"anyAssignment","endLine":61,"endColumn":51}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import \"@testing-library/jest-dom/vitest\";\nimport { afterAll, afterEach, beforeAll, vi } from \"vitest\";\nimport { cleanup } from \"@testing-library/react\";\nimport \"fake-indexeddb/auto\";\nimport * as React from \"react\";\nimport { setupServer } from \"msw/node\";\nimport { handlers } from \"./msw\";\n\n// MSW: API モックサーバを起動\nconst server = setupServer(...handlers);\nbeforeAll(() => server.listen());\nafterEach(() => server.resetHandlers());\nafterAll(() => server.close());\n\n// Reset DOM and mocks after each test\nafterEach(() => {\n  cleanup();\n  try { localStorage.clear(); } catch {}\n  vi.useRealTimers();\n});\n\n// Provide a minimal localStorage in jsdom/node if absent\nconst hasLocalStorage = (obj: unknown): obj is { localStorage: Storage } => {\n  return typeof obj === \"object\" && obj !== null && \"localStorage\" in obj;\n};\n\nif (!hasLocalStorage(globalThis) || !globalThis.localStorage) {\n  const store = new Map<string, string>();\n  \n  // Define the mock storage object with proper typing\n  const mockStorage: Storage = {\n    getItem: (k: string) => (store.has(k) ? store.get(k) ?? null : null),\n    setItem: (k: string, v: string) => {\n      store.set(k, String(v));\n    },\n    removeItem: (k: string) => {\n      store.delete(k);\n    },\n    clear: () => {\n      store.clear();\n    },\n    key: (i: number) => Array.from(store.keys())[i] ?? null,\n    get length() {\n      return store.size;\n    },\n  };\n\n  // Safely assign to globalThis\n  Object.defineProperty(globalThis, \"localStorage\", {\n    value: mockStorage,\n    writable: true,\n    configurable: true,\n  });\n}\n\n// next/image を img にスタブ（テストを軽量化）\nvi.mock(\"next/image\", () => {\n  return {\n    default: (props: any) => {\n      const { src, alt, ...rest } = props || {};\n      return React.createElement(\"img\", { src, alt, ...rest });\n    },\n  };\n});\n","usedDeprecatedRules":[]}]