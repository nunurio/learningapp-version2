[{"filePath":"/Users/takahashigenki/projects/learningapp-version2/eslint.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/next.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/postcss.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/api/ai/lesson-cards/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[877,880],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[877,880],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2212,2215],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2212,2215],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest } from \"next/server\";\nimport { generateLessonCards } from \"@/lib/ai/mock\";\nimport type { LessonCards } from \"@/lib/types\";\n\nexport const runtime = \"nodejs\";\nexport const dynamic = \"force-dynamic\";\n\ntype Update = { event: \"update\" | \"done\" | \"error\"; data?: unknown };\n\nfunction sseEncode(msg: Update) {\n  const lines = [`event: ${msg.event}`];\n  if (msg.data !== undefined) lines.push(`data: ${JSON.stringify(msg.data)}`);\n  // SSE requires a blank line between events -> terminate with \\n\\n\n  return lines.join(\"\\n\") + \"\\n\\n\";\n}\n\n// 生成処理は lib/ai/mock に集約\n\nexport async function POST(req: NextRequest) {\n  // 入力の堅牢化: JSON が空/壊れていても動くようにフォールバック\n  let lessonTitle: string | undefined;\n  let desiredCount: number | undefined;\n  try {\n    if (req.headers.get(\"content-type\")?.includes(\"application/json\")) {\n      const j = await req.json().catch(() => ({} as any));\n      lessonTitle = j?.lessonTitle ?? undefined;\n      desiredCount = typeof j?.desiredCount === \"number\" ? j.desiredCount : undefined;\n    }\n  } catch {}\n  try {\n    const url = new URL(req.url);\n    lessonTitle = lessonTitle ?? url.searchParams.get(\"lessonTitle\") ?? undefined;\n    const dc = url.searchParams.get(\"desiredCount\");\n    if (dc != null) desiredCount = Number(dc);\n  } catch {}\n  if (!lessonTitle || typeof lessonTitle !== \"string\") lessonTitle = \"レッスン\";\n\n  const stream = new ReadableStream<Uint8Array>({\n    async start(controller) {\n      const enc = new TextEncoder();\n      const send = (msg: Update) => controller.enqueue(enc.encode(sseEncode(msg)));\n\n      send({ event: \"update\", data: { status: \"received\" } });\n      try {\n        const steps = [\n          { node: \"expandContext\" },\n          { node: \"generateCards\" },\n          { node: \"validateSchema\" },\n          { node: \"persistPreview\" },\n        ];\n\n        for (const s of steps) {\n          await new Promise((r) => setTimeout(r, 250));\n          send({ event: \"update\", data: s });\n        }\n\n        const payload: LessonCards = generateLessonCards({ lessonTitle, desiredCount });\n        await new Promise((r) => setTimeout(r, 200));\n        send({ event: \"done\", data: { payload, draftId: \"local-client-will-save\" } });\n      } catch (e: any) {\n        send({ event: \"error\", data: { message: e?.message ?? \"unknown\" } });\n      } finally {\n        controller.close();\n      }\n    },\n  });\n\n  return new Response(stream, {\n    headers: {\n      \"Content-Type\": \"text/event-stream; charset=utf-8\",\n      \"Cache-Control\": \"no-cache, no-transform\",\n      Connection: \"keep-alive\",\n    },\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/api/ai/outline/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[859,862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[859,862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2321,2324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2321,2324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest } from \"next/server\";\nimport { generateCoursePlan } from \"@/lib/ai/mock\";\n\nexport const runtime = \"nodejs\";\nexport const dynamic = \"force-dynamic\";\n\ntype Update = { event: \"update\" | \"done\" | \"error\"; data?: unknown };\n\nfunction sseEncode(msg: Update) {\n  const lines = [`event: ${msg.event}`];\n  if (msg.data !== undefined) lines.push(`data: ${JSON.stringify(msg.data)}`);\n  // SSE requires one blank line between events\n  return lines.join(\"\\n\") + \"\\n\\n\";\n}\n\n// 生成処理は lib/ai/mock に集約\n\nexport async function POST(req: NextRequest) {\n  // 入力の堅牢化（JSONが空/壊れていてもフォールバック）\n  let theme: string | undefined;\n  let level: string | undefined;\n  let goal: string | undefined;\n  let lessonCount: number | undefined;\n  try {\n    if (req.headers.get(\"content-type\")?.includes(\"application/json\")) {\n      const j = await req.json().catch(() => ({} as any));\n      theme = j?.theme ?? undefined;\n      level = j?.level ?? undefined;\n      goal = j?.goal ?? undefined;\n      lessonCount = typeof j?.lessonCount === \"number\" ? j.lessonCount : undefined;\n    }\n  } catch {}\n  try {\n    const url = new URL(req.url);\n    theme = theme ?? url.searchParams.get(\"theme\") ?? undefined;\n    level = level ?? url.searchParams.get(\"level\") ?? undefined;\n    goal = goal ?? url.searchParams.get(\"goal\") ?? undefined;\n    const lc = url.searchParams.get(\"lessonCount\");\n    if (lc != null) lessonCount = Number(lc);\n  } catch {}\n  if (!theme || typeof theme !== \"string\") theme = \"コース\";\n\n  const stream = new ReadableStream<Uint8Array>({\n    async start(controller) {\n      const enc = new TextEncoder();\n      const send = (msg: Update) => controller.enqueue(enc.encode(sseEncode(msg)));\n\n      send({ event: \"update\", data: { status: \"received\" } });\n      try {\n        const steps = [\n          { node: \"normalizeInput\" },\n          { node: \"planCourse\" },\n          { node: \"validatePlan\" },\n          { node: \"persistPreview\" },\n        ];\n\n        for (const s of steps) {\n          await new Promise((r) => setTimeout(r, 300));\n          send({ event: \"update\", data: s });\n        }\n\n        const plan = generateCoursePlan({ theme, level, goal, lessonCount });\n        await new Promise((r) => setTimeout(r, 200));\n        send({ event: \"done\", data: { plan, draftId: \"local-client-will-save\" } });\n      } catch (e: any) {\n        send({ event: \"error\", data: { message: e?.message ?? \"unknown\" } });\n      } finally {\n        controller.close();\n      }\n    },\n  });\n\n  return new Response(stream, {\n    headers: {\n      \"Content-Type\": \"text/event-stream; charset=utf-8\",\n      \"Cache-Control\": \"no-cache, no-transform\",\n      Connection: \"keep-alive\",\n    },\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/api/db/route.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3292,3295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3292,3295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4770,4773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4770,4773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":179,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":179,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8245,8248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8245,8248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from \"next/server\";\nimport { z } from \"zod\";\nimport type { UUID } from \"@/lib/types\";\nimport * as Q from \"@/lib/db/queries\";\nimport { createCourseAction, deleteCourseAction, updateCourseAction } from \"@/server-actions/courses\";\nimport { addLessonAction, deleteLessonAction, reorderLessonsAction } from \"@/server-actions/lessons\";\nimport { addCardAction, deleteCardAction, deleteCardsAction, reorderCardsAction, updateCardAction } from \"@/server-actions/cards\";\nimport { saveProgressAction, rateSrsAction, toggleFlagAction, saveNoteAction } from \"@/server-actions/progress\";\nimport { saveDraftAction, commitCoursePlanAction, commitCoursePlanPartialAction, commitLessonCardsAction, commitLessonCardsPartialAction } from \"@/server-actions/ai\";\n\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n    const op = String(body?.op || \"\");\n    const p = body?.params ?? {};\n    switch (op) {\n      case \"snapshot\": {\n        const data = await Q.snapshot();\n        return NextResponse.json(data);\n      }\n      // ----- Reads -----\n      case \"listCourses\": {\n        const data = await Q.listCourses();\n        return NextResponse.json(data);\n      }\n      case \"getCourse\": {\n        const { courseId } = z.object({ courseId: z.string().uuid() }).parse(p);\n        const data = await Q.getCourse(courseId);\n        return NextResponse.json(data ?? null);\n      }\n      case \"listLessons\": {\n        const { courseId } = z.object({ courseId: z.string().uuid() }).parse(p);\n        const data = await Q.listLessons(courseId);\n        return NextResponse.json(data);\n      }\n      case \"listCards\": {\n        const { lessonId } = z.object({ lessonId: z.string().uuid() }).parse(p);\n        const data = await Q.listCards(lessonId);\n        return NextResponse.json(data);\n      }\n      case \"getProgress\": {\n        const { cardId } = z.object({ cardId: z.string().uuid() }).parse(p);\n        const data = await Q.getProgress(cardId);\n        return NextResponse.json(data ?? null);\n      }\n      case \"listFlaggedByCourse\": {\n        const { courseId } = z.object({ courseId: z.string().uuid() }).parse(p);\n        const ids = await Q.listFlaggedByCourse(courseId);\n        return NextResponse.json(ids);\n      }\n      case \"getNote\": {\n        const { cardId } = z.object({ cardId: z.string().uuid() }).parse(p);\n        const text = await Q.getNote(cardId);\n        return NextResponse.json(text ?? null);\n      }\n      // ----- Writes (Server Actions under the hood) -----\n      case \"createCourse\": {\n        const { title, description, category } = z\n          .object({ title: z.string().min(1), description: z.string().optional(), category: z.string().optional() })\n          .parse(p);\n        const res = await createCourseAction({ title, description, category });\n        return NextResponse.json(res);\n      }\n      case \"updateCourse\": {\n        const { courseId, patch } = z\n          .object({\n            courseId: z.string().uuid(),\n            patch: z.object({ title: z.string().optional(), description: z.string().nullable().optional(), category: z.string().nullable().optional(), status: z.enum([\"draft\", \"published\"]).optional() }),\n          })\n          .parse(p);\n        await updateCourseAction(courseId, patch as any);\n        return NextResponse.json({ ok: true });\n      }\n      case \"deleteCourse\": {\n        const { courseId } = z.object({ courseId: z.string().uuid() }).parse(p);\n        await deleteCourseAction(courseId);\n        return NextResponse.json({ ok: true });\n      }\n      case \"addLesson\": {\n        const { courseId, title } = z.object({ courseId: z.string().uuid(), title: z.string().min(1) }).parse(p);\n        const res = await addLessonAction(courseId, title);\n        return NextResponse.json(res);\n      }\n      case \"deleteLesson\": {\n        const { lessonId } = z.object({ lessonId: z.string().uuid() }).parse(p);\n        await deleteLessonAction(lessonId);\n        return NextResponse.json({ ok: true });\n      }\n      case \"reorderLessons\": {\n        const { courseId, orderedIds } = z.object({ courseId: z.string().uuid(), orderedIds: z.array(z.string().uuid()) }).parse(p);\n        await reorderLessonsAction(courseId, orderedIds as UUID[]);\n        return NextResponse.json({ ok: true });\n      }\n      case \"addCard\": {\n        const { lessonId, card } = z\n          .object({\n            lessonId: z.string().uuid(),\n            card: z.object({\n              cardType: z.enum([\"text\", \"quiz\", \"fill-blank\"]),\n              title: z.string().nullable().optional(),\n              tags: z.array(z.string()).optional(),\n              content: z.any(),\n            }),\n          })\n          .parse(p);\n        const id = await addCardAction(lessonId, card as any);\n        return NextResponse.json({ id });\n      }\n      case \"updateCard\": {\n        const { cardId, patch } = z.object({ cardId: z.string().uuid(), patch: z.any() }).parse(p);\n        await updateCardAction(cardId, patch);\n        return NextResponse.json({ ok: true });\n      }\n      case \"deleteCard\": {\n        const { cardId } = z.object({ cardId: z.string().uuid() }).parse(p);\n        await deleteCardAction(cardId);\n        return NextResponse.json({ ok: true });\n      }\n      case \"deleteCards\": {\n        const { ids } = z.object({ ids: z.array(z.string().uuid()) }).parse(p);\n        await deleteCardsAction(ids as UUID[]);\n        return NextResponse.json({ ok: true });\n      }\n      case \"reorderCards\": {\n        const { lessonId, orderedIds } = z.object({ lessonId: z.string().uuid(), orderedIds: z.array(z.string().uuid()) }).parse(p);\n        await reorderCardsAction(lessonId, orderedIds as UUID[]);\n        return NextResponse.json({ ok: true });\n      }\n      case \"saveProgress\": {\n        const { input } = z.object({ input: z.any() }).parse(p);\n        await saveProgressAction(input);\n        return NextResponse.json({ ok: true });\n      }\n      case \"rateSrs\": {\n        const { cardId, rating } = z.object({ cardId: z.string().uuid(), rating: z.enum([\"again\", \"hard\", \"good\", \"easy\"]) }).parse(p);\n        const entry = await rateSrsAction(cardId, rating);\n        return NextResponse.json(entry);\n      }\n      case \"toggleFlag\": {\n        const { cardId } = z.object({ cardId: z.string().uuid() }).parse(p);\n        const on = await toggleFlagAction(cardId);\n        return NextResponse.json({ on });\n      }\n      case \"saveNote\": {\n        const { cardId, text } = z.object({ cardId: z.string().uuid(), text: z.string() }).parse(p);\n        await saveNoteAction(cardId, text);\n        return NextResponse.json({ ok: true });\n      }\n      case \"saveDraft\": {\n        const { kind, payload } = z.object({ kind: z.enum([\"outline\", \"lesson-cards\"]), payload: z.any() }).parse(p);\n        const res = await saveDraftAction(kind, payload);\n        return NextResponse.json(res);\n      }\n      case \"commitCoursePlan\": {\n        const { draftId } = z.object({ draftId: z.string().uuid() }).parse(p);\n        const res = await commitCoursePlanAction(draftId);\n        return NextResponse.json(res ?? null);\n      }\n      case \"commitCoursePlanPartial\": {\n        const { draftId, selectedIndexes } = z.object({ draftId: z.string().uuid(), selectedIndexes: z.array(z.number().int().nonnegative()) }).parse(p);\n        const res = await commitCoursePlanPartialAction(draftId, selectedIndexes);\n        return NextResponse.json(res ?? null);\n      }\n      case \"commitLessonCards\": {\n        const { draftId, lessonId } = z.object({ draftId: z.string().uuid(), lessonId: z.string().uuid() }).parse(p);\n        const res = await commitLessonCardsAction({ draftId, lessonId });\n        return NextResponse.json(res ?? null);\n      }\n      case \"commitLessonCardsPartial\": {\n        const { draftId, lessonId, selectedIndexes } = z\n          .object({ draftId: z.string().uuid(), lessonId: z.string().uuid(), selectedIndexes: z.array(z.number().int().nonnegative()) })\n          .parse(p);\n        const res = await commitLessonCardsPartialAction({ draftId, lessonId, selectedIndexes });\n        return NextResponse.json(res ?? null);\n      }\n      default:\n        return new NextResponse(`Unknown op: ${op}`, { status: 400 });\n    }\n  } catch (e: any) {\n    console.error(\"/api/db error\", e);\n    return new NextResponse(e?.message || \"Internal Error\", { status: 500 });\n  }\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/auth/callback/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/auth/confirm/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/auth/reset-password/actions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/auth/reset-password/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/courses/[courseId]/lessons/[lessonId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/courses/[courseId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/courses/[courseId]/workspace/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/courses/new/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/courses/new/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/courses/plan/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/courses/plan/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'useEffect' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'DialogFooter' is defined but never used.","line":15,"column":94,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":106}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { commitCoursePlan, commitCoursePlanPartial, saveDraft, deleteCourse } from \"@/lib/localdb\";\nimport type { CoursePlan } from \"@/lib/types\";\nimport { useRouter } from \"next/navigation\";\nimport { Header } from \"@/components/ui/header\";\nimport { SSETimeline } from \"@/components/ui/SSETimeline\";\nimport { useSSE } from \"@/components/ai/useSSE\";\nimport { useEffect, useState } from \"react\";\nimport { DiffList, type DiffItem } from \"@/components/ui/DiffList\";\nimport { toast } from \"@/components/ui/toaster\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogTrigger, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from \"@/components/ui/dialog\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\n\ntype PlanUpdate = { node?: string; status?: string };\ntype PlanDone = { plan: CoursePlan; draftId: string };\n\nfunction SSERunner({ url, body, onUpdate, onDone, onError }: {\n  url: string;\n  body: Record<string, unknown>;\n  onUpdate: (d: PlanUpdate) => void;\n  onDone: (d: PlanDone) => void;\n  onError: (d: { message?: string }) => void;\n}) {\n  useSSE<PlanDone, PlanUpdate>(url, body, { onUpdate, onDone, onError });\n  return null;\n}\n\nexport default function PlanCoursePage() {\n  const router = useRouter();\n  const [theme, setTheme] = useState(\"\");\n  const [level, setLevel] = useState(\"\");\n  const [goal, setGoal] = useState(\"\");\n  const [lessonCount, setLessonCount] = useState(6);\n  const [plan, setPlan] = useState<CoursePlan | null>(null);\n  const [draftId, setDraftId] = useState<string | null>(null);\n  const [generating, setGenerating] = useState(false);\n  const [logs, setLogs] = useState<{ ts: number; text: string }[]>([]);\n  const [selected, setSelected] = useState<Record<number, boolean>>({});\n\n  function startGenerate(e?: React.FormEvent) {\n    if (e) e.preventDefault();\n    if (!theme.trim()) return alert(\"テーマは必須です\");\n    setPlan(null);\n    setDraftId(null);\n    setLogs([]);\n    setGenerating(true);\n  }\n\n  async function onCommit() {\n    if (!draftId) return;\n    const idxs = Object.entries(selected)\n      .filter(([, v]) => v)\n      .map(([k]) => Number(k));\n    const res = idxs.length > 0 ? await commitCoursePlanPartial(draftId, idxs) : await commitCoursePlan(draftId);\n    if (!res) return alert(\"保存に失敗しました\");\n    try {\n      toast({\n        title: \"保存しました\",\n        description: \"コース案を反映しました。\",\n        actionLabel: \"取り消す (60秒)\",\n        durationMs: 60000,\n        onAction: () => { void deleteCourse(res.courseId); },\n      });\n    } catch {}\n    router.replace(`/courses/${res.courseId}`);\n  }\n\n  const diffs: DiffItem[] = plan ? plan.lessons.map((l) => ({ kind: \"add\", label: l.title })) : [];\n\n  return (\n    <div className=\"min-h-screen\">\n      <Header />\n      <main className=\"max-w-5xl mx-auto px-4 sm:px-6 py-6 grid grid-cols-1 lg:grid-cols-[1fr_320px] gap-6\">\n        {generating && (\n          <SSERunner\n            url=\"/api/ai/outline\"\n            body={{ theme, level, goal, lessonCount }}\n            onUpdate={(d) => setLogs((s) => [...s, { ts: Date.now(), text: `${d?.node ?? d?.status}` }])}\n            onDone={async (d) => {\n              const p = d?.plan as CoursePlan;\n              if (p) {\n                const draft = await saveDraft(\"outline\", p);\n                setPlan(p);\n                setDraftId(draft.id);\n                setLogs((s) => [...s, { ts: Date.now(), text: `下書きを保存しました（ID: ${draft.id}）` }]);\n              }\n              setGenerating(false);\n            }}\n            onError={(d) => {\n              setLogs((s) => [...s, { ts: Date.now(), text: `エラー: ${d?.message ?? \"unknown\"}` }]);\n              setGenerating(false);\n            }}\n          />\n        )}\n        <section className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>AI コース設計</CardTitle>\n              <CardDescription>入力 → ストリーミング → 差分プレビュー → 保存</CardDescription>\n              <ol className=\"flex items-center gap-2 text-xs\">\n                <Badge variant=\"secondary\">テーマ</Badge>\n                <span>→</span>\n                <Badge variant=\"secondary\">レベル/目標</Badge>\n                <span>→</span>\n                <Badge variant=\"secondary\">レッスン数</Badge>\n                <span>→</span>\n                <Badge variant=\"secondary\">生成プレビュー</Badge>\n              </ol>\n            </CardHeader>\n            <CardContent>\n            <form onSubmit={startGenerate} className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n              <div className=\"sm:col-span-2\">\n                <label className=\"block text-sm font-medium mb-1\">テーマ</label>\n                <Input\n                  value={theme}\n                  onChange={(e) => setTheme(e.target.value)}\n                  placeholder=\"例: 機械学習 入門\"\n                  required\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">レベル（任意）</label>\n                <Input\n                  value={level}\n                  onChange={(e) => setLevel(e.target.value)}\n                  placeholder=\"初級/中級/上級 など\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">目標（任意）</label>\n                <Input\n                  value={goal}\n                  onChange={(e) => setGoal(e.target.value)}\n                  placeholder=\"例: 3週間で基礎を習得\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">レッスン数</label>\n                <Input\n                  type=\"number\"\n                  min={3}\n                  max={30}\n                  value={lessonCount}\n                  onChange={(e) => setLessonCount(Number(e.target.value))}\n                />\n              </div>\n              <div className=\"sm:col-span-2 flex items-center gap-2\">\n                <Button type=\"submit\" disabled={generating} variant=\"default\">\n                  {generating ? \"生成中…\" : \"コース案を生成\"}\n                </Button>\n                {plan && (\n                  <>\n                    <Button type=\"button\" onClick={startGenerate}>再生成</Button>\n                    <Dialog>\n                      <DialogTrigger asChild>\n                        <Button type=\"button\">差分プレビュー</Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>差分プレビュー</DialogTitle>\n                          <DialogDescription>追加されるレッスンの一覧です。保存で反映されます。</DialogDescription>\n                        </DialogHeader>\n                        <DiffList items={diffs} />\n                        <div className=\"mt-4 flex justify-end gap-2\">\n                          <Button onClick={onCommit} variant=\"default\">保存して反映</Button>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </>\n                )}\n              </div>\n            </form>\n            </CardContent>\n          </Card>\n\n          {plan && (\n            <Card>\n              <CardHeader>\n                <CardTitle>{plan.course.title}</CardTitle>\n                {plan.course.description && (\n                  <CardDescription>{plan.course.description}</CardDescription>\n                )}\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-sm text-gray-700 mb-2\">反映するレッスンを選択（未選択なら全件）</div>\n                <ol className=\"mt-1 space-y-2 list-decimal list-inside\">\n                  {plan.lessons.map((l, idx) => (\n                    <li key={idx} className=\"flex items-start gap-2\">\n                      <input\n                        aria-label={`${l.title} を選択`}\n                        type=\"checkbox\"\n                        checked={!!selected[idx]}\n                        onChange={(e) => setSelected((s) => ({ ...s, [idx]: e.target.checked }))}\n                      />\n                      <div>\n                        <div className=\"font-medium\">{l.title}</div>\n                        {l.summary && <div className=\"text-sm text-gray-600\">{l.summary}</div>}\n                      </div>\n                    </li>\n                  ))}\n                </ol>\n              </CardContent>\n            </Card>\n          )}\n        </section>\n\n        <aside className=\"space-y-3\">\n          <h3 className=\"text-sm font-medium\">進行状況</h3>\n            <Tabs defaultValue=\"log\">\n              <TabsList>\n                <TabsTrigger value=\"log\">ログ</TabsTrigger>\n                <TabsTrigger value=\"diff\">差分</TabsTrigger>\n              </TabsList>\n              <TabsContent value=\"log\">\n                <SSETimeline logs={logs} />\n              </TabsContent>\n              <TabsContent value=\"diff\">\n                <Card className=\"p-3\">\n                  <DiffList items={diffs} />\n                </Card>\n              </TabsContent>\n            </Tabs>\n        </aside>\n      </main>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/error/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/learn/[courseId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/login/actions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/login/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/app/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipProvider' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'Tooltip' is defined but never used.","line":12,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipTrigger' is defined but never used.","line":12,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TooltipContent' is defined but never used.","line":12,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":66}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\n\nimport Link from \"next/link\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { listCourses, deleteCourse, useLocalDbVersion } from \"@/lib/localdb\";\nimport type { Course } from \"@/lib/types\";\nimport { Header } from \"@/components/ui/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select } from \"@/components/ui/select\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent } from \"@/components/ui/tooltip\";\nimport { Confirm } from \"@/components/ui/confirm\";\n\ntype StatusFilter = \"all\" | \"draft\" | \"published\";\n\nexport default function Home() {\n  const [courses, setCourses] = useState<Course[]>([]);\n  const [q, setQ] = useState(\"\");\n  const [filter, setFilter] = useState<StatusFilter>(\"all\");\n\n  const dbv = useLocalDbVersion();\n  useEffect(() => {\n    setCourses(listCourses());\n  }, [dbv]);\n\n  function refresh() {\n    setCourses(listCourses());\n  }\n\n  const filtered = useMemo(() => {\n    const kw = q.trim().toLowerCase();\n    return courses.filter((c) => {\n      const okStatus = filter === \"all\" ? true : c.status === filter;\n      const okKw = kw ? (c.title.toLowerCase().includes(kw) || (c.description ?? \"\").toLowerCase().includes(kw)) : true;\n      return okStatus && okKw;\n    });\n  }, [courses, q, filter]);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 via-white to-blue-50\">\n      <Header onSearch={setQ} />\n      \n      {/* Hero Section */}\n      <section className=\"relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-r from-[hsl(var(--primary-500))]/5 to-[hsl(var(--primary-600))]/5\" />\n        <div className=\"relative max-w-5xl mx-auto px-4 sm:px-6 py-12\">\n          <div className=\"text-center\">\n            <h1 className=\"text-4xl sm:text-5xl font-bold mb-4\">\n              <span className=\"bg-gradient-to-r from-[hsl(var(--primary-600))] to-[hsl(var(--primary-400))] bg-clip-text text-transparent\">学習を、もっと楽しく</span>\n            </h1>\n            <p className=\"text-lg text-[hsl(var(--fg))]/70 mb-8 max-w-2xl mx-auto\">\n              AIの力で、あなただけの学習体験を。テーマを入力するだけで、パーソナライズされたコースが生成されます。\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button asChild variant=\"default\" size=\"lg\" className=\"shadow-lg hover:shadow-xl\">\n                <Link href=\"/courses/plan\">\n                  <span className=\"mr-2\">✨</span>\n                  AIでコースを作成\n                </Link>\n              </Button>\n              <Button asChild variant=\"outline\" size=\"lg\">\n                <Link href=\"/courses/new\">\n                  手動でコースを作成\n                </Link>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      <main className=\"max-w-5xl mx-auto px-4 sm:px-6 py-8\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-[hsl(var(--fg))] mb-1\">あなたのコース</h2>\n            <p className=\"text-sm text-[hsl(var(--fg))]/60\">\n              {courses.length > 0 ? `${courses.length}個のコース` : \"まだコースがありません\"}\n            </p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <label className=\"text-sm font-medium text-[hsl(var(--fg))]/70\">フィルタ:</label>\n            <Select \n              value={filter} \n              onChange={(e) => setFilter(e.target.value as StatusFilter)}\n              className=\"min-w-[120px]\"\n            >\n              <option value=\"all\">すべて</option>\n              <option value=\"draft\">下書き</option>\n              <option value=\"published\">公開済み</option>\n            </Select>\n          </div>\n        </div>\n\n        {courses.length === 0 ? (\n          <Card variant=\"elevated\" className=\"p-12 text-center\">\n            <div className=\"max-w-md mx-auto\">\n              <div className=\"w-20 h-20 mx-auto mb-6 rounded-full bg-gradient-to-br from-blue-100 to-indigo-100 flex items-center justify-center\">\n                <span className=\"text-3xl\">📚</span>\n              </div>\n              <h3 className=\"text-xl font-semibold mb-3\">まだコースがありません</h3>\n              <p className=\"text-[hsl(var(--fg))]/60 mb-6\">\n                テーマを入力するだけで、AIが最適な学習プランを作成します。\n                今すぐ始めてみましょう！\n              </p>\n              <Button asChild variant=\"default\" size=\"lg\">\n                <Link href=\"/courses/plan\">\n                  <span className=\"mr-2\">✨</span>\n                  最初のコースを作る\n                </Link>\n              </Button>\n            </div>\n          </Card>\n        ) : filtered.length === 0 ? (\n          <Card variant=\"elevated\" className=\"p-8 text-center\">\n            <p className=\"text-[hsl(var(--fg))]/60\">条件に合致するコースが見つかりませんでした。</p>\n          </Card>\n        ) : (\n          <div className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n            {filtered.map((c) => (\n              <Card key={c.id} variant=\"interactive\" className=\"overflow-hidden group\">\n                <div className=\"h-2 bg-gradient-to-r from-[hsl(var(--primary-400))] to-[hsl(var(--primary-600))] opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n                <div className=\"p-6\">\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <h3 className=\"font-semibold text-lg line-clamp-1 flex-1\">{c.title}</h3>\n                    <Badge \n                      variant={c.status === \"published\" ? \"statusPublished\" : \"statusDraft\"} \n                      size=\"sm\"\n                      aria-label={`ステータス: ${c.status}`}\n                    >\n                      {c.status === \"published\" ? \"公開\" : \"下書き\"}\n                    </Badge>\n                  </div>\n                  {c.description && (\n                    <p className=\"text-sm text-[hsl(var(--fg))]/60 line-clamp-2 mb-4\">\n                      {c.description}\n                    </p>\n                  )}\n                  <div className=\"flex items-center justify-between text-xs text-[hsl(var(--fg))]/50 mb-4\">\n                    <span>更新: {new Date(c.updatedAt).toLocaleDateString()}</span>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button asChild variant=\"default\" size=\"sm\" className=\"flex-1\">\n                      <Link href={`/courses/${c.id}/workspace`}>\n                        ワークスペースを開く\n                      </Link>\n                    </Button>\n                    <Confirm\n                      title=\"このコースを削除しますか？\"\n                      description=\"この操作は元に戻せません。関連するレッスンとカードも削除されます。\"\n                      confirmLabel=\"削除する\"\n                      cancelLabel=\"キャンセル\"\n                      onConfirm={async () => { await deleteCourse(c.id); refresh(); }}\n                    >\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        aria-label=\"削除\"\n                        title=\"削除\"\n                      >\n                        🗑️\n                      </Button>\n                    </Confirm>\n                  </div>\n                </div>\n              </Card>\n            ))}\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ai/LessonCardsRunner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ai/useSSE.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[754,757],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[754,757],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3308,3311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3308,3311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4708,4711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4708,4711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'body', 'onDone', 'onError', and 'onUpdate'. Either include them or remove the dependency array. If 'onError' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":127,"column":6,"nodeType":"ArrayExpression","endLine":127,"endColumn":33,"suggestions":[{"desc":"Update the dependencies array to be: [body, onDone, onError, onUpdate, url]","fix":{"range":[4830,4857],"text":"[body, onDone, onError, onUpdate, url]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":127,"column":12,"nodeType":"CallExpression","endLine":127,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect, useRef } from \"react\";\n\ntype DefaultUpdate = { node?: string; status?: string };\n\ntype Handlers<TDone, TUpdate = DefaultUpdate> = {\n  onUpdate?: (data: TUpdate) => void;\n  onDone?: (data: TDone) => void;\n  onError?: (data: { message?: string }) => void;\n};\n\nexport function useSSE<TDone, TUpdate = DefaultUpdate>(\n  url: string,\n  body: Record<string, unknown>,\n  { onUpdate, onDone, onError }: Handlers<TDone, TUpdate>\n) {\n  const abortRef = useRef<AbortController | null>(null);\n\n  useEffect(() => {\n    // Abort any in-flight request for prior effect\n    try { abortRef.current?.abort(); } catch {}\n    const ac = new AbortController();\n    abortRef.current = ac;\n\n    (async () => {\n      const isAbortError = (err: any) =>\n        err?.name === \"AbortError\" || err?.code === 20 || `${err?.message ?? \"\"}`.toLowerCase().includes(\"abort\");\n\n      try {\n        const res = await fetch(url, {\n          method: \"POST\",\n          body: JSON.stringify(body),\n          headers: { \"Content-Type\": \"application/json\" },\n          signal: ac.signal,\n        });\n        if (ac.signal.aborted) return; // aborted early\n        if (!res.ok) {\n          onError?.({ message: `HTTP ${res.status} ${res.statusText}` });\n          return;\n        }\n        if (!res.body) {\n          onError?.({ message: \"No response body\" });\n          return;\n        }\n\n        const reader = res.body.getReader();\n        const decoder = new TextDecoder();\n        let buf = \"\";\n        let sawDone = false;\n        try {\n          while (!ac.signal.aborted) {\n            const { done, value } = await reader.read();\n            if (done || ac.signal.aborted) break;\n            buf += decoder.decode(value, { stream: true });\n\n            // SSE delimiter: blank line (\\n\\n or \\r\\n\\r\\n)\n            const findDelimiter = () => {\n              const nn = buf.indexOf(\"\\n\\n\");\n              const rr = buf.indexOf(\"\\r\\n\\r\\n\");\n              if (nn === -1) return rr;\n              if (rr === -1) return nn;\n              return Math.min(nn, rr);\n            };\n            let idx: number;\n            while ((idx = findDelimiter()) !== -1) {\n              const chunk = buf.slice(0, idx);\n              // advance by the delimiter length (2 for \\n\\n, 4 for \\r\\n\\r\\n)\n              const advance = buf.slice(idx, idx + 4) === \"\\r\\n\\r\\n\" ? 4 : 2;\n              buf = buf.slice(idx + advance);\n\n              // parse lines\n              let event = \"message\";\n              let data = \"\";\n              for (const raw of chunk.split(/\\r?\\n/)) {\n                const line = raw.trimEnd();\n                if (line.startsWith(\"event:\")) event = line.slice(6).trim();\n                if (line.startsWith(\"data:\")) data += line.slice(5).trim();\n              }\n              try {\n                const json = (data ? JSON.parse(data) : undefined) as unknown;\n                if (event === \"update\") onUpdate?.(json as TUpdate);\n                else if (event === \"done\") { sawDone = true; onDone?.(json as TDone); }\n                else if (event === \"error\") onError?.(json as { message?: string });\n              } catch {\n                // ignore JSON parse errors\n              }\n            }\n          }\n        } catch (err) {\n          if (!isAbortError(err)) onError?.({ message: (err as any)?.message ?? \"stream error\" });\n        } finally {\n          try { reader.releaseLock(); } catch {}\n          // flush any remaining decoded text and parse once more\n          try {\n            buf += decoder.decode();\n            // best-effort: parse last chunk without requiring trailing delimiter\n            const chunks = buf.split(/\\n\\n|\\r\\n\\r\\n/);\n            for (const chunk of chunks) {\n              if (!chunk.trim()) continue;\n              let event = \"message\";\n              let data = \"\";\n              for (const raw of chunk.split(/\\r?\\n/)) {\n                const line = raw.trimEnd();\n                if (line.startsWith(\"event:\")) event = line.slice(6).trim();\n                if (line.startsWith(\"data:\")) data += line.slice(5).trim();\n              }\n              try {\n                const json = (data ? JSON.parse(data) : undefined) as unknown;\n                if (event === \"update\") onUpdate?.(json as TUpdate);\n                else if (event === \"done\") { sawDone = true; onDone?.(json as TDone); }\n                else if (event === \"error\") onError?.(json as { message?: string });\n              } catch {}\n            }\n          } catch {}\n          if (!sawDone && !ac.signal.aborted) {\n            onError?.({ message: \"Stream ended without done\" });\n          }\n        }\n      } catch (err) {\n        if (!isAbortError(err)) onError?.({ message: (err as any)?.message ?? \"request error\" });\n      }\n    })();\n\n    return () => {\n      try { ac.abort(); } catch {}\n    };\n  }, [url, JSON.stringify(body)]);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/dnd/SortableList.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'ids'. Either include it or remove the dependency array. If 'setItems' needs the current value of 'ids', you can also switch to useReducer instead of useState and read 'ids' in the reducer.","line":30,"column":40,"nodeType":"ArrayExpression","endLine":30,"endColumn":55,"suggestions":[{"desc":"Update the dependencies array to be: [ids]","fix":{"range":[719,734],"text":"[ids]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":30,"column":41,"nodeType":"CallExpression","endLine":30,"endColumn":54}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport * as React from \"react\";\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragEndEvent,\n} from \"@dnd-kit/core\";\nimport {\n  arrayMove,\n  SortableContext,\n  verticalListSortingStrategy,\n  useSortable,\n  sortableKeyboardCoordinates,\n} from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\n\ntype SortableListProps = {\n  ids: string[];\n  label: string;\n  onReorder: (ids: string[]) => void;\n  renderItem: (id: string, index: number) => React.ReactNode;\n};\n\nexport function SortableList({ ids, label, onReorder, renderItem }: SortableListProps) {\n  const [items, setItems] = React.useState(ids);\n  React.useEffect(() => setItems(ids), [ids.join(\",\")]);\n\n  const sensors = useSensors(\n    useSensor(PointerSensor, { activationConstraint: { distance: 4 } }),\n    useSensor(KeyboardSensor, { coordinateGetter: sortableKeyboardCoordinates })\n  );\n\n  function onDragEnd(event: DragEndEvent) {\n    const { active, over } = event;\n    if (!over || active.id === over.id) return;\n    const oldIndex = items.indexOf(String(active.id));\n    const newIndex = items.indexOf(String(over.id));\n    const next = arrayMove(items, oldIndex, newIndex);\n    setItems(next);\n    onReorder(next);\n  }\n\n  const announcements = {\n    onDragStart(id: string) {\n      return `${label}: ${id} を移動中`;\n    },\n    onDragOver(id: string, overId: string) {\n      return `${label}: ${id} を ${overId} の位置へ`;\n    },\n    onDragEnd(id: string, overId: string) {\n      return `${label}: ${id} を ${overId} の位置に移動しました`;\n    },\n    onDragCancel(id: string) {\n      return `${label}: ${id} の移動をキャンセル`;\n    },\n  } as const;\n\n  return (\n    <DndContext\n      sensors={sensors}\n      collisionDetection={closestCenter}\n      onDragEnd={onDragEnd}\n      accessibility={{\n        announcements: {\n          onDragStart({ active }) {\n            return announcements.onDragStart(String(active.id));\n          },\n          onDragOver({ active, over }) {\n            if (!over) return;\n            return announcements.onDragOver(String(active.id), String(over.id));\n          },\n          onDragEnd({ active, over }) {\n            if (!over) return;\n            return announcements.onDragEnd(String(active.id), String(over.id));\n          },\n          onDragCancel({ active }) {\n            return announcements.onDragCancel(String(active.id));\n          },\n        },\n      }}\n    >\n      <SortableContext items={items} strategy={verticalListSortingStrategy}>\n        <ul className=\"space-y-2\">\n          {items.map((id, index) => (\n            <SortableRow key={id} id={id} index={index}>\n              {renderItem(id, index)}\n            </SortableRow>\n          ))}\n        </ul>\n      </SortableContext>\n    </DndContext>\n  );\n}\n\nfunction SortableRow({ id, index, children }: { id: string; index: number; children: React.ReactNode }) {\n  const { attributes, listeners, setNodeRef, transform, transition, isDragging } = useSortable({ id });\n  const style: React.CSSProperties = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.8 : undefined,\n  };\n  return (\n    <li ref={setNodeRef} style={style} className=\"rounded-md border border-[hsl(var(--border))] bg-[hsl(var(--card))] p-3\">\n      <div className=\"flex items-center gap-1 sm:gap-2\">\n        <button\n          aria-label={`ドラッグして並び替え（#${index + 1})`}\n          className=\"cursor-grab select-none text-gray-500 px-1\"\n          {...attributes}\n          {...listeners}\n          type=\"button\"\n        >\n          ≡\n        </button>\n        <span className=\"text-gray-500 select-none hidden sm:inline\">#{index + 1}</span>\n        <div className=\"flex-1 min-w-0\">{children}</div>\n      </div>\n    </li>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/hooks/useHotkeys.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[329,332],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[329,332],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.","line":27,"column":6,"nodeType":"Identifier","endLine":27,"endColumn":10,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'map'. Either include it or remove the dependency array.","line":27,"column":6,"nodeType":"Identifier","endLine":27,"endColumn":10,"suggestions":[{"desc":"Update the dependencies array to be: [map]","fix":{"range":[918,922],"text":"[map]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect } from \"react\";\n\nexport type HotkeyMap = Record<string, (e: KeyboardEvent) => void>;\n\nfunction isEditableTarget(el: EventTarget | null) {\n  const t = el as HTMLElement | null;\n  if (!t) return false;\n  const tag = t.tagName?.toLowerCase();\n  return tag === \"input\" || tag === \"textarea\" || (t as any).isContentEditable === true;\n}\n\n// Simple hotkey hook; ignores events when typing in inputs/textarea/contentEditable\nexport function useHotkeys(map: HotkeyMap, deps: unknown[] = []) {\n  useEffect(() => {\n    function onKey(e: KeyboardEvent) {\n      if (isEditableTarget(e.target)) return;\n      const key = normalizeKey(e);\n      const fn = map[key] || map[e.key];\n      if (fn) {\n        fn(e);\n      }\n    }\n    window.addEventListener(\"keydown\", onKey);\n    return () => window.removeEventListener(\"keydown\", onKey);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n}\n\nfunction normalizeKey(e: KeyboardEvent) {\n  const parts: string[] = [];\n  if (e.ctrlKey) parts.push(\"Ctrl\");\n  if (e.metaKey) parts.push(\"Meta\");\n  if (e.shiftKey) parts.push(\"Shift\");\n  if (e.altKey) parts.push(\"Alt\");\n  parts.push(e.key);\n  return parts.join(\"+\");\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/player/QuizOption.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/DiffList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/SSEConsole.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[385,388],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[385,388],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport { useEffect, useRef } from \"react\";\nimport { Card } from \"@/components/ui/card\";\n\nexport function SSEConsole({ logs }: { logs: { ts: number; text: string }[] }) {\n  const ref = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    ref.current?.scrollTo({ top: ref.current.scrollHeight, behavior: \"smooth\" });\n  }, [logs.length]);\n\n  return (\n    <Card ref={ref as any} className=\"p-3 text-xs text-gray-700 h-64 overflow-auto\" role=\"status\" aria-live=\"polite\">\n      {logs.length === 0 ? (\n        <p className=\"text-gray-500\">ログはまだありません。</p>\n      ) : (\n        <ul className=\"space-y-1\">\n          {logs.map((l, i) => (\n            <li key={i} className=\"font-mono\">\n              <span className=\"text-gray-500\">{new Date(l.ts).toLocaleTimeString()} ▸ </span>\n              <span>{l.text}</span>\n            </li>\n          ))}\n        </ul>\n      )}\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/SSETimeline.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":113,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":116,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3658,3661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3658,3661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport * as React from \"react\";\nimport { Card } from \"@/components/ui/card\";\n\nexport type SseLog = { ts: number; text: string };\n\ntype Step = {\n  label: string;\n  start: number;\n  end?: number;\n};\n\nfunction toSteps(logs: SseLog[]): Step[] {\n  const steps: Step[] = [];\n  for (const l of logs) {\n    const label = (l.text || \"\").trim();\n    if (!label) continue;\n    const prev = steps[steps.length - 1];\n    if (prev && prev.label === label && !prev.end) {\n      prev.end = l.ts; // refresh end for consecutive duplicates\n    } else {\n      steps.push({ label, start: l.ts });\n    }\n  }\n  return steps;\n}\n\nfunction fmt(ms: number) {\n  if (ms < 1000) return `${ms}ms`;\n  const s = Math.round(ms / 100) / 10;\n  return `${s}s`;\n}\n\nexport function SSETimeline({ logs }: { logs: SseLog[] }) {\n  const steps = toSteps(logs);\n  const now = Date.now();\n  const lastError = [...steps].reverse().find((s) => /^エラー/.test(s.label) || /error/i.test(s.label));\n\n  type GroupId = \"prep\" | \"gen\" | \"validate\" | \"persist\" | \"other\";\n  type Group = { id: GroupId; label: string; icon: string; start?: number; end?: number };\n  const GROUPS: Group[] = [\n    { id: \"prep\", label: \"準備\", icon: \"🧰\" },\n    { id: \"gen\", label: \"生成\", icon: \"✨\" },\n    { id: \"validate\", label: \"検証\", icon: \"🧪\" },\n    { id: \"persist\", label: \"保存\", icon: \"💾\" },\n  ];\n\n  const matchGroup = (label: string): GroupId => {\n    if (/(received|normalizeInput|expandContext)/i.test(label)) return \"prep\";\n    if (/(planCourse|generateCards)/i.test(label)) return \"gen\";\n    if (/(validatePlan|validateSchema)/i.test(label)) return \"validate\";\n    if (/(persistPreview|保存)/i.test(label)) return \"persist\";\n    return \"other\";\n  };\n\n  // Determine first appearance times for each group in logical order\n  const groupIndex = new Map<GroupId, number>();\n  steps.forEach((s, idx) => {\n    const gid = matchGroup(s.label);\n    if (!groupIndex.has(gid)) groupIndex.set(gid, idx);\n  });\n  const groupsWithTimes = GROUPS.map((g, i) => {\n    const idx = groupIndex.get(g.id);\n    const start = idx != null ? steps[idx].start : undefined;\n    // end is the start of the next seen group, else last seen step of this group, else now\n    let end: number | undefined = undefined;\n    if (start != null) {\n      // find first later group that has a start\n      for (let j = i + 1; j < GROUPS.length; j++) {\n        const nextIdx = groupIndex.get(GROUPS[j].id);\n        if (nextIdx != null) { end = steps[nextIdx].start; break; }\n      }\n      if (end == null) {\n        // try to find last step of same group\n        const lastOfGroup = [...steps].reverse().find((s) => matchGroup(s.label) === g.id);\n        end = lastOfGroup?.end ?? now;\n      }\n    }\n    return { ...g, start, end } as Group;\n  });\n\n  const anyStarted = groupsWithTimes.some((g) => g.start != null) || steps.length > 0;\n\n  return (\n    <Card className=\"p-3 text-xs text-gray-800 h-48 sm:h-64 overflow-auto\" role=\"status\" aria-live=\"polite\">\n      {lastError && <div role=\"alert\" className=\"sr-only\">{lastError.label}</div>}\n      {lastError && (\n        <div className=\"sticky top-0 z-10 mb-2 rounded border border-[hsl(var(--destructive))]/40 bg-[hsla(0,84%,60%,.08)] px-2 py-1 text-[11px] text-[hsl(var(--destructive))]\">\n          ⚠︎ エラーが発生しました: <span className=\"font-mono\">{lastError.label}</span>\n        </div>\n      )}\n      {!anyStarted ? (\n        <p className=\"text-gray-500\">待機中…</p>\n      ) : (\n        <ol className=\"space-y-2\">\n          {groupsWithTimes.map((g) => {\n            const started = g.start != null;\n            const done = started && g.end != null && g.end < now && groupIndex.has(g.id) && GROUPS.indexOf(g as any) < GROUPS.length - 1 && groupsWithTimes.find((x) => x.id === g.id)?.end !== g.start; // heuristic\n            const active = started && !done;\n            const duration = started ? (g.end ?? now) - (g.start as number) : 0;\n            const dotColor = lastError && active ? \"hsl(var(--destructive))\" : active ? \"hsl(var(--primary))\" : started ? \"rgba(0,0,0,.55)\" : \"rgba(0,0,0,.25)\";\n            return (\n              <li key={g.id} className=\"pl-5\">\n                <span\n                  className=\"absolute -ml-4 mt-[.3rem] inline-block h-2 w-2 rounded-full\"\n                  style={{ backgroundColor: dotColor }}\n                  aria-hidden\n                />\n                <div className=\"flex items-center justify-between gap-2\">\n                  <span className=\"font-mono\">\n                    {lastError && active ? \"⚠️ \" : active ? \"⏳ \" : started ? \"✔︎ \" : \"• \"}\n                    {g.icon} {g.label}\n                  </span>\n                  {started && <span className=\"text-[10px] text-gray-500\">{fmt(duration)}</span>}\n                </div>\n              </li>\n            );\n          })}\n        </ol>\n      )}\n    </Card>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/command-palette.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1576,1579],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1576,1579],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1660,1663],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1660,1663],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has missing dependencies: 'base', 'courseCmds', and 'lessonCmds'. Either include them or remove the dependency array.","line":68,"column":6,"nodeType":"ArrayExpression","endLine":68,"endColumn":27,"suggestions":[{"desc":"Update the dependencies array to be: [base, courseCmds, lessonCmds, q]","fix":{"range":[2665,2686],"text":"[base, courseCmds, lessonCmds, q]"}}]},{"ruleId":"jsx-a11y/role-has-required-aria-props","severity":1,"message":"Elements with the ARIA role \"option\" must have the following attributes defined: aria-selected","line":90,"column":32,"nodeType":"JSXAttribute","endLine":90,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport * as React from \"react\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { Dialog, DialogContent, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { listCourses, listLessons, useLocalDbVersion } from \"@/lib/localdb\";\n\ntype Cmd = { id: string; label: string; hint?: string; action: () => void };\n\nexport function CommandPalette() {\n  const router = useRouter();\n  const [open, setOpen] = useState(false);\n  const [q, setQ] = useState(\"\");\n  const [courses, setCourses] = useState(() => listCourses());\n  const [lessons, setLessons] = useState<{ courseId: string; lessonId: string; title: string }[]>([]);\n\n  const dbv = useLocalDbVersion();\n  useEffect(() => {\n    const cs = listCourses();\n    setCourses(cs);\n    const all = cs.flatMap((c) => listLessons(c.id).map((l) => ({ courseId: c.id, lessonId: l.id, title: `${c.title} / ${l.title}` })));\n    setLessons(all);\n  }, [dbv]);\n\n  // Global shortcuts: Cmd/Ctrl+K toggles\n  useEffect(() => {\n    function onKey(e: KeyboardEvent) {\n      if ((e.metaKey || e.ctrlKey) && e.key.toLowerCase() === \"k\") {\n        e.preventDefault();\n        setOpen((s) => !s);\n      }\n      if (e.key === \"Escape\") setOpen(false);\n    }\n    window.addEventListener(\"keydown\", onKey);\n    return () => window.removeEventListener(\"keydown\", onKey);\n  }, []);\n\n  // External open via CustomEvent\n  useEffect(() => {\n    function onOpen() { setOpen(true); }\n    window.addEventListener(\"open-command-palette\", onOpen as any);\n    return () => window.removeEventListener(\"open-command-palette\", onOpen as any);\n  }, []);\n\n  const base: Cmd[] = [\n    { id: \"home\", label: \"ダッシュボードへ移動\", hint: \"/\", action: () => router.push(\"/\") },\n    { id: \"plan\", label: \"AIでコース作成\", hint: \"/courses/plan\", action: () => router.push(\"/courses/plan\") },\n    { id: \"new\", label: \"手動でコース作成\", hint: \"/courses/new\", action: () => router.push(\"/courses/new\") },\n  ];\n\n  const courseCmds: Cmd[] = courses.flatMap((c) => [\n    { id: `open-${c.id}` , label: `ワークスペースを開く: ${c.title}`, hint: \"/courses/[id]/workspace\", action: () => router.push(`/courses/${c.id}/workspace`) },\n  ]);\n\n  const lessonCmds: Cmd[] = lessons.map((l) => ({\n    id: `cards-${l.lessonId}`,\n    label: `ワークスペースで開く: ${l.title}`,\n    hint: \"/courses/[id]/workspace\",\n    action: () => router.push(`/courses/${l.courseId}/workspace`),\n  }));\n\n  const cmds = useMemo(() => {\n    const all = [...base, ...courseCmds, ...lessonCmds];\n    const kw = q.trim().toLowerCase();\n    if (!kw) return all;\n    return all.filter((c) => c.label.toLowerCase().includes(kw));\n  }, [q, courses, lessons]);\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogContent className=\"p-0 overflow-hidden w-[calc(100vw-1.5rem)] sm:w-auto sm:max-w-xl\">\n        <DialogTitle className=\"sr-only\">コマンドパレット</DialogTitle>\n        <div className=\"border-b border-[hsl(var(--border))] p-3\">\n          <label className=\"sr-only\" htmlFor=\"cmdk-input\">コマンド検索</label>\n          <Input\n            id=\"cmdk-input\"\n            placeholder=\"検索またはコマンド… (⌘K)\"\n            autoFocus\n            value={q}\n            onChange={(e) => setQ(e.target.value)}\n          />\n        </div>\n        <div className=\"max-h-[60vh] overflow-auto\">\n          {cmds.length === 0 ? (\n            <div className=\"p-4 text-sm text-gray-600\">該当するコマンドはありません。</div>\n          ) : (\n            <ul role=\"listbox\" aria-label=\"コマンド結果\" className=\"divide-y divide-[hsl(var(--border))]\">\n              {cmds.map((c) => (\n                <li key={c.id} role=\"option\">\n                  <button\n                    type=\"button\"\n                    onClick={() => { setOpen(false); setQ(\"\"); setTimeout(() => c.action(), 0); }}\n                    className=\"w-full text-left p-3 hover:bg-[hsl(var(--muted))] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[hsl(var(--focus))]\"\n                  >\n                    <div className=\"flex items-center justify-between gap-2\">\n                      <span>{c.label}</span>\n                      {c.hint && <span className=\"text-xs text-gray-500\">{c.hint}</span>}\n                    </div>\n                  </button>\n                </li>\n              ))}\n            </ul>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Fire this from anywhere to open the palette\nexport function openCommandPalette() {\n  window.dispatchEvent(new CustomEvent(\"open-command-palette\"));\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/confirm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/dialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'hasAriaLabel' is assigned a value but never used.","line":30,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1181,1184],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1181,1184],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1226,1229],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1226,1229],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1530,1533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1530,1533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1578,1581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1578,1581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1855,1858],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1855,1858],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { cn } from \"@/lib/utils/cn\";\n\nexport const Dialog = DialogPrimitive.Root;\nexport const DialogTrigger = DialogPrimitive.Trigger;\nexport const DialogPortal = DialogPrimitive.Portal;\nexport const DialogClose = DialogPrimitive.Close;\n\nexport const DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/30 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n));\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName;\n\nexport const DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> & { children?: React.ReactNode }\n>(({ className, children, ...props }, ref) => {\n  const hasAriaLabel = typeof (props as any)[\"aria-label\"] === \"string\" && (props as any)[\"aria-label\"]; // truthy\n  const containsDialogTitle = (node: React.ReactNode): boolean => {\n    let found = false;\n    React.Children.forEach(node as React.ReactNode, (child) => {\n      if (found) return;\n      if (!React.isValidElement(child)) return;\n      const el = child as React.ReactElement<any>;\n      if (el.type === (DialogPrimitive as any).Title) {\n        found = true;\n        return;\n      }\n      if (el.props?.children) {\n        if (containsDialogTitle(el.props.children)) found = true;\n      }\n    });\n    return found;\n  };\n  const hasTitle = containsDialogTitle(children);\n  const ariaLabel = (props as any)[\"aria-label\"] as string | undefined;\n  return (\n    <DialogPortal>\n      <DialogOverlay />\n      <DialogPrimitive.Content\n        ref={ref}\n        className={cn(\n          \"fixed left-1/2 top-1/2 z-50 w-full max-w-lg -translate-x-1/2 -translate-y-1/2 rounded-md border border-[hsl(var(--border))] bg-[hsl(var(--card))] p-6 shadow-lg outline-none\",\n          className\n        )}\n        {...props}\n        aria-label={ariaLabel ?? (!hasTitle ? \"Dialog\" : undefined)}\n      >\n        {!hasTitle ? (\n          <DialogPrimitive.Title className=\"sr-only\">{ariaLabel ?? \"Dialog\"}</DialogPrimitive.Title>\n        ) : null}\n        {children}\n      </DialogPrimitive.Content>\n    </DialogPortal>\n  );\n});\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\nexport const DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col space-y-1.5 text-center sm:text-left\", className)} {...props} />\n);\nexport const DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\n  <div className={cn(\"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\", className)} {...props} />\n);\nexport const DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title ref={ref} className={cn(\"text-base font-semibold\", className)} {...props} />\n));\nDialogTitle.displayName = DialogPrimitive.Title.displayName;\n\nexport const DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description ref={ref} className={cn(\"text-sm text-gray-600\", className)} {...props} />\n));\nDialogDescription.displayName = DialogPrimitive.Description.displayName;\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/header.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'pathname' is assigned a value but never used.","line":19,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":17}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport Link from \"next/link\";\nimport { usePathname } from \"next/navigation\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { openCommandPalette } from \"@/components/ui/command-palette\";\nimport { NotificationCenterButton } from \"@/components/ui/notification-center\";\n\nexport function Header({\n  onSearch,\n  initialQuery = \"\",\n  minimal = false,\n}: {\n  onSearch?: (q: string) => void;\n  initialQuery?: string;\n  minimal?: boolean;\n}) {\n  const pathname = usePathname();\n  const [q, setQ] = useState(initialQuery);\n  const showCtas = !minimal;\n\n  return (\n    <header className=\"sticky top-0 z-30 bg-white/80 dark:bg-[hsl(var(--bg))]/80 backdrop-blur-md supports-[backdrop-filter]:bg-white/70 dark:supports-[backdrop-filter]:bg-[hsl(var(--bg))]/70 border-b border-[hsl(var(--border))] shadow-sm\">\n      <div className=\"max-w-5xl mx-auto px-4 sm:px-6 py-4 flex flex-col gap-2 sm:flex-row sm:items-center sm:gap-3\">\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/\" className=\"font-bold text-xl tracking-tight bg-gradient-to-r from-[hsl(var(--primary-600))] to-[hsl(var(--primary-400))] bg-clip-text text-transparent hover:from-[hsl(var(--primary-700))] hover:to-[hsl(var(--primary-500))] transition-all duration-300\">Learnify</Link>\n          {/* モバイル1段目はロゴのみ。操作は下段の共通ナビに集約 */}\n        </div>\n        {!minimal && (\n          <div className=\"w-full sm:ml-auto flex-1 sm:max-w-md\">\n            <label className=\"sr-only\" htmlFor=\"course-search\">コース検索</label>\n            <Input\n              id=\"course-search\"\n              placeholder=\"コースを検索…\"\n              value={q}\n              onChange={(e) => {\n                setQ(e.target.value);\n                onSearch?.(e.target.value);\n              }}\n            />\n          </div>\n        )}\n        {showCtas && (\n          <nav className=\"sm:ml-auto flex flex-wrap items-center gap-1 sm:gap-2\">\n            <Button onClick={() => openCommandPalette()} aria-label=\"コマンドパレットを開く\" title=\"⌘K / Ctrl+K\" variant=\"ghost\">⌘K</Button>\n            <NotificationCenterButton />\n            <Button asChild size=\"sm\" variant=\"default\">\n              <Link href=\"/courses/plan\">\n                <span className=\"sm:hidden\">AI作成</span>\n                <span className=\"hidden sm:inline\">AIで作る</span>\n              </Link>\n            </Button>\n            <Button asChild size=\"sm\" variant=\"outline\">\n              <Link href=\"/courses/new\">\n                <span className=\"sm:hidden\">手動</span>\n                <span className=\"hidden sm:inline\">手動で作る</span>\n              </Link>\n            </Button>\n          </nav>\n        )}\n      </div>\n    </header>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/input.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":4,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":4,"endColumn":28,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[77,154],"text":"type InputProps = React.InputHTMLAttributes<HTMLInputElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils/cn\";\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nexport const Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type = \"text\", ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-[hsl(var(--border))] bg-[hsl(var(--card))] px-3 py-2 text-sm text-[hsl(var(--fg))] ring-offset-background placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[hsl(var(--primary))]\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nInput.displayName = \"Input\";\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/live-status.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/notification-center.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/progress-ring.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/resizable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ImperativePanelGroupHandle' is defined but never used.","line":7,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport * as React from \"react\";\nimport {\n  PanelGroup as ResizablePanelGroupPrimitive,\n  Panel as ResizablePanelPrimitive,\n  PanelResizeHandle as ResizableHandlePrimitive,\n  type ImperativePanelGroupHandle,\n} from \"react-resizable-panels\";\nimport { cn } from \"@/lib/utils/cn\";\n\ntype GroupProps = React.ComponentProps<typeof ResizablePanelGroupPrimitive> & {\n  className?: string;\n};\ntype PanelProps = React.ComponentProps<typeof ResizablePanelPrimitive> & {\n  className?: string;\n};\ntype HandleProps = React.ComponentProps<typeof ResizableHandlePrimitive> & {\n  withHandle?: boolean;\n};\n\nexport function ResizablePanelGroup({ className, ...props }: GroupProps) {\n  return (\n    <ResizablePanelGroupPrimitive\n      className={cn(\n        \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n        className\n      )}\n      {...props}\n    />\n  );\n}\n\nexport function ResizablePanel({ className, ...props }: PanelProps) {\n  return (\n    <ResizablePanelPrimitive\n      className={cn(\"h-full overflow-auto\", className)}\n      {...props}\n    />\n  );\n}\n\nexport function ResizableHandle({ withHandle, className, ...props }: HandleProps) {\n  return (\n    <ResizableHandlePrimitive\n      className={cn(\n        \"relative flex w-px items-center justify-center bg-[hsl(var(--border))] transition-colors duration-150 focus-visible:outline focus-visible:outline-2 focus-visible:outline-[hsl(var(--ring))] data-[resize-handle-active]:bg-[hsl(var(--primary))] data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:py-2 data-[panel-group-direction=vertical]:px-0 data-[panel-group-direction=horizontal]:px-2\",\n        className\n      )}\n      {...props}\n    >\n      {withHandle ? (\n        <div aria-hidden className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm bg-[hsl(var(--muted))]\">\n          <div className=\"h-3 w-0.5 rounded bg-[hsl(var(--muted-foreground))]\" />\n        </div>\n      ) : null}\n    </ResizableHandlePrimitive>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/select.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":4,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":4,"endColumn":29,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[77,155],"text":"type SelectProps = React.SelectHTMLAttributes<HTMLSelectElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils/cn\";\n\nexport interface SelectProps extends React.SelectHTMLAttributes<HTMLSelectElement> {}\n\nexport const Select = React.forwardRef<HTMLSelectElement, SelectProps>(\n  ({ className, children, ...props }, ref) => (\n    <select\n      ref={ref}\n      className={cn(\n        \"h-9 w-full rounded-md border border-[hsl(var(--border))] bg-[hsl(var(--card))] px-2.5 py-1 text-sm text-[hsl(var(--fg))] focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[hsl(var(--primary))]\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </select>\n  )\n);\nSelect.displayName = \"Select\";\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/sheet.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[793,796],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[793,796],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1110,1113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1110,1113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1180,1183],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1180,1183],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport * as React from \"react\";\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\";\nimport { cn } from \"@/lib/utils/cn\";\n\nexport const Sheet = DialogPrimitive.Root;\nexport const SheetTrigger = DialogPrimitive.Trigger;\nexport const SheetClose = DialogPrimitive.Close;\n\nexport function SheetContent({\n  className,\n  side = \"right\",\n  children,\n  ...props\n}: React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content> & { side?: \"left\" | \"right\"; children?: React.ReactNode }) {\n  // Ensure Dialog.Content always has an accessible name.\n  // Radix logs a console error if there is neither a Dialog.Title descendant\n  // nor an explicit `aria-label` on Content. We add a visually hidden title\n  // as a safe fallback when neither is present.\n  const ariaLabel = (props as any)[\"aria-label\"] as string | undefined;\n\n  const containsDialogTitle = (node: React.ReactNode): boolean => {\n    let found = false;\n    React.Children.forEach(node as React.ReactNode, (child) => {\n      if (found) return;\n      if (!React.isValidElement(child)) return;\n      const el = child as React.ReactElement<any>;\n      // Direct Title\n      if (el.type === (DialogPrimitive as any).Title) {\n        found = true;\n        return;\n      }\n      // Recurse into children (e.g., inside SheetHeader)\n      if (el.props?.children) {\n        if (containsDialogTitle(el.props.children)) found = true;\n      }\n    });\n    return found;\n  };\n\n  const hasTitle = containsDialogTitle(children);\n\n  return (\n    <DialogPrimitive.Portal>\n      <DialogPrimitive.Overlay className=\"fixed inset-0 z-50 bg-black/30\" />\n      <DialogPrimitive.Content\n        className={cn(\n          \"fixed z-50 h-full w-full sm:w-80 bg-[hsl(var(--card))] border-[hsl(var(--border))] border-l p-4 shadow-xl\",\n          side === \"right\" ? \"inset-y-0 right-0\" : \"inset-y-0 left-0 border-l-0 border-r\",\n          className\n        )}\n        {...props}\n      >\n        {!hasTitle ? (\n          <DialogPrimitive.Title className=\"sr-only\">{ariaLabel ?? \"パネル\"}</DialogPrimitive.Title>\n        ) : null}\n        {children}\n      </DialogPrimitive.Content>\n    </DialogPrimitive.Portal>\n  );\n}\n\nexport function SheetHeader({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return <div className={cn(\"mb-3 flex items-center justify-between\", className)} {...props} />;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/textarea.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"An interface declaring no members is equivalent to its supertype.","line":4,"column":18,"nodeType":"Identifier","messageId":"noEmptyInterfaceWithSuper","endLine":4,"endColumn":31,"suggestions":[{"messageId":"replaceEmptyInterfaceWithSuper","fix":{"range":[77,163],"text":"type TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement>"},"desc":"Replace empty interface with a type alias."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils/cn\";\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nexport const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-24 w-full rounded-md border border-[hsl(var(--border))] bg-[hsl(var(--card))] px-3 py-2 text-sm text-[hsl(var(--fg))] placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[hsl(var(--primary))]\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = \"Textarea\";\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/toaster.tsx","messages":[{"ruleId":"prefer-const","severity":2,"message":"'history' is never reassigned. Use 'const' instead.","line":18,"column":5,"nodeType":"Identifier","messageId":"useConst","endLine":18,"endColumn":27,"fix":{"range":[493,525],"text":"const history: ToastRecord[] = [];"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2604,2607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2604,2607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":1,"fixableWarningCount":0,"source":"\"use client\";\nimport * as React from \"react\";\nimport * as ToastPrimitives from \"@radix-ui/react-toast\";\nimport { cn } from \"@/lib/utils/cn\";\n\ntype ToastItem = {\n  id?: string;\n  title?: string;\n  description?: string;\n  variant?: \"default\" | \"destructive\";\n  actionLabel?: string;\n  onAction?: () => void;\n  durationMs?: number;\n};\n\nconst listeners = new Set<(t: ToastItem) => void>();\ntype ToastRecord = ToastItem & { id: string; createdAt: number; state: \"shown\" | \"action\" | \"dismissed\" };\nlet history: ToastRecord[] = [];\nconst historyListeners = new Set<() => void>();\n\nfunction notifyHistoryChange() {\n  historyListeners.forEach((fn) => fn());\n}\n\nexport function getToastHistory() {\n  return [...history].sort((a, b) => b.createdAt - a.createdAt);\n}\n\nexport function subscribeToastHistory(cb: () => void) {\n  historyListeners.add(cb);\n  return () => { historyListeners.delete(cb); };\n}\nexport function toast(t: ToastItem) {\n  listeners.forEach((fn) => fn(t));\n}\n\nexport function Toaster() {\n  const [items, setItems] = React.useState<(ToastItem & { id: string })[]>([]);\n  React.useEffect(() => {\n    const on = (t: ToastItem) => {\n      const id = crypto?.randomUUID?.() ?? `${Date.now()}_${Math.random()}`;\n      setItems((s) => [...s, { id, ...t }]);\n      history.push({ id, ...t, createdAt: Date.now(), state: \"shown\" });\n      notifyHistoryChange();\n      const timeout = t.durationMs ?? 3500;\n      if (timeout > 0) setTimeout(() => setItems((s) => s.filter((x) => x.id !== id)), timeout);\n    };\n    listeners.add(on);\n    return () => void listeners.delete(on);\n  }, []);\n\n  return (\n    <ToastPrimitives.Provider swipeDirection=\"right\">\n      {items.map((t) => (\n        <ToastPrimitives.Root\n          key={t.id}\n          className={cn(\n            \"pointer-events-auto relative z-[100] m-2 w-80 rounded-md border border-[hsl(var(--border))] bg-[hsl(var(--card))] p-3 shadow-lg\",\n            t.variant === \"destructive\" && \"border-[hsl(var(--destructive))]/40\"\n          )}\n          open\n          onOpenChange={(open) => {\n            if (!open) setItems((s) => s.filter((x) => x.id !== t.id));\n          }}\n        >\n          {t.title && <div className=\"text-sm font-medium\">{t.title}</div>}\n          {t.description && <div className=\"text-xs text-gray-600 mt-1\">{t.description}</div>}\n          {t.onAction && t.actionLabel && (\n            <div className=\"mt-2\">\n              <button\n                className=\"text-xs underline underline-offset-2\"\n                onClick={() => {\n                  try { t.onAction?.(); } finally {\n                    history.push({ ...(t as any), id: t.id!, createdAt: Date.now(), state: \"action\" });\n                    notifyHistoryChange();\n                    setItems((s) => s.filter((x) => x.id !== t.id));\n                  }\n                }}\n              >\n                {t.actionLabel}\n              </button>\n            </div>\n          )}\n        </ToastPrimitives.Root>\n      ))}\n      <ToastPrimitives.Viewport className=\"fixed bottom-0 right-0 z-[100] flex max-h-screen w-full flex-col-reverse p-2 pb-[env(safe-area-inset-bottom)] pr-[env(safe-area-inset-right)] pl-[env(safe-area-inset-left)] sm:bottom-0 sm:right-0 sm:w-auto\" />\n    </ToastPrimitives.Provider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/workspace/CardPlayer.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useMemo has an unnecessary dependency: 'dbv'. Either exclude it or remove the dependency array.","line":26,"column":6,"nodeType":"ArrayExpression","endLine":26,"endColumn":21,"suggestions":[{"desc":"Update the dependencies array to be: [courseId]","fix":{"range":[1185,1200],"text":"[courseId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport * as React from \"react\";\nimport { listLessons, listCards, saveProgress, rateSrs, getProgress, isFlagged, toggleFlag, saveNote, getNote, listFlaggedByCourse, useLocalDbVersion } from \"@/lib/localdb\";\nimport type { UUID, Card, QuizCardContent, FillBlankCardContent, SrsRating, TextCardContent } from \"@/lib/types\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { QuizOption } from \"@/components/player/QuizOption\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\n\ntype Props = {\n  courseId: UUID;\n  selectedId?: UUID;\n  selectedKind?: \"lesson\" | \"card\";\n  onNavigate?: (nextCardId: UUID) => void;\n};\n\nexport function CardPlayer({ courseId, selectedId, selectedKind, onNavigate }: Props) {\n  // DB変更に追従（進捗/フラグ/ノート/カード追加など）\n  const dbv = useLocalDbVersion();\n  const [card, setCard] = React.useState<Card | null>(null);\n  // コース内の全カード（レッスン順 → カード順）\n  const flatCards = React.useMemo(() => {\n    const ls = listLessons(courseId);\n    return ls.flatMap((l) => listCards(l.id));\n  }, [courseId, dbv]);\n  // セッション用の対象集合（nullなら全件）\n  const [scopeIds, setScopeIds] = React.useState<string[] | null>(null);\n  const activeList = React.useMemo(() => (scopeIds ? flatCards.filter((c) => scopeIds.includes(c.id)) : flatCards), [flatCards, scopeIds]);\n  const activeIndex = React.useMemo(() => activeList.findIndex((c) => c.id === selectedId), [activeList, selectedId]);\n  const prevId = activeIndex > 0 ? (activeList[activeIndex - 1]?.id as UUID) : undefined;\n  const nextId = activeIndex >= 0 && activeIndex < activeList.length - 1 ? (activeList[activeIndex + 1]?.id as UUID) : undefined;\n\n  // セッション統計\n  const [summaryOpen, setSummaryOpen] = React.useState(false);\n  const cardStartRef = React.useRef<number>(Date.now());\n  const [durations, setDurations] = React.useState<Record<string, number>>({});\n  const [ratings, setRatings] = React.useState<Record<string, SrsRating | undefined>>({});\n  const [results, setResults] = React.useState<Record<string, \"correct\" | \"wrong\">>({});\n  const [flag, setFlag] = React.useState<boolean>(false);\n  const [noteOpen, setNoteOpen] = React.useState(false);\n  const [note, setNote] = React.useState<string>(\"\");\n  const [showHelp, setShowHelp] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!selectedId) { setCard(null); return; }\n    if (selectedKind === \"card\") {\n      const found = flatCards.find((c) => c.id === selectedId) ?? null;\n      setCard(found);\n      // カード切り替え→計測開始＆フラグ/ノート同期\n      cardStartRef.current = Date.now();\n      setFlag(isFlagged(selectedId));\n      setNote(getNote(selectedId) ?? \"\");\n    } else {\n      setCard(null);\n    }\n  }, [courseId, selectedId, selectedKind, flatCards]);\n\n  if (!selectedId || !card) {\n    return <p className=\"text-sm text-gray-700\">カードを選択すると、ここで学習できます。</p>;\n  }\n\n  return (\n    <div className=\"p-2\">\n      {/* ヘッダー／カードメタ＋フラグ＋ノート */}\n      <div className=\"mb-2\">\n        <span className=\"px-2 py-1 rounded bg-black/5 text-xs\">{card.cardType}</span>\n        {card.title ? <span className=\"ml-2 font-medium\">{card.title}</span> : null}\n        <div className=\"float-right flex items-center gap-2\">\n          <Button\n            aria-label={flag ? \"フラグ解除\" : \"フラグ\"}\n            onClick={async () => setFlag(await toggleFlag(card.id))}\n            size=\"sm\"\n          >\n            {flag ? \"⭐\" : \"☆\"}\n          </Button>\n          <Dialog open={noteOpen} onOpenChange={setNoteOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" aria-label=\"ノート\">📝</Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>ノート</DialogTitle>\n                <DialogDescription>このカードのメモを保存</DialogDescription>\n              </DialogHeader>\n              <Textarea value={note} onChange={(e) => setNote(e.target.value)} placeholder=\"メモ…\" />\n              <div className=\"mt-3 flex justify-end\">\n                <Button onClick={async () => { await saveNote(card.id, note); setNoteOpen(false); }} variant=\"default\">保存</Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n          <Button onClick={() => setShowHelp((s) => !s)} size=\"sm\" aria-label=\"キーボードヘルプ\">?</Button>\n        </div>\n      </div>\n\n      {/* 進捗バー */}\n      <div className=\"mt-2\">\n        <div className=\"h-1.5 w-full rounded bg-[hsl(var(--muted))]\">\n          <div className=\"h-full rounded bg-[hsl(var(--primary))]\" style={{ width: `${activeList.length ? ((activeIndex + 1) / activeList.length) * 100 : 0}%` }} />\n        </div>\n        <p className=\"text-xs text-gray-600 mt-1\">{activeIndex + 1} / {activeList.length}</p>\n      </div>\n\n      {showHelp && (\n        <div className=\"p-3 text-sm mb-4 rounded-md border border-[hsl(var(--border))] bg-[hsl(var(--card))]\">\n          <p className=\"font-medium mb-1\">キーボードショートカット</p>\n          <ul className=\"list-disc list-inside text-gray-700\">\n            <li>クイズ: 1–9 で選択, Enter で回答</li>\n            <li>穴埋め: Enter で回答</li>\n            <li>?: ヘルプの表示/非表示</li>\n          </ul>\n        </div>\n      )}\n\n      {/* 本文 */}\n      {card.cardType === \"text\" && (\n        <TextLearn content={card.content as TextCardContent} cardId={card.id} />\n      )}\n      {card.cardType === \"quiz\" && (\n        <QuizLearn\n          content={card.content as QuizCardContent}\n          cardId={card.id}\n          onResult={(r) => {\n            const d = Date.now() - cardStartRef.current;\n            setDurations((m) => ({ ...m, [card.id]: d }));\n            setResults((m) => ({ ...m, [card.id]: r }));\n          }}\n          onRated={(rating) => setRatings((m) => ({ ...m, [card.id]: rating }))}\n          gotoNext={() => { if (nextId && onNavigate) onNavigate(nextId); }}\n        />\n      )}\n      {card.cardType === \"fill-blank\" && (\n        <FillBlankLearn\n          content={card.content as FillBlankCardContent}\n          cardId={card.id}\n          onResult={(r) => {\n            const d = Date.now() - cardStartRef.current;\n            setDurations((m) => ({ ...m, [card.id]: d }));\n            setResults((m) => ({ ...m, [card.id]: r }));\n          }}\n          onRated={(rating) => setRatings((m) => ({ ...m, [card.id]: rating }))}\n          gotoNext={() => { if (nextId && onNavigate) onNavigate(nextId); }}\n        />\n      )}\n\n      <div className=\"mt-3 flex items-center justify-between\">\n        <div />\n        <Button onClick={() => setSummaryOpen(true)} aria-label=\"セッションを終了\">セッション終了</Button>\n      </div>\n\n      {/* 学習ビューと同様のナビゲーション */}\n      <nav className=\"mt-6 flex items-center justify-between\" aria-label=\"カードナビゲーション\">\n        <Button\n          onClick={() => { if (prevId && onNavigate) onNavigate(prevId); }}\n          disabled={!prevId}\n          variant=\"outline\"\n          aria-label=\"前のカードへ\"\n        >\n          前へ\n        </Button>\n        <div className=\"text-sm text-gray-600\" aria-live=\"polite\">{getProgress(card.id)?.completed ? \"完了\" : \"未完了\"}</div>\n        <Button\n          onClick={() => {\n            if (nextId && onNavigate) {\n              if (card.cardType === \"text\") {\n                saveProgress({ cardId: card.id, completed: true, completedAt: new Date().toISOString() });\n              }\n              onNavigate(nextId);\n            }\n          }}\n          disabled={!nextId}\n          variant=\"outline\"\n          aria-label=\"次のカードへ\"\n        >\n          次へ\n        </Button>\n      </nav>\n\n      {/* セッションまとめ */}\n      <Dialog open={summaryOpen} onOpenChange={setSummaryOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>セッションまとめ</DialogTitle>\n            <DialogDescription>このセッションの学習結果</DialogDescription>\n          </DialogHeader>\n          <ul className=\"grid grid-cols-2 gap-2 text-sm\">\n            <li>正答: {Object.values(results).filter((v) => v === \"correct\").length}</li>\n            <li>誤答: {Object.values(results).filter((v) => v === \"wrong\").length}</li>\n            <li>Hard率: {(() => {\n              const vals = Object.values(ratings).filter(Boolean) as SrsRating[];\n              const hard = vals.filter((v) => v === \"hard\").length;\n              return vals.length ? Math.round((hard / vals.length) * 100) : 0;\n            })()}%</li>\n            <li>平均反応時間: {(() => {\n              const arr = Object.values(durations);\n              if (!arr.length) return \"-\";\n              const avg = Math.round(arr.reduce((a, b) => a + b, 0) / arr.length);\n              return `${Math.round(avg / 100) / 10}s`;\n            })()}</li>\n          </ul>\n          <div className=\"mt-4 grid grid-cols-2 gap-2\">\n            <Button\n              onClick={() => {\n                const ids = Object.entries(results)\n                  .filter(([, r]) => r === \"wrong\")\n                  .map(([id]) => id);\n                const arr = ids.length ? ids : null;\n                setScopeIds(arr);\n                if (arr && arr[0] && onNavigate) onNavigate(arr[0] as UUID);\n                setSummaryOpen(false);\n              }}\n            >誤答のみ再演習</Button>\n            <Button\n              onClick={() => {\n                const ids = Object.entries(ratings)\n                  .filter(([, r]) => r === \"hard\")\n                  .map(([id]) => id);\n                const arr = ids.length ? ids : null;\n                setScopeIds(arr);\n                if (arr && arr[0] && onNavigate) onNavigate(arr[0] as UUID);\n                setSummaryOpen(false);\n              }}\n            >Hardのみ再演習</Button>\n            <Button\n              onClick={() => {\n                const flagged = listFlaggedByCourse(courseId);\n                const arr = flagged.length ? flagged : null;\n                setScopeIds(arr);\n                if (arr && arr[0] && onNavigate) onNavigate(arr[0] as UUID);\n                setSummaryOpen(false);\n              }}\n            >⭐ 要復習のみ再演習</Button>\n            <Button\n              onClick={() => {\n                setScopeIds(flatCards.map((c) => c.id));\n                if (flatCards[0] && onNavigate) onNavigate(flatCards[0].id as UUID);\n                setSummaryOpen(false);\n              }}\n            >全件からやり直す</Button>\n          </div>\n          <div className=\"mt-3 flex items-center justify-between\">\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                const payload = {\n                  courseId,\n                  at: new Date().toISOString(),\n                  stats: {\n                    correct: Object.values(results).filter((v) => v === \"correct\").length,\n                    wrong: Object.values(results).filter((v) => v === \"wrong\").length,\n                    hardRate: (() => {\n                      const vals = Object.values(ratings).filter(Boolean) as SrsRating[];\n                      const hard = vals.filter((v) => v === \"hard\").length;\n                      return vals.length ? Math.round((hard / vals.length) * 100) : 0;\n                    })(),\n                    avgMs: (() => {\n                      const arr = Object.values(durations);\n                      if (!arr.length) return 0;\n                      return Math.round(arr.reduce((a, b) => a + b, 0) / arr.length);\n                    })(),\n                  },\n                  durations,\n                  results,\n                  ratings,\n                };\n                const blob = new Blob([JSON.stringify(payload, null, 2)], { type: \"application/json\" });\n                const url = URL.createObjectURL(blob);\n                const a = document.createElement(\"a\");\n                a.href = url;\n                a.download = `learnify-session-${courseId}-${Date.now()}.json`;\n                a.click();\n                URL.revokeObjectURL(url);\n              }}\n            >JSONエクスポート</Button>\n            <Button onClick={() => setSummaryOpen(false)} variant=\"default\">閉じる</Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nfunction SrsPanel({ onSelect }: { onSelect: (r: SrsRating) => void }) {\n  return (\n    <div className=\"mt-4 grid grid-cols-4 gap-2\">\n      <Button onClick={() => onSelect(\"again\")} className=\"w-full\" variant=\"outline\" aria-label=\"Again（もう一度）\">Again</Button>\n      <Button onClick={() => onSelect(\"hard\")} className=\"w-full\" variant=\"outline\" aria-label=\"Hard（難しい）\">Hard</Button>\n      <Button onClick={() => onSelect(\"good\")} className=\"w-full\" variant=\"outline\" aria-label=\"Good（良い）\">Good</Button>\n      <Button onClick={() => onSelect(\"easy\")} className=\"w-full\" variant=\"outline\" aria-label=\"Easy（簡単）\">Easy</Button>\n    </div>\n  );\n}\n\nfunction TextLearn({ content, cardId }: { content: TextCardContent; cardId: string }) {\n  return (\n    <div>\n      <p className=\"whitespace-pre-wrap text-gray-800\">{content.body}</p>\n      <div className=\"mt-4\">\n        <Button onClick={() => saveProgress({ cardId, completed: true, completedAt: new Date().toISOString() })}>完了</Button>\n      </div>\n    </div>\n  );\n}\n\nfunction QuizLearn({ content, cardId, onResult, onRated, gotoNext }: { content: QuizCardContent; cardId: string; onResult?: (r: \"correct\" | \"wrong\") => void; onRated?: (r: SrsRating) => void; gotoNext?: () => void }) {\n  const [selected, setSelected] = React.useState<number | null>(0);\n  const [result, setResult] = React.useState<\"idle\" | \"correct\" | \"wrong\">(\"idle\");\n  const [revealed, setRevealed] = React.useState(false);\n\n  function submit() {\n    if (selected == null) return;\n    const ok = selected === content.answerIndex;\n    setResult(ok ? \"correct\" : \"wrong\");\n    onResult?.(ok ? \"correct\" : \"wrong\");\n    saveProgress({ cardId, completed: ok, completedAt: ok ? new Date().toISOString() : undefined, answer: { selected } });\n  }\n\n  return (\n    <div>\n      <div className=\"font-medium text-gray-900\">{content.question}</div>\n      <div role=\"radiogroup\" aria-label=\"選択肢\" className=\"mt-2 space-y-2\">\n        {content.options.map((o, i) => (\n          <QuizOption key={i} id={`opt-${i}`} label={o} checked={selected === i} onSelect={() => setSelected(i)} />\n        ))}\n      </div>\n      <div className=\"mt-3 flex items-center gap-3\">\n        <Button onClick={submit} variant=\"default\" aria-label=\"採点する\">Check</Button>\n        <Button onClick={() => setRevealed((r) => !r)} variant=\"outline\" aria-label=\"ヒントを表示\">Hint</Button>\n        <Button onClick={() => gotoNext?.()} variant=\"outline\" aria-label=\"スキップ\">Skip</Button>\n        <span\n          aria-live=\"polite\"\n          role=\"status\"\n          className={result === \"correct\" ? \"text-green-600\" : result === \"wrong\" ? \"text-red-600\" : \"sr-only\"}\n        >\n          {result === \"correct\" ? \"正解！\" : result === \"wrong\" ? \"不正解\" : \"\"}\n        </span>\n      </div>\n      {(revealed || result !== \"idle\") && content.explanation && (\n        <p className=\"mt-2 text-sm text-gray-700\">{content.explanation}</p>\n      )}\n      {result !== \"idle\" && (\n        <SrsPanel onSelect={(rating) => { onRated?.(rating); rateSrs(cardId, rating); setTimeout(() => gotoNext?.(), 150); }} />\n      )}\n    </div>\n  );\n}\n\nfunction FillBlankLearn({ content, cardId, onResult, onRated, gotoNext }: { content: FillBlankCardContent; cardId: string; onResult?: (r: \"correct\" | \"wrong\") => void; onRated?: (r: SrsRating) => void; gotoNext?: () => void }) {\n  const indices = Array.from(content.text.matchAll(/\\[\\[(\\d+)\\]\\]/g)).map((m) => m[1]);\n  const [answers, setAnswers] = React.useState<Record<string, string>>({});\n  const [result, setResult] = React.useState<\"idle\" | \"correct\" | \"wrong\">(\"idle\");\n\n  function check() {\n    const ok = indices.every((k) => {\n      const a = (answers[k] ?? \"\").trim();\n      const expect = content.answers[k]?.trim() ?? \"\";\n      if (!content.caseSensitive) return a.toLowerCase() === expect.toLowerCase();\n      return a === expect;\n    });\n    setResult(ok ? \"correct\" : \"wrong\");\n    onResult?.(ok ? \"correct\" : \"wrong\");\n    saveProgress({ cardId, completed: ok, completedAt: ok ? new Date().toISOString() : undefined, answer: answers });\n  }\n\n  const parts = content.text.split(/(\\[\\[\\d+\\]\\])/g);\n  return (\n    <div>\n      <div className=\"text-gray-900\">\n        {parts.map((part, i) => {\n          const m = part.match(/^\\[\\[(\\d+)\\]\\]$/);\n          if (!m) return <span key={i}>{part}</span>;\n          const k = m[1];\n          return (\n            <Input key={i} className=\"w-24 mx-1 inline-flex\" placeholder={`#${k}`} value={answers[k] ?? \"\"} onChange={(e) => setAnswers((s) => ({ ...s, [k]: e.target.value }))} />\n          );\n        })}\n      </div>\n      <div className=\"mt-3 flex items-center gap-3\">\n        <Button onClick={check} variant=\"default\">Check</Button>\n        <Button onClick={() => gotoNext?.()} variant=\"outline\" aria-label=\"スキップ\">Skip</Button>\n        <span\n          aria-live=\"polite\"\n          role=\"status\"\n          className={result === \"correct\" ? \"text-green-600\" : result === \"wrong\" ? \"text-red-600\" : \"sr-only\"}\n        >\n          {result === \"correct\" ? \"正解！\" : result === \"wrong\" ? \"不正解\" : \"\"}\n        </span>\n      </div>\n      {result !== \"idle\" && (\n        <SrsPanel onSelect={(rating) => { onRated?.(rating); rateSrs(cardId, rating); setTimeout(() => gotoNext?.(), 150); }} />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/workspace/Inspector.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'newLessonTitle' is assigned a value but never used.","line":45,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setNewLessonTitle' is assigned a value but never used.","line":45,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'newCard' is assigned a value but never used.","line":46,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'setNewCard' is assigned a value but never used.","line":46,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":29},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'refreshLists'. Either include it or remove the dependency array.","line":75,"column":6,"nodeType":"ArrayExpression","endLine":75,"endColumn":47,"suggestions":[{"desc":"Update the dependencies array to be: [courseId, selectedId, selectedKind, dbv, refreshLists]","fix":{"range":[3269,3310],"text":"[courseId, selectedId, selectedKind, dbv, refreshLists]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":127,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":130,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3738,3741],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3738,3741],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'card'. Either include it or remove the dependency array.","line":96,"column":6,"nodeType":"ArrayExpression","endLine":96,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [card, card.id]","fix":{"range":[4379,4389],"text":"[card, card.id]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.","line":111,"column":6,"nodeType":"ArrayExpression","endLine":111,"endColumn":28,"suggestions":[{"desc":"Update the dependencies array to be: [form]","fix":{"range":[4841,4863],"text":"[form]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","line":111,"column":7,"nodeType":"CallExpression","endLine":111,"endColumn":27},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useMemo has an unnecessary dependency: 'dbv'. Either exclude it or remove the dependency array.","line":124,"column":6,"nodeType":"ArrayExpression","endLine":124,"endColumn":47,"suggestions":[{"desc":"Update the dependencies array to be: [courseId, selectedKind, selectedId]","fix":{"range":[5325,5366],"text":"[courseId, selectedKind, selectedId]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7935,7938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7935,7938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":127,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":130,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8026,8029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8026,8029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":193,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":193,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8190,8193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8190,8193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":194,"column":133,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":136,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8351,8354],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8351,8354],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8597,8600],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8597,8600],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":201,"column":130,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":201,"endColumn":133,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8686,8689],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8686,8689],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8949,8952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8949,8952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":137,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":140,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9046,9049],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9046,9049],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":212,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9215,9218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9215,9218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":212,"column":197,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":200,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9369,9372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9369,9372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9552,9555],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9552,9555],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":164,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":167,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9662,9665],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9662,9665],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":220,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9824,9827],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9824,9827],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":220,"column":143,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":146,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9927,9930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9927,9930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":228,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10232,10235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10232,10235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":228,"column":132,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":135,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10321,10324],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10321,10324],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":232,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":232,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10512,10515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10512,10515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":239,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10993,10996],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10993,10996],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'summary' is defined but never used.","line":323,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":323,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":324,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15223,15226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15223,15226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":325,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":325,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15308,15311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15308,15311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":326,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":326,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15355,15358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15355,15358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'courseId' is assigned a value but never used.","line":386,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":386,"endColumn":19},{"ruleId":"prefer-const","severity":2,"message":"'ok' is never reassigned. Use 'const' instead.","line":438,"column":23,"nodeType":"Identifier","messageId":"useConst","endLine":438,"endColumn":25,"fix":{"range":[20726,20741],"text":"const ok = false;"}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'ok' is assigned a value but never used.","line":438,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":438,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":496,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":496,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23094,23097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23094,23097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":497,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":497,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23185,23188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23185,23188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":498,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":498,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23235,23238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23235,23238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":37,"fixableErrorCount":1,"fixableWarningCount":0,"source":"\"use client\";\nimport * as React from \"react\";\nimport {\n  getCourse,\n  listLessons,\n  listCards,\n  addLesson,\n  reorderLessons,\n  deleteLesson,\n  addCard,\n  deleteCard,\n  reorderCards,\n  commitLessonCards,\n  commitLessonCardsPartial,\n  useLocalDbVersion,\n} from \"@/lib/localdb\";\nimport type { UUID, Card, Lesson, Course, QuizCardContent, FillBlankCardContent, LessonCards, CardType } from \"@/lib/types\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { SSETimeline } from \"@/components/ui/SSETimeline\";\nimport { LessonCardsRunner } from \"@/components/ai/LessonCardsRunner\";\nimport { Confirm } from \"@/components/ui/confirm\";\nimport { Select } from \"@/components/ui/select\";\nimport { SortableList } from \"@/components/dnd/SortableList\";\nimport { saveCardDraft, loadCardDraft, publishCard, type SaveCardDraftInput } from \"@/lib/data\";\n\ntype Props = {\n  courseId: UUID;\n  selectedId?: UUID;\n  selectedKind?: \"lesson\" | \"card\";\n};\n\nexport function Inspector({ courseId, selectedId, selectedKind }: Props) {\n  const dbv = useLocalDbVersion();\n  const [course, setCourse] = React.useState<Course | null>(null);\n  const [lesson, setLesson] = React.useState<Lesson | null>(null);\n  const [card, setCard] = React.useState<Card | null>(null);\n  const [form, setForm] = React.useState<SaveCardDraftInput | null>(null);\n  const [saving, setSaving] = React.useState<\"idle\" | \"saving\" | \"saved\">(\"idle\");\n  const [savedAt, setSavedAt] = React.useState<string | null>(null);\n  const debounceRef = React.useRef<number | null>(null);\n  const [lessons, setLessons] = React.useState<Lesson[]>([]);\n  const [cards, setCards] = React.useState<Card[]>([]);\n  const [newLessonTitle, setNewLessonTitle] = React.useState(\"\");\n  const [newCard, setNewCard] = React.useState<{ type: CardType; title: string; body?: string; question?: string; options?: string; answerIndex?: number; explanation?: string; text?: string; answers?: string; caseSensitive?: boolean }>({ type: \"text\", title: \"\", body: \"\" });\n\n  // AI lesson-cards generation state\n  const [runningLesson, setRunningLesson] = React.useState<Lesson | null>(null);\n  const [logsByLesson, setLogsByLesson] = React.useState<Record<string, { ts: number; text: string }[]>>({});\n  const [previews, setPreviews] = React.useState<Record<string, { draftId: string; payload: LessonCards }>>({});\n  const [selectedIndexes, setSelectedIndexes] = React.useState<Record<string, Record<number, boolean>>>({});\n\n  function refreshLists() {\n    setCourse(getCourse(courseId) ?? null);\n    const ls = listLessons(courseId);\n    setLessons(ls);\n    if (selectedKind === \"lesson\" && selectedId) {\n      const l = ls.find((x) => x.id === selectedId) ?? null;\n      setLesson(l);\n      setCards(l ? listCards(l.id) : []);\n    } else if (selectedKind === \"card\" && selectedId) {\n      const l = ls.find((x) => listCards(x.id).some((c) => c.id === selectedId));\n      setLesson(null);\n      setCards([]);\n      const found = (l ? listCards(l.id) : []).find((c) => c.id === selectedId) ?? null;\n      setCard(found ?? null);\n    } else {\n      setLesson(null); setCards([]); setCard(null);\n    }\n  }\n\n  React.useEffect(() => {\n    refreshLists();\n  }, [courseId, selectedId, selectedKind, dbv]);\n\n  // 下書き or 現行値でフォーム初期化\n  React.useEffect(() => {\n    let mounted = true;\n    (async () => {\n      if (!card) { setForm(null); return; }\n      const draft = await loadCardDraft(card.id);\n      if (!mounted) return;\n      if (draft) { setForm(draft); return; }\n      if (card.cardType === \"text\") {\n        setForm({ cardId: card.id, cardType: \"text\", title: card.title ?? null, tags: card.tags ?? [], body: (card.content as any).body ?? \"\" });\n      } else if (card.cardType === \"quiz\") {\n        const c = card.content as QuizCardContent;\n        setForm({ cardId: card.id, cardType: \"quiz\", title: card.title ?? null, tags: card.tags ?? [], question: c.question, options: c.options, answerIndex: c.answerIndex, explanation: c.explanation ?? null });\n      } else {\n        const c = card.content as FillBlankCardContent;\n        setForm({ cardId: card.id, cardType: \"fill-blank\", title: card.title ?? null, tags: card.tags ?? [], text: c.text, answers: c.answers, caseSensitive: !!c.caseSensitive });\n      }\n    })();\n    return () => { mounted = false; };\n  }, [card?.id]);\n\n  // 500ms デバウンスのオートセーブ\n  React.useEffect(() => {\n    if (!form) return;\n    setSaving(\"saving\");\n    if (debounceRef.current) window.clearTimeout(debounceRef.current);\n    debounceRef.current = window.setTimeout(async () => {\n      const res = await saveCardDraft(form);\n      setSavedAt(res.updatedAt);\n      setSaving(\"saved\");\n    }, 500);\n    return () => {\n      if (debounceRef.current) window.clearTimeout(debounceRef.current);\n    };\n  }, [JSON.stringify(form)]);\n\n  // 現在のレッスン（カード選択時も親レッスンを解決）\n  const currentLesson: Lesson | null = React.useMemo(() => {\n    if (selectedKind === \"lesson\" && selectedId) {\n      return (listLessons(courseId).find((x) => x.id === selectedId) ?? null);\n    }\n    if (selectedKind === \"card\" && selectedId) {\n      const ls = listLessons(courseId);\n      const l = ls.find((x) => listCards(x.id).some((c) => c.id === selectedId)) ?? null;\n      return l ?? null;\n    }\n    return null;\n  }, [courseId, selectedKind, selectedId, dbv]);\n\n  // レッスン上部ツールはファイルスコープの安定コンポーネントに移動（下方で定義）\n\n  return (\n    <aside className=\"h-full overflow-auto p-3\">\n      <div className=\"text-xs text-gray-500 mb-2\">インスペクタ</div>\n      {currentLesson && (\n        <LessonTools\n          lesson={currentLesson}\n          runningLesson={runningLesson}\n          setRunningLesson={setRunningLesson}\n          logsByLesson={logsByLesson}\n          setLogsByLesson={setLogsByLesson}\n          previews={previews}\n          setPreviews={setPreviews}\n          selectedIndexes={selectedIndexes}\n          setSelectedIndexes={setSelectedIndexes}\n          onSaveAll={async (lessonId, payload, selected) => {\n            const idxs = Object.entries(selected).filter(([, v]) => v).map(([k]) => Number(k));\n            const res = idxs.length > 0\n              ? await commitLessonCardsPartial({ draftId: payload.draftId, lessonId, selectedIndexes: idxs })\n              : await commitLessonCards({ draftId: payload.draftId, lessonId });\n            if (!res) return alert(\"保存に失敗しました\");\n            refreshLists();\n            setPreviews((prev) => { const copy = { ...prev }; delete copy[lessonId]; return copy; });\n          }}\n        />\n      )}\n      {!selectedId && (\n        <p className=\"text-sm text-gray-700\">コースやレッスン/カードを選択してください。</p>\n      )}\n\n      {/* Course-level: レッスン管理 */}\n      {!selectedId && course && (\n        <CourseInspector course={course} lessons={lessons} onRefresh={refreshLists} />\n      )}\n\n      {/* Lesson-level: カード管理 + AI生成 */}\n      {selectedKind === \"lesson\" && lesson && (\n        <LessonInspector\n          courseId={courseId}\n          lesson={lesson}\n          cards={cards}\n          runningLesson={runningLesson}\n          setRunningLesson={setRunningLesson}\n          logsByLesson={logsByLesson}\n          setLogsByLesson={setLogsByLesson}\n          previews={previews}\n          setPreviews={setPreviews}\n          selectedIndexes={selectedIndexes}\n          setSelectedIndexes={setSelectedIndexes}\n          hideAiSection\n          onRefresh={refreshLists}\n        />\n      )}\n      {selectedKind === \"card\" && card && form && (\n        <section className=\"space-y-2\">\n          <h3 className=\"font-medium\">カード編集</h3>\n          <div className=\"text-xs text-gray-500\" aria-live=\"polite\">\n            タイプ: {form.cardType} / 保存: {saving === \"saving\" ? \"保存中…\" : saving === \"saved\" ? (savedAt ? `保存済み（${new Date(savedAt).toLocaleTimeString()}）` : \"保存済み\") : \"-\"}\n          </div>\n          <div>\n            <label className=\"block text-sm mb-1\">タイトル（任意）</label>\n            <Input value={(form as any).title ?? \"\"} onChange={(e) => setForm((f) => f ? ({ ...f, title: e.target.value }) as any : f)} />\n          </div>\n          <div>\n            <label className=\"block text-sm mb-1\">タグ（カンマ区切り）</label>\n            <Input\n              value={(form as any).tags?.join(\", \") ?? \"\"}\n              onChange={(e) => setForm((f) => f ? ({ ...f, tags: e.target.value.split(\",\").map((s)=>s.trim()).filter(Boolean) }) as any : f)}\n              placeholder=\"例: 基礎, 重要, 用語\"\n            />\n          </div>\n          {form.cardType === \"text\" && (\n            <div>\n              <label className=\"block text-sm mb-1\">本文</label>\n              <Textarea value={(form as any).body ?? \"\"} onChange={(e) => setForm((f) => f ? ({ ...f, body: e.target.value }) as any : f)} />\n            </div>\n          )}\n          {form.cardType === \"quiz\" && (\n            <div className=\"grid grid-cols-1 gap-2\">\n              <div>\n                <label className=\"block text-sm mb-1\">設問</label>\n                <Input value={(form as any).question ?? \"\"} onChange={(e) => setForm((f) => f ? ({ ...f, question: e.target.value }) as any : f)} />\n              </div>\n              <div>\n                <label className=\"block text-sm mb-1\">選択肢（改行区切り）</label>\n                <Textarea value={(form as any).options?.join(\"\\n\") ?? \"\"} onChange={(e) => setForm((f) => f ? ({ ...f, options: e.target.value.split(\"\\n\").map((s)=>s.trim()).filter(Boolean) }) as any : f)} />\n              </div>\n              <div>\n                <label className=\"block text-sm mb-1\">正解インデックス（0開始）</label>\n                <Input type=\"number\" value={(form as any).answerIndex ?? 0} onChange={(e) => setForm((f) => f ? ({ ...f, answerIndex: Number(e.target.value) }) as any : f)} />\n              </div>\n              <div>\n                <label className=\"block text-sm mb-1\">解説（任意）</label>\n                <Input value={(form as any).explanation ?? \"\"} onChange={(e) => setForm((f) => f ? ({ ...f, explanation: e.target.value }) as any : f)} />\n              </div>\n            </div>\n          )}\n          {form.cardType === \"fill-blank\" && (\n            <div className=\"grid grid-cols-1 gap-2\">\n              <div>\n                <label className=\"block text-sm mb-1\">テキスト（[[1]] 形式）</label>\n                <Textarea value={(form as any).text ?? \"\"} onChange={(e) => setForm((f) => f ? ({ ...f, text: e.target.value }) as any : f)} />\n              </div>\n              <div>\n                <label className=\"block text-sm mb-1\">回答（k:value 改行区切り）</label>\n                <Textarea value={Object.entries((form as any).answers ?? {}).map(([k,v]) => `${k}:${v}`).join(\"\\n\")} onChange={(e) => {\n                  const obj: Record<string,string> = {};\n                  e.target.value.split(\"\\n\").map((s)=>s.trim()).filter(Boolean).forEach((line)=>{\n                    const [k,...rest] = line.split(\":\");\n                    const v = rest.join(\":\").trim();\n                    if (k && v) obj[k.trim()] = v;\n                  });\n                  setForm((f)=> f ? ({ ...f, answers: obj }) as any : f);\n                }} />\n              </div>\n            </div>\n          )}\n          <div className=\"flex justify-end gap-2\">\n            <Button variant=\"outline\" onClick={() => setForm((f) => f ? ({ ...f }) : f)} disabled={saving === \"saving\"}>下書き保存済み</Button>\n            <Button onClick={async () => { if (card) { await publishCard(card.id); setSaving(\"idle\"); } }}>公開（反映）</Button>\n          </div>\n        </section>\n      )}\n      {course && (\n        <section className=\"mt-4\">\n          <h4 className=\"font-medium text-sm\">コース</h4>\n          <div className=\"text-sm\">{course.title}</div>\n        </section>\n      )}\n    </aside>\n  );\n}\n\ntype LessonToolsProps = {\n  lesson: Lesson;\n  runningLesson: Lesson | null;\n  setRunningLesson: (l: Lesson | null) => void;\n  logsByLesson: Record<string, { ts: number; text: string }[]>;\n  setLogsByLesson: React.Dispatch<React.SetStateAction<Record<string, { ts: number; text: string }[]>>>;\n  previews: Record<string, { draftId: string; payload: LessonCards }>;\n  setPreviews: React.Dispatch<React.SetStateAction<Record<string, { draftId: string; payload: LessonCards }>>>;\n  selectedIndexes: Record<string, Record<number, boolean>>;\n  setSelectedIndexes: React.Dispatch<React.SetStateAction<Record<string, Record<number, boolean>>>>;\n  onSaveAll: (lessonId: UUID, payload: { draftId: string; payload: LessonCards }, selected: Record<number, boolean>) => void;\n};\n\nfunction LessonTools({ lesson, runningLesson, setRunningLesson, logsByLesson, setLogsByLesson, previews, setPreviews, selectedIndexes, setSelectedIndexes, onSaveAll }: LessonToolsProps) {\n  return (\n    <section className=\"mb-3 rounded-md border border-[hsl(var(--border))] p-3\">\n      <div className=\"flex items-center justify-between mb-2\">\n        <div className=\"text-sm font-medium\">レッスンツール</div>\n        <div className=\"text-xs text-gray-600 truncate max-w-[60%]\" title={lesson.title}>{lesson.title}</div>\n      </div>\n      <div className=\"flex items-center justify-between gap-2\">\n        <div className=\"text-sm text-gray-700\">AIでこのレッスンのカードを生成</div>\n        <Button size=\"sm\" onClick={() => setRunningLesson(lesson)} disabled={!!runningLesson && runningLesson.id === lesson.id}>\n          {runningLesson?.id === lesson.id ? \"生成中…\" : \"AIで生成\"}\n        </Button>\n      </div>\n      {runningLesson?.id === lesson.id && (\n        <LessonCardsRunner\n          lessonId={lesson.id}\n          lessonTitle={lesson.title}\n          onLog={(id, text) => setLogsByLesson((m) => ({ ...m, [id]: [...(m[id] ?? []), { ts: Date.now(), text }] }))}\n          onPreview={(id, draftId, payload) => setPreviews((prev) => ({ ...prev, [id]: { draftId, payload } }))}\n          onFinish={() => setRunningLesson(null)}\n        />\n      )}\n      <SSETimeline logs={logsByLesson[lesson.id] ?? []} />\n      {previews[lesson.id] && (\n        <div className=\"mt-3\">\n          <div className=\"text-sm text-gray-600 mb-2\">プレビュー: {previews[lesson.id].payload.cards.length} 件（反映するカードを選択、未選択なら全件）</div>\n          <ol className=\"text-sm space-y-1 list-decimal list-inside\">\n            {previews[lesson.id].payload.cards.map((c, idx) => (\n              <li key={idx} className=\"flex items-center gap-2\">\n                <input\n                  type=\"checkbox\"\n                  aria-label={`カード #${idx + 1} を選択`}\n                  checked={!!(selectedIndexes[lesson.id]?.[idx])}\n                  onChange={(e) => setSelectedIndexes((m) => ({ ...m, [lesson.id]: { ...(m[lesson.id] || {}), [idx]: e.target.checked } }))}\n                />\n                <span className=\"px-1 py-0.5 rounded bg-black/5 mr-2\">{c.type}</span>\n                {\"title\" in c && c.title ? c.title : c.type === \"text\" ? \"テキスト\" : \"カード\"}\n              </li>\n            ))}\n          </ol>\n          <div className=\"mt-3 flex justify-end gap-2\">\n            <Button onClick={() => onSaveAll(lesson.id, previews[lesson.id], selectedIndexes[lesson.id] || {})}>保存</Button>\n            <Button onClick={() => setPreviews((prev) => { const copy = { ...prev }; delete copy[lesson.id]; return copy; })}>破棄</Button>\n          </div>\n        </div>\n      )}\n    </section>\n  );\n}\n\nfunction summary(c: Card): string {\n  if (c.cardType === \"text\") return (c.content as any).body?.slice(0, 30) ?? \"テキスト\";\n  if (c.cardType === \"quiz\") return (c.content as any).question ?? \"クイズ\";\n  return (c.content as any).text?.replace(/\\n/g, \" \").slice(0, 30) ?? \"穴埋め\";\n}\n\n// --- Sub-components -------------------------------------------------------\n\nfunction CourseInspector({ course, lessons, onRefresh }: { course: Course; lessons: Lesson[]; onRefresh: () => void }) {\n  const [title, setTitle] = React.useState(\"\");\n  React.useEffect(() => setTitle(\"\"), [course.id]);\n  return (\n    <section className=\"space-y-3\">\n      <h3 className=\"font-medium\">コース: {course.title}</h3>\n      <div className=\"flex gap-2\">\n        <Input placeholder=\"新規レッスン名\" value={title} onChange={(e) => setTitle(e.target.value)} />\n        <Button onClick={async () => { if (!title.trim()) return; await addLesson(course.id, title); setTitle(\"\"); onRefresh(); }}>レッスン追加</Button>\n      </div>\n      <div>\n        <h4 className=\"text-sm text-gray-700 mb-2\">レッスン並び替え</h4>\n        <SortableList\n          ids={lessons.map((l) => l.id)}\n          label=\"レッスンの並び替え\"\n          onReorder={async (ids) => { await reorderLessons(course.id, ids); onRefresh(); }}\n          renderItem={(id) => {\n            const l = lessons.find((x) => x.id === id);\n            if (!l) return <div className=\"text-xs text-gray-400\">更新中…</div>;\n            return (\n              <div className=\"flex items-center gap-2\">\n                <span className=\"flex-1 truncate\">{l.title}</span>\n                <Confirm\n                  title=\"このレッスンを削除しますか？\"\n                  description=\"この操作は元に戻せません。配下のカードも削除されます。\"\n                  confirmLabel=\"削除する\"\n                  cancelLabel=\"キャンセル\"\n                  onConfirm={async () => { await deleteLesson(l.id); onRefresh(); }}\n                >\n                  <Button variant=\"destructive\" size=\"sm\">削除</Button>\n                </Confirm>\n              </div>\n            );\n          }}\n        />\n      </div>\n    </section>\n  );\n}\n\nfunction LessonInspector(props: {\n  courseId: UUID;\n  lesson: Lesson;\n  cards: Card[];\n  runningLesson: Lesson | null;\n  setRunningLesson: (l: Lesson | null) => void;\n  logsByLesson: Record<string, { ts: number; text: string }[]>;\n  setLogsByLesson: React.Dispatch<React.SetStateAction<Record<string, { ts: number; text: string }[]>>>;\n  previews: Record<string, { draftId: string; payload: LessonCards }>;\n  setPreviews: React.Dispatch<React.SetStateAction<Record<string, { draftId: string; payload: LessonCards }>>>;\n  selectedIndexes: Record<string, Record<number, boolean>>;\n  setSelectedIndexes: React.Dispatch<React.SetStateAction<Record<string, Record<number, boolean>>>>;\n  hideAiSection?: boolean;\n  onRefresh: () => void;\n}) {\n  const { courseId, lesson, cards, runningLesson, setRunningLesson, logsByLesson, setLogsByLesson, previews, setPreviews, selectedIndexes, setSelectedIndexes, hideAiSection, onRefresh } = props;\n\n  // AI SSE runner\n  // Note: do NOT define inline components here to avoid remount loops.\n\n  return (\n    <section className=\"space-y-4\">\n      <h3 className=\"font-medium\">レッスン: {lesson.title}</h3>\n\n      {/* AI 生成（上部 LessonTools と重複させないオプション） */}\n      {!hideAiSection && (\n      <div className=\"rounded-md border border-[hsl(var(--border))] p-3\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"text-sm text-gray-700\">AIでこのレッスンのカードを生成</div>\n          <Button size=\"sm\" onClick={() => setRunningLesson(lesson)} disabled={!!runningLesson && runningLesson.id === lesson.id}>\n            {runningLesson?.id === lesson.id ? \"生成中…\" : \"AIで生成\"}\n          </Button>\n        </div>\n        {runningLesson?.id === lesson.id && (\n          <LessonCardsRunner\n            lessonId={lesson.id}\n            lessonTitle={lesson.title}\n            onLog={(id, text) => setLogsByLesson((m) => ({ ...m, [id]: [...(m[id] ?? []), { ts: Date.now(), text }] }))}\n            onPreview={(id, draftId, payload) => setPreviews((prev) => ({ ...prev, [id]: { draftId, payload } }))}\n            onFinish={() => setRunningLesson(null)}\n          />\n        )}\n        <SSETimeline logs={logsByLesson[lesson.id] ?? []} />\n        {previews[lesson.id] && (\n          <div className=\"mt-3\">\n            <div className=\"text-sm text-gray-600 mb-2\">プレビュー: {previews[lesson.id].payload.cards.length} 件（反映するカードを選択、未選択なら全件）</div>\n            <ol className=\"text-sm space-y-1 list-decimal list-inside\">\n              {previews[lesson.id].payload.cards.map((c, idx) => (\n                <li key={idx} className=\"flex items-center gap-2\">\n                  <input\n                    type=\"checkbox\"\n                    aria-label={`カード #${idx + 1} を選択`}\n                    checked={!!(selectedIndexes[lesson.id]?.[idx])}\n                    onChange={(e) => setSelectedIndexes((m) => ({ ...m, [lesson.id]: { ...(m[lesson.id] || {}), [idx]: e.target.checked } }))}\n                  />\n                  <span className=\"px-1 py-0.5 rounded bg-black/5 mr-2\">{c.type}</span>\n                  {\"title\" in c && c.title ? c.title : c.type === \"text\" ? \"テキスト\" : \"カード\"}\n                </li>\n              ))}\n            </ol>\n            <div className=\"mt-3 flex justify-end gap-2\">\n              <Button\n                onClick={() => {\n                  const p = previews[lesson.id];\n                  if (!p) return;\n                  const selected = selectedIndexes[lesson.id] || {};\n                  const idxs = Object.entries(selected).filter(([, v]) => v).map(([k]) => Number(k));\n                  let ok = false;\n                const res = idxs.length > 0\n                  ? await commitLessonCardsPartial({ draftId: p.draftId, lessonId: lesson.id, selectedIndexes: idxs })\n                  : await commitLessonCards({ draftId: p.draftId, lessonId: lesson.id });\n                if (res) { onRefresh(); }\n                  setPreviews((prev) => { const copy = { ...prev }; delete copy[lesson.id]; return copy; });\n                }}\n              >保存</Button>\n              <Button onClick={() => setPreviews((prev) => { const copy = { ...prev }; delete copy[lesson.id]; return copy; })}>破棄</Button>\n            </div>\n          </div>\n        )}\n      </div>\n      )}\n\n      {/* 手動でカード追加 */}\n      <div className=\"rounded-md border border-[hsl(var(--border))] p-3\">\n        <div className=\"text-sm font-medium mb-2\">新規カード</div>\n        <NewCardForm lessonId={lesson.id} onDone={onRefresh} />\n      </div>\n\n      {/* カード一覧（並び替え/削除） */}\n      <div>\n        <h4 className=\"text-sm text-gray-700 mb-2\">カード一覧</h4>\n        {cards.length === 0 ? (\n          <p className=\"text-sm text-gray-600\">カードがありません。</p>\n        ) : (\n          <SortableList\n            ids={cards.map((c) => c.id)}\n            label=\"カードの並び替え\"\n            onReorder={async (ids) => { await reorderCards(lesson.id, ids); onRefresh(); }}\n            renderItem={(id) => {\n              const c = cards.find((x) => x.id === id);\n              if (!c) return <div className=\"text-xs text-gray-400\">更新中…</div>;\n              return (\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"px-1 py-0.5 rounded bg-black/5 text-xs\">{c.cardType}</span>\n                  <span className=\"flex-1 truncate\">{c.title || labelCard(c)}</span>\n                  <Confirm\n                    title=\"このカードを削除しますか？\"\n                    description=\"この操作は元に戻せません。学習履歴も削除されます。\"\n                    confirmLabel=\"削除する\"\n                    cancelLabel=\"キャンセル\"\n                    onConfirm={async () => { await deleteCard(c.id); onRefresh(); }}\n                  >\n                    <Button variant=\"destructive\" size=\"sm\">削除</Button>\n                  </Confirm>\n                </div>\n              );\n            }}\n          />\n        )}\n      </div>\n    </section>\n  );\n}\n\nfunction labelCard(card: Card): string {\n  if (card.cardType === \"text\") return (card.content as any).body?.slice(0, 18) ?? \"テキスト\";\n  if (card.cardType === \"quiz\") return (card.content as any).question ?? \"クイズ\";\n  return (card.content as any).text?.replace(/\\[\\[(\\d+)\\]\\]/g, \"□\") ?? \"穴埋め\";\n}\n\nfunction NewCardForm({ lessonId, onDone }: { lessonId: UUID; onDone: () => void }) {\n  const [type, setType] = React.useState<CardType>(\"text\");\n  const [title, setTitle] = React.useState(\"\");\n  const [body, setBody] = React.useState(\"\");\n  const [question, setQuestion] = React.useState(\"\");\n  const [options, setOptions] = React.useState(\"\");\n  const [answerIndex, setAnswerIndex] = React.useState(0);\n  const [explanation, setExplanation] = React.useState(\"\");\n  const [text, setText] = React.useState(\"\");\n  const [answers, setAnswers] = React.useState(\"1:answer\");\n  const [caseSensitive, setCaseSensitive] = React.useState(false);\n\n  return (\n    <form\n      onSubmit={async (e) => {\n        e.preventDefault();\n        if (type === \"text\") {\n          if (!body.trim()) return alert(\"本文は必須です\");\n          await addCard(lessonId, { cardType: \"text\", title: title || null, content: { body } });\n        } else if (type === \"quiz\") {\n          const opts = options.split(\"\\n\").map((s) => s.trim()).filter(Boolean);\n          if (!question.trim() || opts.length < 2) return alert(\"設問と選択肢2つ以上が必要です\");\n          await addCard(lessonId, { cardType: \"quiz\", title: title || null, content: { question, options: opts, answerIndex: Math.max(0, Math.min(answerIndex, opts.length - 1)), explanation: explanation || undefined } });\n        } else {\n          const obj: Record<string, string> = {};\n          answers.split(\"\\n\").map((s) => s.trim()).filter(Boolean).forEach((line) => {\n            const [k, ...rest] = line.split(\":\");\n            const v = rest.join(\":\").trim();\n            if (k && v) obj[k.trim()] = v;\n          });\n          if (!text.trim() || Object.keys(obj).length === 0) return alert(\"テキストと回答（例: 1:answer）を入力してください\");\n          await addCard(lessonId, { cardType: \"fill-blank\", title: title || null, content: { text, answers: obj, caseSensitive } });\n        }\n        setTitle(\"\"); setBody(\"\"); setQuestion(\"\"); setOptions(\"\"); setAnswerIndex(0); setExplanation(\"\"); setText(\"\"); setAnswers(\"1:answer\"); setCaseSensitive(false);\n        onDone();\n      }}\n      className=\"space-y-3\"\n    >\n      <div className=\"flex gap-3 items-center\">\n        <label className=\"text-sm\">タイプ</label>\n        <Select value={type} onChange={(e) => setType(e.target.value as CardType)} className=\"max-w-[160px]\">\n          <option value=\"text\">Text</option>\n          <option value=\"quiz\">Quiz</option>\n          <option value=\"fill-blank\">Fill‑blank</option>\n        </Select>\n        <Input value={title} onChange={(e) => setTitle(e.target.value)} placeholder=\"タイトル（任意）\" className=\"flex-1\" />\n      </div>\n      {type === \"text\" && (\n        <div>\n          <label className=\"block text-sm mb-1\">本文</label>\n          <Textarea value={body} onChange={(e) => setBody(e.target.value)} />\n        </div>\n      )}\n      {type === \"quiz\" && (\n        <div className=\"grid grid-cols-1 gap-2\">\n          <div>\n            <label className=\"block text-sm mb-1\">設問</label>\n            <Input value={question} onChange={(e) => setQuestion(e.target.value)} />\n          </div>\n          <div>\n            <label className=\"block text-sm mb-1\">選択肢（改行区切り）</label>\n            <Textarea value={options} onChange={(e) => setOptions(e.target.value)} />\n          </div>\n          <div>\n            <label className=\"block text-sm mb-1\">正解インデックス（0開始）</label>\n            <Input type=\"number\" value={answerIndex} onChange={(e) => setAnswerIndex(Number(e.target.value))} />\n          </div>\n          <div>\n            <label className=\"block text-sm mb-1\">解説（任意）</label>\n            <Input value={explanation} onChange={(e) => setExplanation(e.target.value)} />\n          </div>\n        </div>\n      )}\n      {type === \"fill-blank\" && (\n        <div className=\"grid grid-cols-1 gap-2\">\n          <div>\n            <label className=\"block text-sm mb-1\">テキスト（[[1]] の形式で空所）</label>\n            <Textarea value={text} onChange={(e) => setText(e.target.value)} />\n          </div>\n          <div>\n            <label className=\"block text-sm mb-1\">回答（例: 1:answer 改行区切り）</label>\n            <Textarea value={answers} onChange={(e) => setAnswers(e.target.value)} />\n          </div>\n          <label className=\"inline-flex items-center gap-2\">\n            <input type=\"checkbox\" checked={caseSensitive} onChange={(e) => setCaseSensitive(e.target.checked)} />\n            <span className=\"text-sm\">大文字小文字を区別</span>\n          </label>\n        </div>\n      )}\n      <div className=\"flex justify-end\">\n        <Button type=\"submit\">追加</Button>\n      </div>\n    </form>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/workspace/NavTree.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useMemo has an unnecessary dependency: 'dbv'. Either exclude it or remove the dependency array.","line":34,"column":82,"nodeType":"ArrayExpression","endLine":34,"endColumn":97,"suggestions":[{"desc":"Update the dependencies array to be: [courseId]","fix":{"range":[1487,1502],"text":"[courseId]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useMemo has an unnecessary dependency: 'dbv'. Either exclude it or remove the dependency array.","line":97,"column":6,"nodeType":"ArrayExpression","endLine":97,"endColumn":85,"suggestions":[{"desc":"Update the dependencies array to be: [courses, expanded, q, typeFilter, onlyFlagged, onlyUnlearned, flaggedSet]","fix":{"range":[4291,4370],"text":"[courses, expanded, q, typeFilter, onlyFlagged, onlyUnlearned, flaggedSet]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useMemo has an unnecessary dependency: 'dbv'. Either exclude it or remove the dependency array.","line":109,"column":6,"nodeType":"ArrayExpression","endLine":109,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [lessons]","fix":{"range":[4781,4795],"text":"[lessons]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'e' is defined but never used.","line":123,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":231,"column":104,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":107,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9205,9208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9205,9208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":475,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":475,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18991,18994],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18991,18994],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":476,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":476,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19041,19044],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19041,19044],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport * as React from \"react\";\nimport { useVirtualizer } from \"@tanstack/react-virtual\";\nimport { listLessons, listCards, listFlaggedByCourse, getProgress, listCourses, useLocalDbVersion } from \"@/lib/localdb\";\nimport type { UUID, Card, Lesson, CardType, Course } from \"@/lib/types\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select } from \"@/components/ui/select\";\nimport { ProgressRing } from \"@/components/ui/progress-ring\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n} from \"@/components/ui/dropdown-menu\";\n\ntype Props = {\n  courseId: UUID;\n  selectedId?: UUID;\n  onSelect: (id: UUID, kind: \"course\" | \"lesson\" | \"card\" | \"lesson-edit\") => void;\n};\n\nexport function NavTree({ courseId, selectedId, onSelect }: Props) {\n  // DB変更に追従\n  const dbv = useLocalDbVersion();\n  const [q, setQ] = React.useState(\"\");\n  const [courses, setCourses] = React.useState<Course[]>([]);\n  const [lessons, setLessons] = React.useState<Lesson[]>([]);\n  const [expanded, setExpanded] = React.useState<Record<string, boolean>>({});\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const [typeFilter, setTypeFilter] = React.useState<\"all\" | CardType>(\"all\");\n  const [onlyFlagged, setOnlyFlagged] = React.useState(false);\n  const [onlyUnlearned, setOnlyUnlearned] = React.useState(false);\n  const flaggedSet = React.useMemo(() => new Set(listFlaggedByCourse(courseId)), [courseId, dbv]);\n\n  // ロービング tabindex 用の\"アクティブ\"項目管理\n  const [activeId, setActiveId] = React.useState<string | undefined>(undefined);\n\n  React.useEffect(() => {\n    setCourses(listCourses());\n    setLessons(listLessons(courseId));\n    // 初期表示では現在のコースを展開\n    setExpanded((m) => (m[`co:${courseId}`] ? m : { ...m, [`co:${courseId}`]: true }));\n  }, [courseId, dbv]);\n\n  // 可視行をフラット化\n  type Row = { key: string; type: \"course\" | \"lesson\" | \"card\"; id: string; level: number; title: string; tags?: string[]; completed?: boolean; expanded?: boolean };\n  const rows: Row[] = React.useMemo(() => {\n    const out: Row[] = [];\n    const match = (s: string) => (q ? s.toLowerCase().includes(q.toLowerCase()) : true);\n    // コース → レッスン → カード\n    courses.forEach((co) => {\n      // 子どもに検索/フィルタがかかっていれば親は表示\n      const ls = listLessons(co.id);\n      const hasChild = ls.some((l) => {\n        const cs = listCards(l.id);\n        return (\n          match(l.title) ||\n          cs.some((c) => {\n            if (typeFilter !== \"all\" && c.cardType !== typeFilter) return false;\n            if (onlyFlagged && !flaggedSet.has(c.id)) return false;\n            if (onlyUnlearned && getProgress(c.id)?.completed) return false;\n            return match(c.title ?? \"\") || match(c.cardType);\n          })\n        );\n      });\n      if (!(match(co.title) || hasChild)) return;\n\n      out.push({ key: `co:${co.id}`, type: \"course\", id: co.id, level: 1, title: co.title, expanded: !!expanded[`co:${co.id}`] });\n      if (expanded[`co:${co.id}`]) {\n        ls.forEach((l) => {\n          const childAny = (() => {\n            const cs = listCards(l.id);\n            return cs.some((c) => {\n              if (typeFilter !== \"all\" && c.cardType !== typeFilter) return false;\n              if (onlyFlagged && !flaggedSet.has(c.id)) return false;\n              if (onlyUnlearned && getProgress(c.id)?.completed) return false;\n              return match(c.title ?? \"\") || match(c.cardType);\n            });\n          })();\n          if (!(match(l.title) || childAny)) return;\n          out.push({ key: `l:${l.id}`, type: \"lesson\", id: l.id, level: 2, title: l.title, expanded: !!expanded[`le:${l.id}`] });\n          if (expanded[`le:${l.id}`]) {\n            const cs = listCards(l.id);\n            cs.forEach((c) => {\n              if (typeFilter !== \"all\" && c.cardType !== typeFilter) return;\n              if (onlyFlagged && !flaggedSet.has(c.id)) return;\n              if (onlyUnlearned && getProgress(c.id)?.completed) return;\n              if (match(c.title ?? \"\") || match(c.cardType))\n                out.push({ key: `c:${c.id}`, type: \"card\", id: c.id, level: 3, title: labelForCard(c), tags: c.tags ?? [], completed: !!getProgress(c.id)?.completed });\n            });\n          }\n        });\n      }\n    });\n    return out;\n  }, [courses, expanded, q, typeFilter, onlyFlagged, onlyUnlearned, flaggedSet, dbv]);\n\n  // レッスン単位の進捗率\n  const lessonProgress = React.useMemo(() => {\n    const map = new Map<string, number>();\n    for (const l of lessons) {\n      const cs = listCards(l.id);\n      if (cs.length === 0) { map.set(l.id, 0); continue; }\n      const done = cs.reduce((acc, c) => acc + (getProgress(c.id)?.completed ? 1 : 0), 0);\n      map.set(l.id, Math.round((done / cs.length) * 100));\n    }\n    return map;\n  }, [lessons, dbv]);\n\n  // バーチャルリスト（@tanstack/react-virtual）\n  const COURSE_H = 40; // px\n  const LESSON_H = 36; // px\n  const CARD_H = 28; // px\n  const rowVirtualizer = useVirtualizer({\n    count: rows.length,\n    getScrollElement: () => containerRef.current,\n    estimateSize: (index) => (rows[index]?.type === \"course\" ? COURSE_H : rows[index]?.type === \"lesson\" ? LESSON_H : CARD_H),\n    overscan: 6,\n  });\n\n  // 初回フォーカス時に先頭へロービング\n  const onTreeFocus = (e: React.FocusEvent) => {\n    if (!containerRef.current) return;\n    const hasFocusedItem = !!containerRef.current.querySelector('[role=\"treeitem\"][tabindex=\"0\"]');\n    if (!hasFocusedItem && rows.length) setActiveId(rows[0].id);\n  };\n\n  // APG 準拠のキーボードモデル\n  const onKeyDown = (e: React.KeyboardEvent) => {\n    if (!rows.length) return;\n    const idx = rows.findIndex((r) => r.id === activeId);\n    const cur = rows[Math.max(0, idx)];\n    switch (e.key) {\n      case \"ArrowDown\": {\n        e.preventDefault();\n        const nextIndex = Math.min(rows.length - 1, Math.max(0, idx + 1));\n        const next = rows[nextIndex];\n        setActiveId(next.id);\n        rowVirtualizer.scrollToIndex(nextIndex, { align: \"auto\" });\n        break;\n      }\n      case \"ArrowUp\": {\n        e.preventDefault();\n        const prevIndex = Math.max(0, idx - 1);\n        const prev = rows[prevIndex];\n        setActiveId(prev.id);\n        rowVirtualizer.scrollToIndex(prevIndex, { align: \"auto\" });\n        break;\n      }\n      case \"Home\": {\n        e.preventDefault();\n        setActiveId(rows[0].id);\n        rowVirtualizer.scrollToIndex(0, { align: \"start\" });\n        break;\n      }\n      case \"End\": {\n        e.preventDefault();\n        const last = rows.length - 1;\n        setActiveId(rows[last].id);\n        rowVirtualizer.scrollToIndex(last, { align: \"end\" });\n        break;\n      }\n      case \"ArrowRight\": {\n        if (cur?.type === \"course\") {\n          const k = `co:${cur.id}`;\n          const isOpen = !!expanded[k];\n          if (!isOpen) { e.preventDefault(); setExpanded((m) => ({ ...m, [k]: true })); }\n        } else if (cur?.type === \"lesson\") {\n          const k = `le:${cur.id}`;\n          const isOpen = !!expanded[k];\n          if (!isOpen) {\n            e.preventDefault();\n            setExpanded((m) => ({ ...m, [k]: true }));\n          } else {\n            // 最初の子へ\n            const next = rows[idx + 1];\n            if (next?.type === \"card\") {\n              e.preventDefault();\n              setActiveId(next.id);\n              rowVirtualizer.scrollToIndex(idx + 1, { align: \"auto\" });\n            }\n          }\n        }\n        break;\n      }\n      case \"ArrowLeft\": {\n        if (cur?.type === \"course\") {\n          const k = `co:${cur.id}`;\n          const isOpen = !!expanded[k];\n          if (isOpen) { e.preventDefault(); setExpanded((m) => ({ ...m, [k]: false })); }\n        } else if (cur?.type === \"lesson\") {\n          const k = `le:${cur.id}`;\n          const isOpen = !!expanded[k];\n          if (isOpen) { e.preventDefault(); setExpanded((m) => ({ ...m, [k]: false })); }\n        } else if (cur?.type === \"card\") {\n          // 親のレッスンへ移動\n          for (let i = idx - 1; i >= 0; i--) {\n            if (rows[i].type === \"lesson\") { e.preventDefault(); setActiveId(rows[i].id); rowVirtualizer.scrollToIndex(i, { align: \"auto\" }); break; }\n          }\n        }\n        break;\n      }\n      case \"Enter\": {\n        e.preventDefault();\n        if (cur) onSelect(cur.id as UUID, cur.type);\n        break;\n      }\n      case \" \": {\n        if (cur?.type === \"course\") {\n          e.preventDefault();\n          setExpanded((m) => ({ ...m, [`co:${cur.id}`]: !m[`co:${cur.id}`] }));\n        } else if (cur?.type === \"lesson\") {\n          e.preventDefault();\n          setExpanded((m) => ({ ...m, [`le:${cur.id}`]: !m[`le:${cur.id}`] }));\n        }\n        break;\n      }\n    }\n  };\n\n  return (\n    <aside className=\"h-full flex flex-col\">\n      <div className=\"p-2 border-b grid grid-cols-1 gap-2\">\n        <div>\n          <label className=\"sr-only\" htmlFor=\"tree-search\">検索</label>\n          <Input id=\"tree-search\" value={q} onChange={(e) => setQ(e.target.value)} placeholder=\"検索（タイトル/タイプ）\" />\n        </div>\n        <div className=\"flex items-center gap-2 text-xs\">\n          <label className=\"text-gray-600\" htmlFor=\"type-filter\">種類</label>\n          <Select id=\"type-filter\" value={typeFilter} onChange={(e) => setTypeFilter(e.target.value as any)} className=\"max-w-[140px]\">\n            <option value=\"all\">すべて</option>\n            <option value=\"text\">Text</option>\n            <option value=\"quiz\">Quiz</option>\n            <option value=\"fill-blank\">Fill‑blank</option>\n          </Select>\n          <label className=\"inline-flex items-center gap-1 ml-2\">\n            <input type=\"checkbox\" checked={onlyFlagged} onChange={(e) => setOnlyFlagged(e.target.checked)} />\n            フラグのみ\n          </label>\n          <label className=\"inline-flex items-center gap-1 ml-2\">\n            <input type=\"checkbox\" checked={onlyUnlearned} onChange={(e) => setOnlyUnlearned(e.target.checked)} />\n            未学習のみ\n          </label>\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        role=\"tree\"\n        aria-label=\"コース構造\"\n        className=\"flex-1 overflow-auto py-2\"\n        onKeyDown={onKeyDown}\n        onFocus={onTreeFocus}\n        tabIndex={0}\n      >\n        <div style={{ height: rowVirtualizer.getTotalSize(), position: \"relative\" }}>\n          {rowVirtualizer.getVirtualItems().map((vi) => {\n            const r = rows[vi.index];\n            return (\n              <div\n                key={r.key}\n                style={{ position: \"absolute\", top: 0, left: 0, right: 0, transform: `translateY(${vi.start}px)` }}\n              >\n                {r.type === \"course\" ? (\n                  <TreeCourseRow\n                    id={r.id}\n                    title={r.title}\n                    level={1}\n                    expanded={!!expanded[`co:${r.id}`]}\n                    selected={r.id === courseId}\n                    active={activeId === r.id}\n                    onClick={() => onSelect(r.id as UUID, \"course\")}\n                    onToggle={() => setExpanded((m) => ({ ...m, [`co:${r.id}`]: !m[`co:${r.id}`] }))}\n                    onActive={() => setActiveId(r.id)}\n                  />\n                ) : r.type === \"lesson\" ? (\n                  <TreeLessonRow\n                    id={r.id}\n                    title={r.title}\n                    level={2}\n                    expanded={!!expanded[`le:${r.id}`]}\n                    selected={selectedId === r.id}\n                    active={activeId === r.id}\n                    progressPct={lessonProgress.get(r.id) ?? 0}\n                    onClick={() => onSelect(r.id as UUID, \"lesson\")}\n                    onToggle={() => setExpanded((m) => ({ ...m, [`le:${r.id}`]: !m[`le:${r.id}`] }))}\n                    onActive={() => setActiveId(r.id)}\n                    onEdit={() => onSelect(r.id as UUID, \"lesson-edit\")}\n                  />\n                ) : (\n                  <TreeCardRow\n                    id={r.id}\n                    title={r.title}\n                    level={3}\n                    selected={selectedId === r.id}\n                    active={activeId === r.id}\n                    tags={r.tags ?? []}\n                    completed={!!r.completed}\n                    onClick={() => onSelect(r.id as UUID, \"card\")}\n                    onActive={() => setActiveId(r.id)}\n                  />\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </aside>\n  );\n}\n\nfunction Chevron({ open, size = 18 }: { open: boolean; size?: number }) {\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 24 24\"\n      aria-hidden\n      className={`transition-transform ${open ? \"rotate-90\" : \"rotate-0\"}`}\n    >\n      <path d=\"M8 5l8 7-8 7\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\n    </svg>\n  );\n}\n\n// 行頭アイコンは不要要件のため削除（Chevron=開閉トグルのみ残す）\n\nfunction TreeCourseRow({ id, title, level, expanded, selected, active, onClick, onToggle, onActive }:{\n  id: string;\n  title: string;\n  level: number;\n  expanded: boolean;\n  selected: boolean; // current course\n  active: boolean;\n  onClick: () => void;\n  onToggle: () => void;\n  onActive: () => void;\n}) {\n  return (\n    <div className=\"px-2\" style={{ paddingLeft: (level - 1) * 14 }}>\n      <div\n        role=\"treeitem\"\n        aria-level={level}\n        aria-expanded={expanded}\n        aria-selected={selected}\n        tabIndex={active ? 0 : -1}\n        data-id={id}\n        data-type=\"course\"\n        onFocus={onActive}\n        onClick={onClick}\n        className=\"group relative flex items-center gap-2 h-10 px-2 rounded hover:bg-[hsl(var(--accent))] focus-visible:bg-[hsl(var(--accent))] cursor-pointer data-[sel=true]:bg-[hsl(var(--accent))] data-[sel=true]:ring-1 data-[sel=true]:ring-[hsl(var(--primary))]/30 transition-colors\"\n        data-sel={selected}\n      >\n        <span aria-hidden className=\"pointer-events-none absolute left-0 top-1 bottom-1 w-1 rounded bg-[hsl(var(--primary))]/30 origin-left scale-x-0 group-hover:scale-x-100 group-focus-within:scale-x-100 transition-transform duration-150\" />\n        <button\n          aria-label={expanded ? \"折りたたむ\" : \"展開\"}\n          onClick={(e) => { e.stopPropagation(); onToggle(); }}\n          className=\"inline-flex items-center justify-center size-6 rounded hover:bg-black/5\"\n        >\n          <Chevron open={expanded} />\n        </button>\n        <span className=\"truncate font-semibold\">{title}</span>\n      </div>\n    </div>\n  );\n}\n\nfunction TreeLessonRow({ id, title, level, expanded, selected, active, progressPct, onClick, onToggle, onActive, onEdit }:{\n  id: string;\n  title: string;\n  level: number;\n  expanded: boolean;\n  selected: boolean;\n  active: boolean;\n  progressPct: number;\n  onClick: () => void;\n  onToggle: () => void;\n  onActive: () => void;\n  onEdit: () => void;\n}) {\n  return (\n    <div className=\"px-2\" style={{ paddingLeft: (level - 1) * 14 }}>\n      <div\n        role=\"treeitem\"\n        aria-level={level}\n        aria-expanded={expanded}\n        aria-selected={selected}\n        tabIndex={active ? 0 : -1}\n        data-id={id}\n        data-type=\"lesson\"\n        onFocus={onActive}\n        onClick={onClick}\n        className=\"group relative flex items-center gap-2 h-9 px-2 rounded hover:bg-[hsl(var(--accent))] focus-visible:bg-[hsl(var(--accent))] cursor-pointer data-[sel=true]:bg-[hsl(var(--accent))] data-[sel=true]:ring-1 data-[sel=true]:ring-[hsl(var(--primary))]/30 transition-colors\"\n        data-sel={selected}\n      >\n        <span aria-hidden className=\"pointer-events-none absolute left-0 top-1 bottom-1 w-1 rounded bg-[hsl(var(--primary))]/30 origin-left scale-x-0 group-hover:scale-x-100 group-focus-within:scale-x-100 transition-transform duration-150\" />\n        <button\n          aria-label={expanded ? \"折りたたむ\" : \"展開\"}\n          onClick={(e) => { e.stopPropagation(); onToggle(); }}\n          className=\"inline-flex items-center justify-center size-6 rounded hover:bg-black/5\"\n        >\n          <Chevron open={expanded} />\n        </button>\n        <ProgressRing value={progressPct} size={14} stroke={2} title={`完了 ${progressPct}%`} />\n        <span className=\"truncate font-medium flex-1\">{title}</span>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <button\n              aria-label=\"レッスンメニュー\"\n              className=\"inline-flex items-center justify-center size-6 rounded hover:bg-black/5 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-[hsl(var(--primary))]\"\n              onClick={(e) => e.stopPropagation()}\n            >\n              <span aria-hidden>⋯</span>\n            </button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuItem\n              onSelect={() => onEdit()}\n              onClick={(e) => { e.preventDefault(); e.stopPropagation(); onEdit(); }}\n            >\n              レッスンを編集（AI生成）\n            </DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n    </div>\n  );\n}\n\nfunction TreeCardRow({ id, title, level, selected, active, tags, completed, onClick, onActive }:{\n  id: string;\n  title: string;\n  level: number;\n  selected: boolean;\n  active: boolean;\n  tags: string[];\n  completed: boolean;\n  onClick: () => void;\n  onActive: () => void;\n}) {\n  return (\n    <div role=\"group\" className=\"\">\n      <div className=\"px-2\" style={{ paddingLeft: (level - 1) * 14 }}>\n        <div\n          role=\"treeitem\"\n          aria-level={level}\n          aria-selected={selected}\n          tabIndex={active ? 0 : -1}\n          data-id={id}\n          data-type=\"card\"\n          onFocus={onActive}\n          onClick={onClick}\n          className=\"group relative flex items-center gap-2 h-7 px-2 rounded hover:bg-[hsl(var(--accent))] focus-visible:bg-[hsl(var(--accent))] cursor-pointer data-[sel=true]:bg-[hsl(var(--accent))] data-[sel=true]:ring-1 data-[sel=true]:ring-[hsl(var(--primary))]/30 transition-colors\"\n          data-sel={selected}\n        >\n          <span aria-hidden className=\"pointer-events-none absolute left-0 top-1 bottom-1 w-1 rounded bg-[hsl(var(--primary))]/30 origin-left scale-x-0 group-hover:scale-x-100 group-focus-within:scale-x-100 transition-transform duration-150\" />\n          <ProgressRing value={completed ? 100 : 0} size={12} stroke={2} title={completed ? \"完了\" : \"未完了\"} />\n          <span className=\"truncate\">{title}</span>\n          {tags?.length ? (\n            <span className=\"ml-2 flex items-center gap-1 overflow-hidden\">\n              {tags.slice(0, 3).map((t, i) => (\n                <Badge key={i} variant=\"secondary\" className=\"text-[10px] px-1 py-0\">{t}</Badge>\n              ))}\n              {tags.length > 3 ? <Badge variant=\"secondary\" className=\"text-[10px] px-1 py-0\">+{tags.length - 3}</Badge> : null}\n            </span>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction labelForCard(card: Card): string {\n  if (card.cardType === \"text\") return \"テキスト\";\n  if (card.cardType === \"quiz\") return (card.content as any).question ?? \"クイズ\";\n  return (card.content as any).text?.replace(/\\[\\[(\\d+)\\]\\]/g, \"□\") ?? \"穴埋め\";\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/workspace/Skeletons.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/components/workspace/WorkspaceShell.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2197,2200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2197,2200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3823,3826],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3823,3826],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4844,4847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4844,4847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6748,6751],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6748,6751],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7178,7181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7178,7181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":172,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":172,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7932,7935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7932,7935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport * as React from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport type { UUID } from \"@/lib/types\";\nimport { Header } from \"@/components/ui/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { ResizablePanelGroup, ResizablePanel, ResizableHandle } from \"@/components/ui/resizable\";\nimport dynamic from \"next/dynamic\";\nimport { SkeletonNavTree, SkeletonInspector, SkeletonPlayer } from \"@/components/workspace/Skeletons\";\nconst NavTree = dynamic(() => import(\"@/components/workspace/NavTree\").then((m) => m.NavTree), { ssr: false, loading: () => <SkeletonNavTree /> });\nconst Inspector = dynamic(() => import(\"@/components/workspace/Inspector\").then((m) => m.Inspector), { ssr: false, loading: () => <SkeletonInspector /> });\nconst CardPlayer = dynamic(() => import(\"@/components/workspace/CardPlayer\").then((m) => m.CardPlayer), { ssr: false, loading: () => <SkeletonPlayer /> });\nimport { Sheet, SheetContent, SheetHeader, SheetTrigger } from \"@/components/ui/sheet\";\nimport { listCards } from \"@/lib/localdb\";\n\ntype Props = { courseId: UUID; defaultLayout?: number[]; cookieKey?: string };\n\nexport function WorkspaceShell({ courseId, defaultLayout, cookieKey }: Props) {\n  const router = useRouter();\n  const [selId, setSelId] = React.useState<string | undefined>(undefined);\n  const [selKind, setSelKind] = React.useState<\"lesson\" | \"card\" | undefined>(undefined);\n  const [openNav, setOpenNav] = React.useState(false);\n  const [openInspector, setOpenInspector] = React.useState(false);\n\n  return (\n    <div className=\"min-h-screen\">\n      <Header />\n      <main className=\"h-[calc(100vh-56px)]\">\n        <div className=\"hidden md:block h-full\">\n          <ResizablePanelGroup\n            direction=\"horizontal\"\n            autoSaveId={`workspace:${courseId}`}\n            onLayout={(sizes) => {\n              if (cookieKey) document.cookie = `${cookieKey}=${JSON.stringify(sizes)}; path=/; max-age=${60 * 60 * 24 * 365}`;\n            }}\n          >\n            <ResizablePanel defaultSize={defaultLayout?.[0] ?? 24} minSize={16} className=\"border-r\">\n              <NavTree\n                courseId={courseId}\n                selectedId={selId as any}\n                onSelect={(id, kind) => {\n                  if (kind === \"course\") {\n                    if (id !== courseId) {\n                      router.push(`/courses/${id}/workspace`);\n                    } else {\n                      setSelId(undefined);\n                      setSelKind(undefined);\n                    }\n                    return;\n                  }\n                  if (kind === \"lesson-edit\") {\n                    setSelId(id);\n                    setSelKind(\"lesson\");\n                    return;\n                  }\n                  if (kind === \"lesson\") {\n                    const first = listCards(id)[0];\n                    if (first) { setSelId(first.id); setSelKind(\"card\"); }\n                    else { setSelId(undefined); setSelKind(undefined); }\n                  } else {\n                    setSelId(id);\n                    setSelKind(\"card\");\n                  }\n                }}\n              />\n            </ResizablePanel>\n            <ResizableHandle withHandle aria-label=\"ナビをリサイズ\" />\n            <ResizablePanel defaultSize={defaultLayout?.[1] ?? 48} minSize={40} className=\"\">\n              <CenterPanel\n                courseId={courseId}\n                selId={selId}\n                selKind={selKind}\n                onNavigate={(id) => { setSelId(id); setSelKind(\"card\"); }}\n              />\n            </ResizablePanel>\n            <ResizableHandle withHandle aria-label=\"エディタをリサイズ\" />\n            <ResizablePanel defaultSize={defaultLayout?.[2] ?? 28} minSize={18} className=\"border-l\">\n              <Inspector courseId={courseId} selectedId={selId as any} selectedKind={selKind} />\n            </ResizablePanel>\n          </ResizablePanelGroup>\n        </div>\n\n        <div className=\"md:hidden h-full\">\n          <div className=\"px-3 py-2 border-b flex items-center justify-between\">\n            <div className=\"font-medium\">学習ワークスペース</div>\n            <div className=\"flex items-center gap-2\">\n              <Sheet open={openNav} onOpenChange={setOpenNav}>\n                <SheetTrigger asChild>\n                  <Button aria-label=\"メニュー\" size=\"sm\">メニュー</Button>\n                </SheetTrigger>\n                <SheetContent side=\"left\" aria-label=\"ナビ\">\n                  <SheetHeader>\n                    <div className=\"font-medium\">コース構造</div>\n                    <Button onClick={() => setOpenNav(false)} size=\"sm\" variant=\"outline\">閉じる</Button>\n                  </SheetHeader>\n                  <div className=\"h-[calc(100vh-120px)] overflow-auto\">\n                    <NavTree\n                      courseId={courseId}\n                      selectedId={selId as any}\n                      onSelect={(id, kind) => {\n                        if (kind === \"course\") {\n                          setOpenNav(false);\n                          if (id !== courseId) router.push(`/courses/${id}/workspace`);\n                          else { setSelId(undefined); setSelKind(undefined); }\n                          return;\n                        }\n                        if (kind === \"lesson-edit\") {\n                          setSelId(id);\n                          setSelKind(\"lesson\");\n                          setOpenNav(false);\n                          setOpenInspector(true);\n                          return;\n                        }\n                        if (kind === \"lesson\") {\n                          const first = listCards(id)[0];\n                          if (first) { setSelId(first.id); setSelKind(\"card\"); }\n                          else { setSelId(undefined); setSelKind(undefined); }\n                        } else {\n                          setSelId(id);\n                          setSelKind(\"card\");\n                        }\n                        setOpenNav(false);\n                      }}\n                    />\n                  </div>\n                </SheetContent>\n              </Sheet>\n              <Sheet open={openInspector} onOpenChange={setOpenInspector}>\n                <SheetTrigger asChild>\n                  <Button aria-label=\"編集\" size=\"sm\">編集</Button>\n                </SheetTrigger>\n                <SheetContent side=\"right\" aria-label=\"編集\">\n                  <SheetHeader>\n                    <div className=\"font-medium\">インスペクタ</div>\n                    <Button onClick={() => setOpenInspector(false)} size=\"sm\" variant=\"outline\">閉じる</Button>\n                  </SheetHeader>\n                  <div className=\"h-[calc(100vh-120px)] overflow-auto\">\n                    <Inspector courseId={courseId} selectedId={selId as any} selectedKind={selKind} />\n                  </div>\n                </SheetContent>\n              </Sheet>\n            </div>\n          </div>\n          <div className=\"h-[calc(100vh-98px)] overflow-auto p-3\">\n            {!selId ? (\n              <p className=\"text-sm text-gray-700\">メニューからカードを選択してください。</p>\n            ) : (\n              <CardPlayer\n                courseId={courseId}\n                selectedId={selId as any}\n                selectedKind={selKind}\n                onNavigate={(id) => { setSelId(id); setSelKind(\"card\"); }}\n              />\n            )}\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nfunction CenterPanel({ courseId, selId, selKind, onNavigate }: { courseId: UUID; selId?: string; selKind?: \"lesson\"|\"card\"; onNavigate: (id: UUID) => void }) {\n  return (\n    <div className=\"h-full p-4 overflow-auto\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <h1 className=\"text-lg font-semibold\">学習ワークスペース</h1>\n        <div />\n      </div>\n      {!selId ? (\n        <p className=\"text-sm text-gray-700\">左のナビからカードを選択すると、ここで学習できます。</p>\n      ) : (\n        <CardPlayer courseId={courseId} selectedId={selId as any} selectedKind={selKind} onNavigate={onNavigate} />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/ai/mock.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/ai/mock.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/data.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CardType' is defined but never used.","line":2,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[960,963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[960,963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport type { UUID, CardType } from \"@/lib/types\";\nimport { draftsPut, draftsGet, draftsDelete, type DraftRow } from \"@/lib/idb\";\nimport { updateCard } from \"@/lib/localdb\";\n\n// Inspector 用の下書き保存 + 公開\n\nexport type SaveCardDraftInput =\n  | { cardId: UUID; cardType: \"text\"; title?: string | null; tags?: string[]; body: string }\n  | { cardId: UUID; cardType: \"quiz\"; title?: string | null; tags?: string[]; question: string; options: string[]; answerIndex: number; explanation?: string | null }\n  | { cardId: UUID; cardType: \"fill-blank\"; title?: string | null; tags?: string[]; text: string; answers: Record<string, string>; caseSensitive?: boolean };\n\nexport async function saveCardDraft(input: SaveCardDraftInput): Promise<{ updatedAt: string }> {\n  const key = `card:${input.cardId}`;\n  const updatedAt = new Date().toISOString();\n  const row: DraftRow = {\n    key,\n    cardId: input.cardId,\n    cardType: input.cardType,\n    title: (input as any).title ?? null,\n    data: input,\n    updatedAt,\n  };\n  await draftsPut(row);\n  return { updatedAt };\n}\n\nexport async function loadCardDraft(cardId: UUID): Promise<SaveCardDraftInput | undefined> {\n  const row = await draftsGet(`card:${cardId}`);\n  return row?.data as SaveCardDraftInput | undefined;\n}\n\nexport async function publishCard(cardId: UUID): Promise<void> {\n  const row = await draftsGet(`card:${cardId}`);\n  if (!row) return;\n  const d = row.data as SaveCardDraftInput;\n  if (d.cardType === \"text\") {\n    await updateCard(d.cardId, {\n      title: d.title ?? null,\n      tags: d.tags ?? undefined,\n      content: { body: d.body },\n    });\n  } else if (d.cardType === \"quiz\") {\n    await updateCard(d.cardId, {\n      title: d.title ?? null,\n      tags: d.tags ?? undefined,\n      content: {\n        question: d.question,\n        options: d.options,\n        answerIndex: d.answerIndex,\n        explanation: d.explanation ?? undefined,\n      },\n    });\n  } else if (d.cardType === \"fill-blank\") {\n    await updateCard(d.cardId, {\n      title: d.title ?? null,\n      tags: d.tags ?? undefined,\n      content: {\n        text: d.text,\n        answers: d.answers,\n        caseSensitive: d.caseSensitive ?? false,\n      },\n    });\n  }\n  await draftsDelete(`card:${cardId}`);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/db/queries.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[281,284],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[281,284],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[511,514],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[511,514],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[666,669],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[666,669],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2479,2482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2479,2482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":132,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3700,3703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3700,3703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4000,4003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4000,4003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4206,4209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4206,4209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4348,4351],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4348,4351],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient, getCurrentUserId } from \"@/lib/supabase/server\";\nimport type { Course, Lesson, Card, Progress, UUID, SrsEntry } from \"@/lib/types\";\n\n// All functions here run on the server and use the authenticated\n// Supabase session (RLS enforced).\n\nconst mapCourse = (r: any): Course => ({\n  id: r.id,\n  title: r.title,\n  description: r.description ?? undefined,\n  category: r.category ?? undefined,\n  status: r.status,\n  createdAt: r.created_at,\n  updatedAt: r.updated_at,\n});\n\nconst mapLesson = (r: any): Lesson => ({\n  id: r.id,\n  courseId: r.course_id,\n  title: r.title,\n  orderIndex: r.order_index,\n  createdAt: r.created_at,\n});\n\nconst mapCard = (r: any): Card => ({\n  id: r.id,\n  lessonId: r.lesson_id,\n  cardType: r.card_type,\n  title: r.title ?? null,\n  tags: r.tags ?? undefined,\n  content: r.content,\n  orderIndex: r.order_index,\n  createdAt: r.created_at,\n});\n\nexport async function listCourses(): Promise<Course[]> {\n  const supa = await createClient();\n  const { data, error } = await supa\n    .from(\"courses\")\n    .select(\"*\")\n    .order(\"updated_at\", { ascending: false });\n  if (error) throw error;\n  return (data ?? []).map(mapCourse);\n}\n\nexport async function getCourse(courseId: UUID): Promise<Course | undefined> {\n  const supa = await createClient();\n  const { data, error } = await supa\n    .from(\"courses\")\n    .select(\"*\")\n    .eq(\"id\", courseId)\n    .maybeSingle();\n  if (error) throw error;\n  return data ? mapCourse(data) : undefined;\n}\n\nexport async function listLessons(courseId: UUID): Promise<Lesson[]> {\n  const supa = await createClient();\n  const { data, error } = await supa\n    .from(\"lessons\")\n    .select(\"*\")\n    .eq(\"course_id\", courseId)\n    .order(\"order_index\")\n    .order(\"created_at\");\n  if (error) throw error;\n  return (data ?? []).map(mapLesson);\n}\n\nexport async function listCards(lessonId: UUID): Promise<Card[]> {\n  const supa = await createClient();\n  const { data, error } = await supa\n    .from(\"cards\")\n    .select(\"*\")\n    .eq(\"lesson_id\", lessonId)\n    .order(\"order_index\")\n    .order(\"created_at\");\n  if (error) throw error;\n  return (data ?? []).map(mapCard);\n}\n\nexport async function listFlaggedByCourse(courseId: UUID): Promise<UUID[]> {\n  const supa = await createClient();\n  const { data, error } = await supa\n    .from(\"flags\")\n    .select(\"card_id, cards!inner(lesson_id, lessons!inner(course_id))\")\n    .eq(\"cards.lessons.course_id\", courseId);\n  if (error) throw error;\n  return (data ?? []).map((r: any) => r.card_id);\n}\n\nexport async function getProgress(cardId: UUID): Promise<Progress | undefined> {\n  const supa = await createClient();\n  const { data, error } = await supa\n    .from(\"progress\")\n    .select(\"*\")\n    .eq(\"card_id\", cardId)\n    .maybeSingle();\n  if (error) throw error;\n  return data\n    ? {\n        cardId: data.card_id,\n        completed: data.completed,\n        completedAt: data.completed_at ?? undefined,\n        answer: data.answer ?? undefined,\n      }\n    : undefined;\n}\n\nexport async function getNote(cardId: UUID): Promise<string | undefined> {\n  const supa = await createClient();\n  const { data, error } = await supa\n    .from(\"notes\")\n    .select(\"text\")\n    .eq(\"card_id\", cardId)\n    .maybeSingle();\n  if (error) throw error;\n  return data?.text ?? undefined;\n}\n\nexport async function snapshot() {\n  const supa = await createClient();\n\n  const [coursesRes, lessonsRes, cardsRes, progressRes, flagsRes, notesRes] = await Promise.all([\n    supa.from(\"courses\").select(\"*\"),\n    supa.from(\"lessons\").select(\"*\"),\n    supa.from(\"cards\").select(\"*\"),\n    supa.from(\"progress\").select(\"*\"),\n    supa.from(\"flags\").select(\"*\"),\n    supa.from(\"notes\").select(\"*\"),\n  ]);\n\n  const throwIf = (r: any) => { if (r.error) throw r.error; return r.data ?? []; };\n  const courses = throwIf(coursesRes).map(mapCourse) as Course[];\n  const lessons = throwIf(lessonsRes).map(mapLesson) as Lesson[];\n  const cards = throwIf(cardsRes).map(mapCard) as Card[];\n  const progress = throwIf(progressRes).map((p: any) => ({\n    cardId: p.card_id,\n    completed: p.completed,\n    completedAt: p.completed_at ?? undefined,\n    answer: p.answer ?? undefined,\n  })) as Progress[];\n  const flags = throwIf(flagsRes).map((f: any) => ({ cardId: f.card_id, flaggedAt: f.flagged_at })) as { cardId: UUID; flaggedAt: string }[];\n  const notes = throwIf(notesRes).map((n: any) => ({ cardId: n.card_id, text: n.text, updatedAt: n.updated_at })) as { cardId: UUID; text: string; updatedAt: string }[];\n\n  return { courses, lessons, cards, progress, flags, notes };\n}\n\nexport async function upsertSrs(entry: SrsEntry): Promise<SrsEntry> {\n  const supa = await createClient();\n  const userId = await getCurrentUserId();\n  if (!userId) throw new Error(\"Not authenticated\");\n  const { data, error } = await supa\n    .from(\"srs\")\n    .upsert({\n      user_id: userId,\n      card_id: entry.cardId,\n      ease: entry.ease,\n      interval: entry.interval,\n      due: entry.due.slice(0, 10),\n      last_rating: entry.lastRating ?? null,\n    })\n    .select(\"*\")\n    .maybeSingle();\n  if (error) throw error;\n  return {\n    cardId: data!.card_id,\n    ease: data!.ease,\n    interval: data!.interval,\n    due: new Date(data!.due).toISOString(),\n    lastRating: data!.last_rating ?? undefined,\n  } satisfies SrsEntry;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/idb.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/localdb.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-expressions","severity":1,"message":"Expected an assignment or function call and instead saw an expression.","line":46,"column":3,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":51,"endColumn":6},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1651,1654],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1651,1654],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":218,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":218,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7193,7196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7193,7196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\";\nimport * as React from \"react\";\n\nimport type {\n  AiDraft,\n  Card,\n  Course,\n  Lesson,\n  LessonCards,\n  Progress,\n  UUID,\n  CoursePlan,\n  SrsEntry,\n  SrsRating,\n} from \"./types\";\n\n// --- Client cache + pub/sub (no localStorage persistence) ------------------\nlet __dbVersion = 0;\nconst __listeners = new Set<() => void>();\nlet __bc: BroadcastChannel | null = null;\n\ntype DB = {\n  courses: Course[];\n  lessons: Lesson[];\n  cards: Card[];\n  progress: Progress[];\n  srs: SrsEntry[];\n  flags: { cardId: UUID; flaggedAt: string }[];\n  notes: { cardId: UUID; text: string; updatedAt: string }[];\n};\n\nfunction emptyDb(): DB {\n  return { courses: [], lessons: [], cards: [], progress: [], srs: [], flags: [], notes: [] };\n}\n\nlet __db: DB = emptyDb();\n\nfunction __notifyDbChange() {\n  __dbVersion++;\n  __listeners.forEach((l) => { try { l(); } catch {} });\n  try { __bc?.postMessage({ type: \"db-change\", v: __dbVersion }); } catch {}\n}\n\nif (typeof window !== \"undefined\") {\n  try { __bc = new BroadcastChannel(\"learnify_sync\"); } catch {}\n  __bc && (__bc.onmessage = (ev) => {\n    if (ev?.data?.type === \"db-change\") {\n      __dbVersion = Math.max(__dbVersion, Number(ev.data.v) || 0);\n      __listeners.forEach((l) => { try { l(); } catch {} });\n    }\n  });\n  // Initial sync\n  void refreshAll();\n}\n\nexport function subscribeLocalDb(listener: () => void): () => void {\n  __listeners.add(listener);\n  return () => { __listeners.delete(listener); };\n}\n\nexport function useLocalDbVersion(): number {\n  return React.useSyncExternalStore(subscribeLocalDb, () => __dbVersion, () => __dbVersion);\n}\n\nasync function api<T = unknown>(op: string, params?: any): Promise<T> {\n  const res = await fetch(\"/api/db\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ op, params }),\n  });\n  if (!res.ok) throw new Error(await res.text());\n  return (await res.json()) as T;\n}\n\nexport async function refreshAll() {\n  const snap = await api<DB & { notes: { cardId: UUID; text: string; updatedAt: string } }>(\"snapshot\");\n  __db = { ...__db, ...snap };\n  __notifyDbChange();\n}\n\n// ----- Reads (sync from cache) --------------------------------------------\nexport function listCourses(): Course[] {\n  return [...__db.courses].sort((a, b) => b.updatedAt.localeCompare(a.updatedAt));\n}\n\nexport function getCourse(courseId: UUID): Course | undefined {\n  return __db.courses.find((c) => c.id === courseId);\n}\n\nexport function listLessons(courseId: UUID): Lesson[] {\n  return __db.lessons\n    .filter((l) => l.courseId === courseId)\n    .sort((a, b) => a.orderIndex - b.orderIndex || a.createdAt.localeCompare(b.createdAt));\n}\n\nexport function listCards(lessonId: UUID): Card[] {\n  return __db.cards\n    .filter((c) => c.lessonId === lessonId)\n    .sort((a, b) => a.orderIndex - b.orderIndex || a.createdAt.localeCompare(b.createdAt));\n}\n\nexport function getProgress(cardId: UUID): Progress | undefined {\n  return __db.progress.find((p) => p.cardId === cardId);\n}\n\nexport function isFlagged(cardId: UUID): boolean {\n  return __db.flags.some((f) => f.cardId === cardId);\n}\n\nexport function getNote(cardId: UUID): string | undefined {\n  return __db.notes.find((n) => n.cardId === cardId)?.text;\n}\n\nexport function listFlaggedByCourse(courseId: UUID): UUID[] {\n  const lessonIds = __db.lessons.filter((l) => l.courseId === courseId).map((l) => l.id);\n  const cardIds = __db.cards.filter((c) => lessonIds.includes(c.lessonId)).map((c) => c.id);\n  const set = new Set(cardIds);\n  return __db.flags.filter((f) => set.has(f.cardId)).map((f) => f.cardId);\n}\n\n// ----- Writes (async, then refresh cache) ---------------------------------\nexport async function createCourse(input: { title: string; description?: string; category?: string }): Promise<{ courseId: UUID }> {\n  const res = await api<{ courseId: UUID }>(\"createCourse\", input);\n  await refreshAll();\n  return res;\n}\n\nexport async function updateCourse(courseId: UUID, patch: Partial<Course>): Promise<void> {\n  await api(\"updateCourse\", { courseId, patch });\n  await refreshAll();\n}\n\nexport async function deleteCourse(courseId: UUID): Promise<void> {\n  await api(\"deleteCourse\", { courseId });\n  await refreshAll();\n}\n\nexport async function addLesson(courseId: UUID, title: string): Promise<{ lessonId: UUID }> {\n  const res = await api<{ lessonId: UUID }>(\"addLesson\", { courseId, title });\n  await refreshAll();\n  return res;\n}\n\nexport async function deleteLesson(lessonId: UUID): Promise<void> {\n  await api(\"deleteLesson\", { lessonId });\n  await refreshAll();\n}\n\nexport async function reorderLessons(courseId: UUID, orderedIds: UUID[]): Promise<void> {\n  await api(\"reorderLessons\", { courseId, orderedIds });\n  await refreshAll();\n}\n\nexport async function addCard(\n  lessonId: UUID,\n  card: Omit<Card, \"id\" | \"lessonId\" | \"createdAt\" | \"orderIndex\">\n): Promise<UUID> {\n  const { id } = await api<{ id: UUID }>(\"addCard\", { lessonId, card });\n  await refreshAll();\n  return id;\n}\n\nexport async function updateCard(cardId: UUID, patch: Partial<Card>): Promise<void> {\n  await api(\"updateCard\", { cardId, patch });\n  await refreshAll();\n}\n\nexport async function deleteCard(cardId: UUID): Promise<void> {\n  await api(\"deleteCard\", { cardId });\n  await refreshAll();\n}\n\nexport async function deleteCards(ids: UUID[]): Promise<void> {\n  await api(\"deleteCards\", { ids });\n  await refreshAll();\n}\n\nexport async function reorderCards(lessonId: UUID, orderedIds: UUID[]): Promise<void> {\n  await api(\"reorderCards\", { lessonId, orderedIds });\n  await refreshAll();\n}\n\nexport async function saveProgress(input: Progress): Promise<void> {\n  await api(\"saveProgress\", { input });\n  const idx = __db.progress.findIndex((p) => p.cardId === input.cardId);\n  if (idx === -1) __db.progress.push(input); else __db.progress[idx] = input;\n  __notifyDbChange();\n}\n\nexport async function rateSrs(cardId: UUID, rating: SrsRating): Promise<SrsEntry> {\n  const entry = await api<SrsEntry>(\"rateSrs\", { cardId, rating });\n  const idx = __db.srs.findIndex((s) => s.cardId === cardId);\n  if (idx === -1) __db.srs.push(entry); else __db.srs[idx] = entry;\n  __notifyDbChange();\n  return entry;\n}\n\nexport async function toggleFlag(cardId: UUID): Promise<boolean> {\n  const { on } = await api<{ on: boolean }>(\"toggleFlag\", { cardId });\n  const idx = __db.flags.findIndex((f) => f.cardId === cardId);\n  if (on && idx === -1) __db.flags.push({ cardId, flaggedAt: new Date().toISOString() });\n  if (!on && idx !== -1) __db.flags.splice(idx, 1);\n  __notifyDbChange();\n  return on;\n}\n\nexport async function saveNote(cardId: UUID, text: string): Promise<void> {\n  await api(\"saveNote\", { cardId, text });\n  const idx = __db.notes.findIndex((n) => n.cardId === cardId);\n  const row = { cardId, text, updatedAt: new Date().toISOString() };\n  if (idx === -1) __db.notes.push(row); else __db.notes[idx] = row;\n  __notifyDbChange();\n}\n\n// ----- AI drafts backed by DB ---------------------------------------------\nexport async function saveDraft(kind: AiDraft[\"kind\"], payload: CoursePlan | LessonCards): Promise<AiDraft> {\n  const res = await api<{ id: string }>(\"saveDraft\", { kind, payload });\n  return { id: res.id, kind, payload: payload as any, createdAt: new Date().toISOString() };\n}\n\nexport async function commitCoursePlan(draftId: string): Promise<{ courseId: UUID } | undefined> {\n  const res = await api<{ courseId: UUID } | null>(\"commitCoursePlan\", { draftId });\n  await refreshAll();\n  return res ?? undefined;\n}\n\nexport async function commitCoursePlanPartial(draftId: string, selectedIndexes: number[]): Promise<{ courseId: UUID } | undefined> {\n  const res = await api<{ courseId: UUID } | null>(\"commitCoursePlanPartial\", { draftId, selectedIndexes });\n  await refreshAll();\n  return res ?? undefined;\n}\n\nexport async function commitLessonCards(opts: { draftId: string; lessonId: UUID }): Promise<{ count: number; cardIds: UUID[] } | undefined> {\n  const res = await api<{ count: number; cardIds: UUID[] } | null>(\"commitLessonCards\", opts);\n  await refreshAll();\n  return res ?? undefined;\n}\n\nexport async function commitLessonCardsPartial(opts: { draftId: string; lessonId: UUID; selectedIndexes: number[] }): Promise<{ count: number; cardIds: UUID[] } | undefined> {\n  const res = await api<{ count: number; cardIds: UUID[] } | null>(\"commitLessonCardsPartial\", opts);\n  await refreshAll();\n  return res ?? undefined;\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/supabase/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/supabase/middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'options' is defined but never used.","line":18,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":55}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createServerClient } from \"@supabase/ssr\";\nimport { NextResponse, type NextRequest } from \"next/server\";\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))\n          supabaseResponse = NextResponse.next({\n            request,\n          })\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options)\n          )\n        },\n      },\n    }\n  )\n\n  // Do not run code between createServerClient and\n  // supabase.auth.getUser(). A simple mistake could make it very hard to debug\n  // issues with users being randomly logged out.\n\n  // IMPORTANT: DO NOT REMOVE auth.getUser()\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (\n    !user &&\n    !request.nextUrl.pathname.startsWith('/login') &&\n    !request.nextUrl.pathname.startsWith('/auth') &&\n    !request.nextUrl.pathname.startsWith('/error')\n  ) {\n    // no user, potentially respond by redirecting the user to the login page\n    const url = request.nextUrl.clone()\n    url.pathname = '/login'\n    return NextResponse.redirect(url)\n  }\n\n  // IMPORTANT: You *must* return the supabaseResponse object as it is.\n  // If you're creating a new response object with NextResponse.next() make sure to:\n  // 1. Pass the request in it, like so:\n  //    const myNewResponse = NextResponse.next({ request })\n  // 2. Copy over the cookies, like so:\n  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())\n  // 3. Change the myNewResponse object to fit your needs, but avoid changing\n  //    the cookies!\n  // 4. Finally:\n  //    return myNewResponse\n  // If this is not done, you may be causing the browser and server to go out\n  // of sync and terminate the user's session prematurely!\n\n  return supabaseResponse\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/supabase/server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/utils/cn.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/lib/utils/cn.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/server-actions/ai.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4201,4204],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4201,4204],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4256,4259],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4256,4259],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4513,4516],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4513,4516],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5853,5856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5853,5856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":155,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5908,5911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5908,5911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6165,6168],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6165,6168],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use server\";\nimport type { UUID, CoursePlan, LessonCards } from \"@/lib/types\";\nimport { createClient, getCurrentUserId } from \"@/lib/supabase/server\";\n\nexport async function saveDraftAction(\n  kind: \"outline\" | \"lesson-cards\",\n  payload: CoursePlan | LessonCards\n): Promise<{ id: string }> {\n  const supa = await createClient();\n  const userId = await getCurrentUserId();\n  if (!userId) throw new Error(\"Not authenticated\");\n  const { data, error } = await supa\n    .from(\"ai_drafts\")\n    .insert({ user_id: userId, kind, payload })\n    .select(\"id\")\n    .single();\n  if (error) throw error;\n  return { id: data.id };\n}\n\nexport async function commitCoursePlanAction(draftId: string): Promise<{ courseId: UUID } | undefined> {\n  const supa = await createClient();\n  const userId = await getCurrentUserId();\n  if (!userId) throw new Error(\"Not authenticated\");\n  const { data: draft, error: e1 } = await supa\n    .from(\"ai_drafts\")\n    .select(\"*\")\n    .eq(\"user_id\", userId)\n    .eq(\"id\", draftId)\n    .eq(\"kind\", \"outline\")\n    .maybeSingle();\n  if (e1) throw e1;\n  if (!draft) return undefined;\n  const plan = draft.payload as CoursePlan;\n  const { data: course, error: e2 } = await supa\n    .from(\"courses\")\n    .insert({ owner_id: userId, title: plan.course.title, description: plan.course.description ?? null, category: plan.course.category ?? null, status: \"draft\" })\n    .select(\"id\")\n    .single();\n  if (e2) throw e2;\n  const cid = course.id as UUID;\n  // insert lessons with incremental order_index\n  const rows = plan.lessons.map((l, idx) => ({ course_id: cid, title: l.title, order_index: idx }));\n  if (rows.length) {\n    const { error: e3 } = await supa.from(\"lessons\").insert(rows);\n    if (e3) throw e3;\n  }\n  await supa.from(\"ai_drafts\").delete().eq(\"id\", draftId);\n  return { courseId: cid };\n}\n\nexport async function commitCoursePlanPartialAction(draftId: string, selectedIndexes: number[]): Promise<{ courseId: UUID } | undefined> {\n  const supa = await createClient();\n  const userId = await getCurrentUserId();\n  if (!userId) throw new Error(\"Not authenticated\");\n  const { data: draft, error: e1 } = await supa\n    .from(\"ai_drafts\")\n    .select(\"*\")\n    .eq(\"user_id\", userId)\n    .eq(\"id\", draftId)\n    .eq(\"kind\", \"outline\")\n    .maybeSingle();\n  if (e1) throw e1;\n  if (!draft) return undefined;\n  const plan = draft.payload as CoursePlan;\n  const { data: course, error: e2 } = await supa\n    .from(\"courses\")\n    .insert({ owner_id: userId, title: plan.course.title, description: plan.course.description ?? null, category: plan.course.category ?? null, status: \"draft\" })\n    .select(\"id\")\n    .single();\n  if (e2) throw e2;\n  const cid = course.id as UUID;\n  const set = new Set(selectedIndexes);\n  const rows = plan.lessons\n    .map((l, idx) => (set.has(idx) ? { course_id: cid, title: l.title } : null))\n    .filter(Boolean) as { course_id: UUID; title: string }[];\n  const withOrder = rows.map((r, idx) => ({ ...r, order_index: idx }));\n  if (withOrder.length) {\n    const { error: e3 } = await supa.from(\"lessons\").insert(withOrder);\n    if (e3) throw e3;\n  }\n  await supa.from(\"ai_drafts\").delete().eq(\"id\", draftId);\n  return { courseId: cid };\n}\n\nexport async function commitLessonCardsAction(opts: { draftId: string; lessonId: UUID }): Promise<{ count: number; cardIds: UUID[] } | undefined> {\n  const supa = await createClient();\n  const userId = await getCurrentUserId();\n  if (!userId) throw new Error(\"Not authenticated\");\n  const { data: draft, error: e1 } = await supa\n    .from(\"ai_drafts\")\n    .select(\"*\")\n    .eq(\"user_id\", userId)\n    .eq(\"id\", opts.draftId)\n    .eq(\"kind\", \"lesson-cards\")\n    .maybeSingle();\n  if (e1) throw e1;\n  if (!draft) return undefined;\n  const payload = draft.payload as LessonCards;\n  const siblings = await supa\n    .from(\"cards\")\n    .select(\"order_index\")\n    .eq(\"lesson_id\", opts.lessonId)\n    .order(\"order_index\", { ascending: false })\n    .limit(1);\n  if (siblings.error) throw siblings.error;\n  let next = siblings.data?.[0]?.order_index != null ? Number(siblings.data[0].order_index) + 1 : 0;\n  const rows = payload.cards.map((item) => ({\n    lesson_id: opts.lessonId,\n    card_type: item.type,\n    title: (item as any).title ?? null,\n    tags: [],\n    content: item as any,\n    order_index: next++,\n  }));\n  let count = 0; const ids: UUID[] = [];\n  if (rows.length) {\n    const { data, error } = await supa.from(\"cards\").insert(rows).select(\"id\");\n    if (error) throw error;\n    count = data.length; ids.push(...data.map((r: any) => r.id as UUID));\n  }\n  await supa.from(\"ai_drafts\").delete().eq(\"id\", opts.draftId);\n  return { count, cardIds: ids };\n}\n\nexport async function commitLessonCardsPartialAction(opts: { draftId: string; lessonId: UUID; selectedIndexes: number[] }): Promise<{ count: number; cardIds: UUID[] } | undefined> {\n  const supa = await createClient();\n  const userId = await getCurrentUserId();\n  if (!userId) throw new Error(\"Not authenticated\");\n  const { data: draft, error: e1 } = await supa\n    .from(\"ai_drafts\")\n    .select(\"*\")\n    .eq(\"user_id\", userId)\n    .eq(\"id\", opts.draftId)\n    .eq(\"kind\", \"lesson-cards\")\n    .maybeSingle();\n  if (e1) throw e1;\n  if (!draft) return undefined;\n  const payload = draft.payload as LessonCards;\n  const set = new Set(opts.selectedIndexes);\n  const selected = payload.cards.map((it, idx) => (set.has(idx) ? it : null)).filter(Boolean) as LessonCards[\"cards\"];\n  const siblings = await supa\n    .from(\"cards\")\n    .select(\"order_index\")\n    .eq(\"lesson_id\", opts.lessonId)\n    .order(\"order_index\", { ascending: false })\n    .limit(1);\n  if (siblings.error) throw siblings.error;\n  let next = siblings.data?.[0]?.order_index != null ? Number(siblings.data[0].order_index) + 1 : 0;\n  const rows = selected.map((item) => ({\n    lesson_id: opts.lessonId,\n    card_type: item.type,\n    title: (item as any).title ?? null,\n    tags: [],\n    content: item as any,\n    order_index: next++,\n  }));\n  let count = 0; const ids: UUID[] = [];\n  if (rows.length) {\n    const { data, error } = await supa.from(\"cards\").insert(rows).select(\"id\");\n    if (error) throw error;\n    count = data.length; ids.push(...data.map((r: any) => r.id as UUID));\n  }\n  await supa.from(\"ai_drafts\").delete().eq(\"id\", opts.draftId);\n  return { count, cardIds: ids };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/server-actions/cards.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[822,825],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[822,825],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1083,1086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1083,1086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1284,1287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1284,1287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use server\";\nimport { createClient } from \"@/lib/supabase/server\";\nimport type { UUID, Card } from \"@/lib/types\";\n\nexport async function addCardAction(\n  lessonId: UUID,\n  card: Omit<Card, \"id\" | \"lessonId\" | \"createdAt\" | \"orderIndex\">\n): Promise<UUID> {\n  const supa = await createClient();\n  const { data: maxData, error: e1 } = await supa\n    .from(\"cards\")\n    .select(\"order_index\")\n    .eq(\"lesson_id\", lessonId)\n    .order(\"order_index\", { ascending: false })\n    .limit(1);\n  if (e1) throw e1;\n  const nextIndex = maxData?.[0]?.order_index != null ? Number(maxData[0].order_index) + 1 : 0;\n  const { data, error } = await supa\n    .from(\"cards\")\n    .insert({\n      lesson_id: lessonId,\n      card_type: card.cardType,\n      title: card.title ?? null,\n      tags: card.tags ?? [],\n      content: card.content as any,\n      order_index: nextIndex,\n    })\n    .select(\"id\")\n    .single();\n  if (error) throw error;\n  return data.id as UUID;\n}\n\nexport async function updateCardAction(cardId: UUID, patch: Partial<Card>) {\n  const supa = await createClient();\n  const updates: any = {};\n  if (patch.title !== undefined) updates.title = patch.title;\n  if (patch.tags !== undefined) updates.tags = patch.tags;\n  if (patch.content !== undefined) updates.content = patch.content as any;\n  if (patch.orderIndex !== undefined) updates.order_index = patch.orderIndex;\n  if (Object.keys(updates).length === 0) return;\n  const { error } = await supa.from(\"cards\").update(updates).eq(\"id\", cardId);\n  if (error) throw error;\n}\n\nexport async function deleteCardAction(cardId: UUID) {\n  const supa = await createClient();\n  const { error } = await supa.from(\"cards\").delete().eq(\"id\", cardId);\n  if (error) throw error;\n}\n\nexport async function deleteCardsAction(ids: UUID[]) {\n  if (!ids.length) return;\n  const supa = await createClient();\n  const { error } = await supa.from(\"cards\").delete().in(\"id\", ids);\n  if (error) throw error;\n}\n\nexport async function reorderCardsAction(lessonId: UUID, orderedIds: UUID[]) {\n  const supa = await createClient();\n  const updates = orderedIds.map((id, idx) => ({ id, order_index: idx }));\n  const { error } = await supa.from(\"cards\").upsert(updates, { onConflict: \"id\" });\n  if (error) throw error;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/server-actions/courses.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1026,1029],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1026,1029],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use server\";\nimport { revalidatePath } from \"next/cache\";\nimport { createClient, getCurrentUserId } from \"@/lib/supabase/server\";\nimport type { UUID, Course } from \"@/lib/types\";\n\nexport async function createCourseAction(input: { title: string; description?: string; category?: string }): Promise<{ courseId: UUID }> {\n  const supa = await createClient();\n  const ownerId = await getCurrentUserId();\n  if (!ownerId) throw new Error(\"Not authenticated\");\n  const { data, error } = await supa\n    .from(\"courses\")\n    .insert({\n      owner_id: ownerId,\n      title: input.title.trim(),\n      description: input.description?.trim() || null,\n      category: input.category?.trim() || null,\n      status: \"draft\",\n    })\n    .select(\"id\")\n    .single();\n  if (error) throw error;\n  revalidatePath(\"/\");\n  return { courseId: data.id };\n}\n\nexport async function updateCourseAction(courseId: UUID, patch: Partial<Pick<Course, \"title\" | \"description\" | \"category\" | \"status\">>) {\n  const supa = await createClient();\n  const updates: any = {};\n  if (patch.title !== undefined) updates.title = patch.title;\n  if (patch.description !== undefined) updates.description = patch.description;\n  if (patch.category !== undefined) updates.category = patch.category;\n  if (patch.status !== undefined) updates.status = patch.status;\n  if (Object.keys(updates).length === 0) return;\n  const { error } = await supa.from(\"courses\").update(updates).eq(\"id\", courseId);\n  if (error) throw error;\n  revalidatePath(\"/\");\n}\n\nexport async function deleteCourseAction(courseId: UUID) {\n  const supa = await createClient();\n  const { error } = await supa.from(\"courses\").delete().eq(\"id\", courseId);\n  if (error) throw error;\n  revalidatePath(\"/\");\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/server-actions/lessons.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/src/server-actions/progress.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/tests/setup.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[374,377],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[374,377],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[455,458],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[455,458],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import \"@testing-library/jest-dom/vitest\";\nimport { afterEach, vi } from \"vitest\";\nimport { cleanup } from \"@testing-library/react\";\n\n// Reset DOM and mocks after each test\nafterEach(() => {\n  cleanup();\n  try { localStorage.clear(); } catch {}\n  vi.restoreAllMocks();\n  vi.useRealTimers();\n});\n\n// Provide a minimal localStorage in jsdom/node if absent\nif (!(globalThis as any).localStorage) {\n  const store = new Map<string, string>();\n  (globalThis as any).localStorage = {\n    getItem: (k: string) => (store.has(k) ? store.get(k)! : null),\n    setItem: (k: string, v: string) => {\n      store.set(k, String(v));\n    },\n    removeItem: (k: string) => {\n      store.delete(k);\n    },\n    clear: () => {\n      store.clear();\n    },\n    key: (i: number) => Array.from(store.keys())[i] ?? null,\n    get length() {\n      return store.size;\n    },\n  } as unknown as Storage;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/takahashigenki/projects/learningapp-version2/vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]